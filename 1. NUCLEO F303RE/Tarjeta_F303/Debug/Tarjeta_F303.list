
Tarjeta_F303.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e78  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08004018  08004018  00014018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004098  08004098  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004098  08004098  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004098  08004098  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004098  08004098  00014098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800409c  0800409c  0001409c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080040a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000001dc  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000024c  2000024c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f3f9  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c94  00000000  00000000  0002f499  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c08  00000000  00000000  00031130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b60  00000000  00000000  00031d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ff85  00000000  00000000  00032898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f2fa  00000000  00000000  0005281d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8158  00000000  00000000  00061b17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00129c6f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003650  00000000  00000000  00129cc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004000 	.word	0x08004000

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004000 	.word	0x08004000

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b086      	sub	sp, #24
 8000284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t msg[20] = {'\0'};
 8000286:	2300      	movs	r3, #0
 8000288:	603b      	str	r3, [r7, #0]
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	2200      	movs	r2, #0
 800028e:	601a      	str	r2, [r3, #0]
 8000290:	605a      	str	r2, [r3, #4]
 8000292:	609a      	str	r2, [r3, #8]
 8000294:	60da      	str	r2, [r3, #12]
	uint16_t x = 0;
 8000296:	2300      	movs	r3, #0
 8000298:	82fb      	strh	r3, [r7, #22]
	uint16_t y = 0;
 800029a:	2300      	movs	r3, #0
 800029c:	82bb      	strh	r3, [r7, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800029e:	f000 fbe5 	bl	8000a6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002a2:	f000 f835 	bl	8000310 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a6:	f000 f9a9 	bl	80005fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002aa:	f000 f977 	bl	800059c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80002ae:	f000 f945 	bl	800053c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80002b2:	f000 f893 	bl	80003dc <MX_TIM1_Init>
  MX_TIM3_Init();
 80002b6:	f000 f8eb 	bl	8000490 <MX_TIM3_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  y = TIM1->CNT;
 80002ba:	4b11      	ldr	r3, [pc, #68]	; (8000300 <main+0x80>)
 80002bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002be:	82bb      	strh	r3, [r7, #20]
	  sprintf(msg, "Holas valor = %d", y);
 80002c0:	8aba      	ldrh	r2, [r7, #20]
 80002c2:	463b      	mov	r3, r7
 80002c4:	490f      	ldr	r1, [pc, #60]	; (8000304 <main+0x84>)
 80002c6:	4618      	mov	r0, r3
 80002c8:	f003 fa6c 	bl	80037a4 <siprintf>
	  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 80002cc:	4639      	mov	r1, r7
 80002ce:	2364      	movs	r3, #100	; 0x64
 80002d0:	2214      	movs	r2, #20
 80002d2:	480d      	ldr	r0, [pc, #52]	; (8000308 <main+0x88>)
 80002d4:	f002 fe1a 	bl	8002f0c <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, msg, sizeof(msg), 100);
 80002d8:	4639      	mov	r1, r7
 80002da:	2364      	movs	r3, #100	; 0x64
 80002dc:	2214      	movs	r2, #20
 80002de:	480b      	ldr	r0, [pc, #44]	; (800030c <main+0x8c>)
 80002e0:	f002 fe14 	bl	8002f0c <HAL_UART_Transmit>
	  HAL_Delay(2000);
 80002e4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002e8:	f000 fc26 	bl	8000b38 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 80002ec:	2120      	movs	r1, #32
 80002ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002f2:	f000 fef9 	bl	80010e8 <HAL_GPIO_TogglePin>
	  x++;
 80002f6:	8afb      	ldrh	r3, [r7, #22]
 80002f8:	3301      	adds	r3, #1
 80002fa:	82fb      	strh	r3, [r7, #22]
  {
 80002fc:	e7dd      	b.n	80002ba <main+0x3a>
 80002fe:	bf00      	nop
 8000300:	40012c00 	.word	0x40012c00
 8000304:	08004018 	.word	0x08004018
 8000308:	200001b4 	.word	0x200001b4
 800030c:	200000e4 	.word	0x200000e4

08000310 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b0a6      	sub	sp, #152	; 0x98
 8000314:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000316:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800031a:	2228      	movs	r2, #40	; 0x28
 800031c:	2100      	movs	r1, #0
 800031e:	4618      	mov	r0, r3
 8000320:	f003 fa38 	bl	8003794 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000324:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000328:	2200      	movs	r2, #0
 800032a:	601a      	str	r2, [r3, #0]
 800032c:	605a      	str	r2, [r3, #4]
 800032e:	609a      	str	r2, [r3, #8]
 8000330:	60da      	str	r2, [r3, #12]
 8000332:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000334:	1d3b      	adds	r3, r7, #4
 8000336:	2258      	movs	r2, #88	; 0x58
 8000338:	2100      	movs	r1, #0
 800033a:	4618      	mov	r0, r3
 800033c:	f003 fa2a 	bl	8003794 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000340:	2302      	movs	r3, #2
 8000342:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000344:	2301      	movs	r3, #1
 8000346:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000348:	2310      	movs	r3, #16
 800034a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800034e:	2302      	movs	r3, #2
 8000350:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000354:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000358:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800035c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000360:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000364:	2300      	movs	r3, #0
 8000366:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800036a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800036e:	4618      	mov	r0, r3
 8000370:	f000 fed4 	bl	800111c <HAL_RCC_OscConfig>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800037a:	f000 f9a5 	bl	80006c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800037e:	230f      	movs	r3, #15
 8000380:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000382:	2302      	movs	r3, #2
 8000384:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000386:	2300      	movs	r3, #0
 8000388:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800038a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800038e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000390:	2300      	movs	r3, #0
 8000392:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000394:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000398:	2102      	movs	r1, #2
 800039a:	4618      	mov	r0, r3
 800039c:	f001 fdd4 	bl	8001f48 <HAL_RCC_ClockConfig>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80003a6:	f000 f98f 	bl	80006c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80003aa:	4b0b      	ldr	r3, [pc, #44]	; (80003d8 <SystemClock_Config+0xc8>)
 80003ac:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80003ae:	2300      	movs	r3, #0
 80003b0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80003b2:	2300      	movs	r3, #0
 80003b4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80003b6:	2300      	movs	r3, #0
 80003b8:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 80003ba:	2300      	movs	r3, #0
 80003bc:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003be:	1d3b      	adds	r3, r7, #4
 80003c0:	4618      	mov	r0, r3
 80003c2:	f001 fff7 	bl	80023b4 <HAL_RCCEx_PeriphCLKConfig>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80003cc:	f000 f97c 	bl	80006c8 <Error_Handler>
  }
}
 80003d0:	bf00      	nop
 80003d2:	3798      	adds	r7, #152	; 0x98
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	00201003 	.word	0x00201003

080003dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b08c      	sub	sp, #48	; 0x30
 80003e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80003e2:	f107 030c 	add.w	r3, r7, #12
 80003e6:	2224      	movs	r2, #36	; 0x24
 80003e8:	2100      	movs	r1, #0
 80003ea:	4618      	mov	r0, r3
 80003ec:	f003 f9d2 	bl	8003794 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003f0:	463b      	mov	r3, r7
 80003f2:	2200      	movs	r2, #0
 80003f4:	601a      	str	r2, [r3, #0]
 80003f6:	605a      	str	r2, [r3, #4]
 80003f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003fa:	4b23      	ldr	r3, [pc, #140]	; (8000488 <MX_TIM1_Init+0xac>)
 80003fc:	4a23      	ldr	r2, [pc, #140]	; (800048c <MX_TIM1_Init+0xb0>)
 80003fe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000400:	4b21      	ldr	r3, [pc, #132]	; (8000488 <MX_TIM1_Init+0xac>)
 8000402:	2200      	movs	r2, #0
 8000404:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000406:	4b20      	ldr	r3, [pc, #128]	; (8000488 <MX_TIM1_Init+0xac>)
 8000408:	2200      	movs	r2, #0
 800040a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2500;
 800040c:	4b1e      	ldr	r3, [pc, #120]	; (8000488 <MX_TIM1_Init+0xac>)
 800040e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000412:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000414:	4b1c      	ldr	r3, [pc, #112]	; (8000488 <MX_TIM1_Init+0xac>)
 8000416:	2200      	movs	r2, #0
 8000418:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800041a:	4b1b      	ldr	r3, [pc, #108]	; (8000488 <MX_TIM1_Init+0xac>)
 800041c:	2200      	movs	r2, #0
 800041e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000420:	4b19      	ldr	r3, [pc, #100]	; (8000488 <MX_TIM1_Init+0xac>)
 8000422:	2200      	movs	r2, #0
 8000424:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000426:	2301      	movs	r3, #1
 8000428:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800042a:	2300      	movs	r3, #0
 800042c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800042e:	2301      	movs	r3, #1
 8000430:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000432:	2300      	movs	r3, #0
 8000434:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000436:	2300      	movs	r3, #0
 8000438:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800043a:	2300      	movs	r3, #0
 800043c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800043e:	2301      	movs	r3, #1
 8000440:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000442:	2300      	movs	r3, #0
 8000444:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000446:	2300      	movs	r3, #0
 8000448:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800044a:	f107 030c 	add.w	r3, r7, #12
 800044e:	4619      	mov	r1, r3
 8000450:	480d      	ldr	r0, [pc, #52]	; (8000488 <MX_TIM1_Init+0xac>)
 8000452:	f002 f9cd 	bl	80027f0 <HAL_TIM_Encoder_Init>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 800045c:	f000 f934 	bl	80006c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000460:	2300      	movs	r3, #0
 8000462:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000464:	2300      	movs	r3, #0
 8000466:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000468:	2300      	movs	r3, #0
 800046a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800046c:	463b      	mov	r3, r7
 800046e:	4619      	mov	r1, r3
 8000470:	4805      	ldr	r0, [pc, #20]	; (8000488 <MX_TIM1_Init+0xac>)
 8000472:	f002 fc53 	bl	8002d1c <HAL_TIMEx_MasterConfigSynchronization>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800047c:	f000 f924 	bl	80006c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000480:	bf00      	nop
 8000482:	3730      	adds	r7, #48	; 0x30
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	20000168 	.word	0x20000168
 800048c:	40012c00 	.word	0x40012c00

08000490 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b08c      	sub	sp, #48	; 0x30
 8000494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000496:	f107 030c 	add.w	r3, r7, #12
 800049a:	2224      	movs	r2, #36	; 0x24
 800049c:	2100      	movs	r1, #0
 800049e:	4618      	mov	r0, r3
 80004a0:	f003 f978 	bl	8003794 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004a4:	463b      	mov	r3, r7
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]
 80004aa:	605a      	str	r2, [r3, #4]
 80004ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004ae:	4b21      	ldr	r3, [pc, #132]	; (8000534 <MX_TIM3_Init+0xa4>)
 80004b0:	4a21      	ldr	r2, [pc, #132]	; (8000538 <MX_TIM3_Init+0xa8>)
 80004b2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80004b4:	4b1f      	ldr	r3, [pc, #124]	; (8000534 <MX_TIM3_Init+0xa4>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004ba:	4b1e      	ldr	r3, [pc, #120]	; (8000534 <MX_TIM3_Init+0xa4>)
 80004bc:	2200      	movs	r2, #0
 80004be:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2500;
 80004c0:	4b1c      	ldr	r3, [pc, #112]	; (8000534 <MX_TIM3_Init+0xa4>)
 80004c2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80004c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004c8:	4b1a      	ldr	r3, [pc, #104]	; (8000534 <MX_TIM3_Init+0xa4>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004ce:	4b19      	ldr	r3, [pc, #100]	; (8000534 <MX_TIM3_Init+0xa4>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 80004d4:	2302      	movs	r3, #2
 80004d6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80004d8:	2300      	movs	r3, #0
 80004da:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80004dc:	2301      	movs	r3, #1
 80004de:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80004e0:	2300      	movs	r3, #0
 80004e2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80004e4:	2300      	movs	r3, #0
 80004e6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80004e8:	2300      	movs	r3, #0
 80004ea:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80004ec:	2301      	movs	r3, #1
 80004ee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80004f0:	2300      	movs	r3, #0
 80004f2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80004f4:	2300      	movs	r3, #0
 80004f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80004f8:	f107 030c 	add.w	r3, r7, #12
 80004fc:	4619      	mov	r1, r3
 80004fe:	480d      	ldr	r0, [pc, #52]	; (8000534 <MX_TIM3_Init+0xa4>)
 8000500:	f002 f976 	bl	80027f0 <HAL_TIM_Encoder_Init>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800050a:	f000 f8dd 	bl	80006c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800050e:	2300      	movs	r3, #0
 8000510:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000512:	2300      	movs	r3, #0
 8000514:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000516:	463b      	mov	r3, r7
 8000518:	4619      	mov	r1, r3
 800051a:	4806      	ldr	r0, [pc, #24]	; (8000534 <MX_TIM3_Init+0xa4>)
 800051c:	f002 fbfe 	bl	8002d1c <HAL_TIMEx_MasterConfigSynchronization>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000526:	f000 f8cf 	bl	80006c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800052a:	bf00      	nop
 800052c:	3730      	adds	r7, #48	; 0x30
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	20000098 	.word	0x20000098
 8000538:	40000400 	.word	0x40000400

0800053c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000540:	4b14      	ldr	r3, [pc, #80]	; (8000594 <MX_USART1_UART_Init+0x58>)
 8000542:	4a15      	ldr	r2, [pc, #84]	; (8000598 <MX_USART1_UART_Init+0x5c>)
 8000544:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8000546:	4b13      	ldr	r3, [pc, #76]	; (8000594 <MX_USART1_UART_Init+0x58>)
 8000548:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800054c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800054e:	4b11      	ldr	r3, [pc, #68]	; (8000594 <MX_USART1_UART_Init+0x58>)
 8000550:	2200      	movs	r2, #0
 8000552:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000554:	4b0f      	ldr	r3, [pc, #60]	; (8000594 <MX_USART1_UART_Init+0x58>)
 8000556:	2200      	movs	r2, #0
 8000558:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800055a:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <MX_USART1_UART_Init+0x58>)
 800055c:	2200      	movs	r2, #0
 800055e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000560:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <MX_USART1_UART_Init+0x58>)
 8000562:	220c      	movs	r2, #12
 8000564:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000566:	4b0b      	ldr	r3, [pc, #44]	; (8000594 <MX_USART1_UART_Init+0x58>)
 8000568:	2200      	movs	r2, #0
 800056a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800056c:	4b09      	ldr	r3, [pc, #36]	; (8000594 <MX_USART1_UART_Init+0x58>)
 800056e:	2200      	movs	r2, #0
 8000570:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000572:	4b08      	ldr	r3, [pc, #32]	; (8000594 <MX_USART1_UART_Init+0x58>)
 8000574:	2200      	movs	r2, #0
 8000576:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000578:	4b06      	ldr	r3, [pc, #24]	; (8000594 <MX_USART1_UART_Init+0x58>)
 800057a:	2200      	movs	r2, #0
 800057c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800057e:	4805      	ldr	r0, [pc, #20]	; (8000594 <MX_USART1_UART_Init+0x58>)
 8000580:	f002 fc76 	bl	8002e70 <HAL_UART_Init>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800058a:	f000 f89d 	bl	80006c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	200000e4 	.word	0x200000e4
 8000598:	40013800 	.word	0x40013800

0800059c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005a0:	4b14      	ldr	r3, [pc, #80]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005a2:	4a15      	ldr	r2, [pc, #84]	; (80005f8 <MX_USART2_UART_Init+0x5c>)
 80005a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 80005a6:	4b13      	ldr	r3, [pc, #76]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005a8:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80005ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005ae:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005b4:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005ba:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005bc:	2200      	movs	r2, #0
 80005be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005c0:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005c2:	220c      	movs	r2, #12
 80005c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005c6:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005cc:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005d2:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005da:	2200      	movs	r2, #0
 80005dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005de:	4805      	ldr	r0, [pc, #20]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005e0:	f002 fc46 	bl	8002e70 <HAL_UART_Init>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005ea:	f000 f86d 	bl	80006c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	200001b4 	.word	0x200001b4
 80005f8:	40004400 	.word	0x40004400

080005fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b08a      	sub	sp, #40	; 0x28
 8000600:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
 8000610:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000612:	4b2b      	ldr	r3, [pc, #172]	; (80006c0 <MX_GPIO_Init+0xc4>)
 8000614:	695b      	ldr	r3, [r3, #20]
 8000616:	4a2a      	ldr	r2, [pc, #168]	; (80006c0 <MX_GPIO_Init+0xc4>)
 8000618:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800061c:	6153      	str	r3, [r2, #20]
 800061e:	4b28      	ldr	r3, [pc, #160]	; (80006c0 <MX_GPIO_Init+0xc4>)
 8000620:	695b      	ldr	r3, [r3, #20]
 8000622:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000626:	613b      	str	r3, [r7, #16]
 8000628:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800062a:	4b25      	ldr	r3, [pc, #148]	; (80006c0 <MX_GPIO_Init+0xc4>)
 800062c:	695b      	ldr	r3, [r3, #20]
 800062e:	4a24      	ldr	r2, [pc, #144]	; (80006c0 <MX_GPIO_Init+0xc4>)
 8000630:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000634:	6153      	str	r3, [r2, #20]
 8000636:	4b22      	ldr	r3, [pc, #136]	; (80006c0 <MX_GPIO_Init+0xc4>)
 8000638:	695b      	ldr	r3, [r3, #20]
 800063a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000642:	4b1f      	ldr	r3, [pc, #124]	; (80006c0 <MX_GPIO_Init+0xc4>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	4a1e      	ldr	r2, [pc, #120]	; (80006c0 <MX_GPIO_Init+0xc4>)
 8000648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800064c:	6153      	str	r3, [r2, #20]
 800064e:	4b1c      	ldr	r3, [pc, #112]	; (80006c0 <MX_GPIO_Init+0xc4>)
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800065a:	4b19      	ldr	r3, [pc, #100]	; (80006c0 <MX_GPIO_Init+0xc4>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	4a18      	ldr	r2, [pc, #96]	; (80006c0 <MX_GPIO_Init+0xc4>)
 8000660:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000664:	6153      	str	r3, [r2, #20]
 8000666:	4b16      	ldr	r3, [pc, #88]	; (80006c0 <MX_GPIO_Init+0xc4>)
 8000668:	695b      	ldr	r3, [r3, #20]
 800066a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000672:	2200      	movs	r2, #0
 8000674:	2120      	movs	r1, #32
 8000676:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800067a:	f000 fd1d 	bl	80010b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800067e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000684:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000688:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	4619      	mov	r1, r3
 8000694:	480b      	ldr	r0, [pc, #44]	; (80006c4 <MX_GPIO_Init+0xc8>)
 8000696:	f000 fb85 	bl	8000da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800069a:	2320      	movs	r3, #32
 800069c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069e:	2301      	movs	r3, #1
 80006a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a6:	2300      	movs	r3, #0
 80006a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006aa:	f107 0314 	add.w	r3, r7, #20
 80006ae:	4619      	mov	r1, r3
 80006b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b4:	f000 fb76 	bl	8000da4 <HAL_GPIO_Init>

}
 80006b8:	bf00      	nop
 80006ba:	3728      	adds	r7, #40	; 0x28
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40021000 	.word	0x40021000
 80006c4:	48000800 	.word	0x48000800

080006c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006cc:	b672      	cpsid	i
}
 80006ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <Error_Handler+0x8>
	...

080006d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006da:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <HAL_MspInit+0x44>)
 80006dc:	699b      	ldr	r3, [r3, #24]
 80006de:	4a0e      	ldr	r2, [pc, #56]	; (8000718 <HAL_MspInit+0x44>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	6193      	str	r3, [r2, #24]
 80006e6:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <HAL_MspInit+0x44>)
 80006e8:	699b      	ldr	r3, [r3, #24]
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <HAL_MspInit+0x44>)
 80006f4:	69db      	ldr	r3, [r3, #28]
 80006f6:	4a08      	ldr	r2, [pc, #32]	; (8000718 <HAL_MspInit+0x44>)
 80006f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fc:	61d3      	str	r3, [r2, #28]
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <HAL_MspInit+0x44>)
 8000700:	69db      	ldr	r3, [r3, #28]
 8000702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000706:	603b      	str	r3, [r7, #0]
 8000708:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800070a:	2007      	movs	r0, #7
 800070c:	f000 fb08 	bl	8000d20 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40021000 	.word	0x40021000

0800071c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08c      	sub	sp, #48	; 0x30
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000724:	f107 031c 	add.w	r3, r7, #28
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a36      	ldr	r2, [pc, #216]	; (8000814 <HAL_TIM_Encoder_MspInit+0xf8>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d130      	bne.n	80007a0 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800073e:	4b36      	ldr	r3, [pc, #216]	; (8000818 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000740:	699b      	ldr	r3, [r3, #24]
 8000742:	4a35      	ldr	r2, [pc, #212]	; (8000818 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000744:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000748:	6193      	str	r3, [r2, #24]
 800074a:	4b33      	ldr	r3, [pc, #204]	; (8000818 <HAL_TIM_Encoder_MspInit+0xfc>)
 800074c:	699b      	ldr	r3, [r3, #24]
 800074e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000752:	61bb      	str	r3, [r7, #24]
 8000754:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000756:	4b30      	ldr	r3, [pc, #192]	; (8000818 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	4a2f      	ldr	r2, [pc, #188]	; (8000818 <HAL_TIM_Encoder_MspInit+0xfc>)
 800075c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000760:	6153      	str	r3, [r2, #20]
 8000762:	4b2d      	ldr	r3, [pc, #180]	; (8000818 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000764:	695b      	ldr	r3, [r3, #20]
 8000766:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800076a:	617b      	str	r3, [r7, #20]
 800076c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800076e:	2303      	movs	r3, #3
 8000770:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000772:	2302      	movs	r3, #2
 8000774:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077a:	2300      	movs	r3, #0
 800077c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800077e:	2302      	movs	r3, #2
 8000780:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000782:	f107 031c 	add.w	r3, r7, #28
 8000786:	4619      	mov	r1, r3
 8000788:	4824      	ldr	r0, [pc, #144]	; (800081c <HAL_TIM_Encoder_MspInit+0x100>)
 800078a:	f000 fb0b 	bl	8000da4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800078e:	2200      	movs	r2, #0
 8000790:	2100      	movs	r1, #0
 8000792:	2018      	movs	r0, #24
 8000794:	f000 facf 	bl	8000d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000798:	2018      	movs	r0, #24
 800079a:	f000 fae8 	bl	8000d6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800079e:	e035      	b.n	800080c <HAL_TIM_Encoder_MspInit+0xf0>
  else if(htim_encoder->Instance==TIM3)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a1e      	ldr	r2, [pc, #120]	; (8000820 <HAL_TIM_Encoder_MspInit+0x104>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d130      	bne.n	800080c <HAL_TIM_Encoder_MspInit+0xf0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80007aa:	4b1b      	ldr	r3, [pc, #108]	; (8000818 <HAL_TIM_Encoder_MspInit+0xfc>)
 80007ac:	69db      	ldr	r3, [r3, #28]
 80007ae:	4a1a      	ldr	r2, [pc, #104]	; (8000818 <HAL_TIM_Encoder_MspInit+0xfc>)
 80007b0:	f043 0302 	orr.w	r3, r3, #2
 80007b4:	61d3      	str	r3, [r2, #28]
 80007b6:	4b18      	ldr	r3, [pc, #96]	; (8000818 <HAL_TIM_Encoder_MspInit+0xfc>)
 80007b8:	69db      	ldr	r3, [r3, #28]
 80007ba:	f003 0302 	and.w	r3, r3, #2
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	4b15      	ldr	r3, [pc, #84]	; (8000818 <HAL_TIM_Encoder_MspInit+0xfc>)
 80007c4:	695b      	ldr	r3, [r3, #20]
 80007c6:	4a14      	ldr	r2, [pc, #80]	; (8000818 <HAL_TIM_Encoder_MspInit+0xfc>)
 80007c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007cc:	6153      	str	r3, [r2, #20]
 80007ce:	4b12      	ldr	r3, [pc, #72]	; (8000818 <HAL_TIM_Encoder_MspInit+0xfc>)
 80007d0:	695b      	ldr	r3, [r3, #20]
 80007d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80007da:	2350      	movs	r3, #80	; 0x50
 80007dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007de:	2302      	movs	r3, #2
 80007e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	2300      	movs	r3, #0
 80007e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80007ea:	2302      	movs	r3, #2
 80007ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ee:	f107 031c 	add.w	r3, r7, #28
 80007f2:	4619      	mov	r1, r3
 80007f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f8:	f000 fad4 	bl	8000da4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2100      	movs	r1, #0
 8000800:	201d      	movs	r0, #29
 8000802:	f000 fa98 	bl	8000d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000806:	201d      	movs	r0, #29
 8000808:	f000 fab1 	bl	8000d6e <HAL_NVIC_EnableIRQ>
}
 800080c:	bf00      	nop
 800080e:	3730      	adds	r7, #48	; 0x30
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40012c00 	.word	0x40012c00
 8000818:	40021000 	.word	0x40021000
 800081c:	48000800 	.word	0x48000800
 8000820:	40000400 	.word	0x40000400

08000824 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08c      	sub	sp, #48	; 0x30
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	f107 031c 	add.w	r3, r7, #28
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a2e      	ldr	r2, [pc, #184]	; (80008fc <HAL_UART_MspInit+0xd8>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d128      	bne.n	8000898 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000846:	4b2e      	ldr	r3, [pc, #184]	; (8000900 <HAL_UART_MspInit+0xdc>)
 8000848:	699b      	ldr	r3, [r3, #24]
 800084a:	4a2d      	ldr	r2, [pc, #180]	; (8000900 <HAL_UART_MspInit+0xdc>)
 800084c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000850:	6193      	str	r3, [r2, #24]
 8000852:	4b2b      	ldr	r3, [pc, #172]	; (8000900 <HAL_UART_MspInit+0xdc>)
 8000854:	699b      	ldr	r3, [r3, #24]
 8000856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800085a:	61bb      	str	r3, [r7, #24]
 800085c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800085e:	4b28      	ldr	r3, [pc, #160]	; (8000900 <HAL_UART_MspInit+0xdc>)
 8000860:	695b      	ldr	r3, [r3, #20]
 8000862:	4a27      	ldr	r2, [pc, #156]	; (8000900 <HAL_UART_MspInit+0xdc>)
 8000864:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000868:	6153      	str	r3, [r2, #20]
 800086a:	4b25      	ldr	r3, [pc, #148]	; (8000900 <HAL_UART_MspInit+0xdc>)
 800086c:	695b      	ldr	r3, [r3, #20]
 800086e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000872:	617b      	str	r3, [r7, #20]
 8000874:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000876:	2330      	movs	r3, #48	; 0x30
 8000878:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087a:	2302      	movs	r3, #2
 800087c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000882:	2303      	movs	r3, #3
 8000884:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000886:	2307      	movs	r3, #7
 8000888:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	4619      	mov	r1, r3
 8000890:	481c      	ldr	r0, [pc, #112]	; (8000904 <HAL_UART_MspInit+0xe0>)
 8000892:	f000 fa87 	bl	8000da4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000896:	e02d      	b.n	80008f4 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART2)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a1a      	ldr	r2, [pc, #104]	; (8000908 <HAL_UART_MspInit+0xe4>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d128      	bne.n	80008f4 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80008a2:	4b17      	ldr	r3, [pc, #92]	; (8000900 <HAL_UART_MspInit+0xdc>)
 80008a4:	69db      	ldr	r3, [r3, #28]
 80008a6:	4a16      	ldr	r2, [pc, #88]	; (8000900 <HAL_UART_MspInit+0xdc>)
 80008a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ac:	61d3      	str	r3, [r2, #28]
 80008ae:	4b14      	ldr	r3, [pc, #80]	; (8000900 <HAL_UART_MspInit+0xdc>)
 80008b0:	69db      	ldr	r3, [r3, #28]
 80008b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	4b11      	ldr	r3, [pc, #68]	; (8000900 <HAL_UART_MspInit+0xdc>)
 80008bc:	695b      	ldr	r3, [r3, #20]
 80008be:	4a10      	ldr	r2, [pc, #64]	; (8000900 <HAL_UART_MspInit+0xdc>)
 80008c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c4:	6153      	str	r3, [r2, #20]
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <HAL_UART_MspInit+0xdc>)
 80008c8:	695b      	ldr	r3, [r3, #20]
 80008ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008d2:	230c      	movs	r3, #12
 80008d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d6:	2302      	movs	r3, #2
 80008d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2300      	movs	r3, #0
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008e2:	2307      	movs	r3, #7
 80008e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f0:	f000 fa58 	bl	8000da4 <HAL_GPIO_Init>
}
 80008f4:	bf00      	nop
 80008f6:	3730      	adds	r7, #48	; 0x30
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40013800 	.word	0x40013800
 8000900:	40021000 	.word	0x40021000
 8000904:	48000800 	.word	0x48000800
 8000908:	40004400 	.word	0x40004400

0800090c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000910:	e7fe      	b.n	8000910 <NMI_Handler+0x4>

08000912 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000916:	e7fe      	b.n	8000916 <HardFault_Handler+0x4>

08000918 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800091c:	e7fe      	b.n	800091c <MemManage_Handler+0x4>

0800091e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000922:	e7fe      	b.n	8000922 <BusFault_Handler+0x4>

08000924 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000928:	e7fe      	b.n	8000928 <UsageFault_Handler+0x4>

0800092a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr

08000946 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr

08000954 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000958:	f000 f8ce 	bl	8000af8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}

08000960 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000964:	4802      	ldr	r0, [pc, #8]	; (8000970 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8000966:	f001 ffe9 	bl	800293c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000168 	.word	0x20000168

08000974 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000978:	4802      	ldr	r0, [pc, #8]	; (8000984 <TIM3_IRQHandler+0x10>)
 800097a:	f001 ffdf 	bl	800293c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000098 	.word	0x20000098

08000988 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000990:	4a14      	ldr	r2, [pc, #80]	; (80009e4 <_sbrk+0x5c>)
 8000992:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <_sbrk+0x60>)
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800099c:	4b13      	ldr	r3, [pc, #76]	; (80009ec <_sbrk+0x64>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d102      	bne.n	80009aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009a4:	4b11      	ldr	r3, [pc, #68]	; (80009ec <_sbrk+0x64>)
 80009a6:	4a12      	ldr	r2, [pc, #72]	; (80009f0 <_sbrk+0x68>)
 80009a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009aa:	4b10      	ldr	r3, [pc, #64]	; (80009ec <_sbrk+0x64>)
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4413      	add	r3, r2
 80009b2:	693a      	ldr	r2, [r7, #16]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d207      	bcs.n	80009c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009b8:	f002 fec2 	bl	8003740 <__errno>
 80009bc:	4603      	mov	r3, r0
 80009be:	220c      	movs	r2, #12
 80009c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009c2:	f04f 33ff 	mov.w	r3, #4294967295
 80009c6:	e009      	b.n	80009dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009c8:	4b08      	ldr	r3, [pc, #32]	; (80009ec <_sbrk+0x64>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ce:	4b07      	ldr	r3, [pc, #28]	; (80009ec <_sbrk+0x64>)
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4413      	add	r3, r2
 80009d6:	4a05      	ldr	r2, [pc, #20]	; (80009ec <_sbrk+0x64>)
 80009d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009da:	68fb      	ldr	r3, [r7, #12]
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3718      	adds	r7, #24
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20010000 	.word	0x20010000
 80009e8:	00000400 	.word	0x00000400
 80009ec:	2000008c 	.word	0x2000008c
 80009f0:	20000250 	.word	0x20000250

080009f4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <SystemInit+0x20>)
 80009fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009fe:	4a05      	ldr	r2, [pc, #20]	; (8000a14 <SystemInit+0x20>)
 8000a00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a50 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a1c:	480d      	ldr	r0, [pc, #52]	; (8000a54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a1e:	490e      	ldr	r1, [pc, #56]	; (8000a58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a20:	4a0e      	ldr	r2, [pc, #56]	; (8000a5c <LoopForever+0xe>)
  movs r3, #0
 8000a22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a24:	e002      	b.n	8000a2c <LoopCopyDataInit>

08000a26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a2a:	3304      	adds	r3, #4

08000a2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a30:	d3f9      	bcc.n	8000a26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a32:	4a0b      	ldr	r2, [pc, #44]	; (8000a60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a34:	4c0b      	ldr	r4, [pc, #44]	; (8000a64 <LoopForever+0x16>)
  movs r3, #0
 8000a36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a38:	e001      	b.n	8000a3e <LoopFillZerobss>

08000a3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a3c:	3204      	adds	r2, #4

08000a3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a40:	d3fb      	bcc.n	8000a3a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a42:	f7ff ffd7 	bl	80009f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a46:	f002 fe81 	bl	800374c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a4a:	f7ff fc19 	bl	8000280 <main>

08000a4e <LoopForever>:

LoopForever:
    b LoopForever
 8000a4e:	e7fe      	b.n	8000a4e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a50:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a58:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a5c:	080040a0 	.word	0x080040a0
  ldr r2, =_sbss
 8000a60:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a64:	2000024c 	.word	0x2000024c

08000a68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a68:	e7fe      	b.n	8000a68 <ADC1_2_IRQHandler>
	...

08000a6c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a70:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <HAL_Init+0x28>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a07      	ldr	r2, [pc, #28]	; (8000a94 <HAL_Init+0x28>)
 8000a76:	f043 0310 	orr.w	r3, r3, #16
 8000a7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a7c:	2003      	movs	r0, #3
 8000a7e:	f000 f94f 	bl	8000d20 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a82:	2000      	movs	r0, #0
 8000a84:	f000 f808 	bl	8000a98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a88:	f7ff fe24 	bl	80006d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a8c:	2300      	movs	r3, #0
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40022000 	.word	0x40022000

08000a98 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aa0:	4b12      	ldr	r3, [pc, #72]	; (8000aec <HAL_InitTick+0x54>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <HAL_InitTick+0x58>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f000 f967 	bl	8000d8a <HAL_SYSTICK_Config>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	e00e      	b.n	8000ae4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2b0f      	cmp	r3, #15
 8000aca:	d80a      	bhi.n	8000ae2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000acc:	2200      	movs	r2, #0
 8000ace:	6879      	ldr	r1, [r7, #4]
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	f000 f92f 	bl	8000d36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ad8:	4a06      	ldr	r2, [pc, #24]	; (8000af4 <HAL_InitTick+0x5c>)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	e000      	b.n	8000ae4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20000000 	.word	0x20000000
 8000af0:	20000008 	.word	0x20000008
 8000af4:	20000004 	.word	0x20000004

08000af8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <HAL_IncTick+0x20>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	461a      	mov	r2, r3
 8000b02:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <HAL_IncTick+0x24>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4413      	add	r3, r2
 8000b08:	4a04      	ldr	r2, [pc, #16]	; (8000b1c <HAL_IncTick+0x24>)
 8000b0a:	6013      	str	r3, [r2, #0]
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	20000008 	.word	0x20000008
 8000b1c:	20000238 	.word	0x20000238

08000b20 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b24:	4b03      	ldr	r3, [pc, #12]	; (8000b34 <HAL_GetTick+0x14>)
 8000b26:	681b      	ldr	r3, [r3, #0]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	20000238 	.word	0x20000238

08000b38 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b40:	f7ff ffee 	bl	8000b20 <HAL_GetTick>
 8000b44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b50:	d005      	beq.n	8000b5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b52:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <HAL_Delay+0x44>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	461a      	mov	r2, r3
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b5e:	bf00      	nop
 8000b60:	f7ff ffde 	bl	8000b20 <HAL_GetTick>
 8000b64:	4602      	mov	r2, r0
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	68fa      	ldr	r2, [r7, #12]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d8f7      	bhi.n	8000b60 <HAL_Delay+0x28>
  {
  }
}
 8000b70:	bf00      	nop
 8000b72:	bf00      	nop
 8000b74:	3710      	adds	r7, #16
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000008 	.word	0x20000008

08000b80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f003 0307 	and.w	r3, r3, #7
 8000b8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b96:	68ba      	ldr	r2, [r7, #8]
 8000b98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bb2:	4a04      	ldr	r2, [pc, #16]	; (8000bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	60d3      	str	r3, [r2, #12]
}
 8000bb8:	bf00      	nop
 8000bba:	3714      	adds	r7, #20
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bcc:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	0a1b      	lsrs	r3, r3, #8
 8000bd2:	f003 0307 	and.w	r3, r3, #7
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	db0b      	blt.n	8000c0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	f003 021f 	and.w	r2, r3, #31
 8000bfc:	4907      	ldr	r1, [pc, #28]	; (8000c1c <__NVIC_EnableIRQ+0x38>)
 8000bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c02:	095b      	lsrs	r3, r3, #5
 8000c04:	2001      	movs	r0, #1
 8000c06:	fa00 f202 	lsl.w	r2, r0, r2
 8000c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c0e:	bf00      	nop
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000e100 	.word	0xe000e100

08000c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	6039      	str	r1, [r7, #0]
 8000c2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	db0a      	blt.n	8000c4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	b2da      	uxtb	r2, r3
 8000c38:	490c      	ldr	r1, [pc, #48]	; (8000c6c <__NVIC_SetPriority+0x4c>)
 8000c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3e:	0112      	lsls	r2, r2, #4
 8000c40:	b2d2      	uxtb	r2, r2
 8000c42:	440b      	add	r3, r1
 8000c44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c48:	e00a      	b.n	8000c60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	4908      	ldr	r1, [pc, #32]	; (8000c70 <__NVIC_SetPriority+0x50>)
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	f003 030f 	and.w	r3, r3, #15
 8000c56:	3b04      	subs	r3, #4
 8000c58:	0112      	lsls	r2, r2, #4
 8000c5a:	b2d2      	uxtb	r2, r2
 8000c5c:	440b      	add	r3, r1
 8000c5e:	761a      	strb	r2, [r3, #24]
}
 8000c60:	bf00      	nop
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000e100 	.word	0xe000e100
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b089      	sub	sp, #36	; 0x24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	f003 0307 	and.w	r3, r3, #7
 8000c86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	f1c3 0307 	rsb	r3, r3, #7
 8000c8e:	2b04      	cmp	r3, #4
 8000c90:	bf28      	it	cs
 8000c92:	2304      	movcs	r3, #4
 8000c94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	3304      	adds	r3, #4
 8000c9a:	2b06      	cmp	r3, #6
 8000c9c:	d902      	bls.n	8000ca4 <NVIC_EncodePriority+0x30>
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	3b03      	subs	r3, #3
 8000ca2:	e000      	b.n	8000ca6 <NVIC_EncodePriority+0x32>
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	43da      	mvns	r2, r3
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	401a      	ands	r2, r3
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc6:	43d9      	mvns	r1, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ccc:	4313      	orrs	r3, r2
         );
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3724      	adds	r7, #36	; 0x24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
	...

08000cdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cec:	d301      	bcc.n	8000cf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e00f      	b.n	8000d12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cf2:	4a0a      	ldr	r2, [pc, #40]	; (8000d1c <SysTick_Config+0x40>)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cfa:	210f      	movs	r1, #15
 8000cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000d00:	f7ff ff8e 	bl	8000c20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d04:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <SysTick_Config+0x40>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d0a:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <SysTick_Config+0x40>)
 8000d0c:	2207      	movs	r2, #7
 8000d0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d10:	2300      	movs	r3, #0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	e000e010 	.word	0xe000e010

08000d20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f7ff ff29 	bl	8000b80 <__NVIC_SetPriorityGrouping>
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b086      	sub	sp, #24
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	60b9      	str	r1, [r7, #8]
 8000d40:	607a      	str	r2, [r7, #4]
 8000d42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d48:	f7ff ff3e 	bl	8000bc8 <__NVIC_GetPriorityGrouping>
 8000d4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	68b9      	ldr	r1, [r7, #8]
 8000d52:	6978      	ldr	r0, [r7, #20]
 8000d54:	f7ff ff8e 	bl	8000c74 <NVIC_EncodePriority>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d5e:	4611      	mov	r1, r2
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff ff5d 	bl	8000c20 <__NVIC_SetPriority>
}
 8000d66:	bf00      	nop
 8000d68:	3718      	adds	r7, #24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b082      	sub	sp, #8
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	4603      	mov	r3, r0
 8000d76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff ff31 	bl	8000be4 <__NVIC_EnableIRQ>
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f7ff ffa2 	bl	8000cdc <SysTick_Config>
 8000d98:	4603      	mov	r3, r0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
	...

08000da4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b087      	sub	sp, #28
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dae:	2300      	movs	r3, #0
 8000db0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000db2:	e160      	b.n	8001076 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	2101      	movs	r1, #1
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	f000 8152 	beq.w	8001070 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f003 0303 	and.w	r3, r3, #3
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d005      	beq.n	8000de4 <HAL_GPIO_Init+0x40>
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f003 0303 	and.w	r3, r3, #3
 8000de0:	2b02      	cmp	r3, #2
 8000de2:	d130      	bne.n	8000e46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	2203      	movs	r2, #3
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	68da      	ldr	r2, [r3, #12]
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43db      	mvns	r3, r3
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	4013      	ands	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	091b      	lsrs	r3, r3, #4
 8000e30:	f003 0201 	and.w	r2, r3, #1
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f003 0303 	and.w	r3, r3, #3
 8000e4e:	2b03      	cmp	r3, #3
 8000e50:	d017      	beq.n	8000e82 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	68db      	ldr	r3, [r3, #12]
 8000e56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43db      	mvns	r3, r3
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	4013      	ands	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	689a      	ldr	r2, [r3, #8]
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f003 0303 	and.w	r3, r3, #3
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d123      	bne.n	8000ed6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	08da      	lsrs	r2, r3, #3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	3208      	adds	r2, #8
 8000e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	220f      	movs	r2, #15
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	691a      	ldr	r2, [r3, #16]
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	f003 0307 	and.w	r3, r3, #7
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	08da      	lsrs	r2, r3, #3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3208      	adds	r2, #8
 8000ed0:	6939      	ldr	r1, [r7, #16]
 8000ed2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	4013      	ands	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f003 0203 	and.w	r2, r3, #3
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f000 80ac 	beq.w	8001070 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f18:	4b5e      	ldr	r3, [pc, #376]	; (8001094 <HAL_GPIO_Init+0x2f0>)
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	4a5d      	ldr	r2, [pc, #372]	; (8001094 <HAL_GPIO_Init+0x2f0>)
 8000f1e:	f043 0301 	orr.w	r3, r3, #1
 8000f22:	6193      	str	r3, [r2, #24]
 8000f24:	4b5b      	ldr	r3, [pc, #364]	; (8001094 <HAL_GPIO_Init+0x2f0>)
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	f003 0301 	and.w	r3, r3, #1
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f30:	4a59      	ldr	r2, [pc, #356]	; (8001098 <HAL_GPIO_Init+0x2f4>)
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	089b      	lsrs	r3, r3, #2
 8000f36:	3302      	adds	r3, #2
 8000f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	f003 0303 	and.w	r3, r3, #3
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	220f      	movs	r2, #15
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	4013      	ands	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f5a:	d025      	beq.n	8000fa8 <HAL_GPIO_Init+0x204>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4a4f      	ldr	r2, [pc, #316]	; (800109c <HAL_GPIO_Init+0x2f8>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d01f      	beq.n	8000fa4 <HAL_GPIO_Init+0x200>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a4e      	ldr	r2, [pc, #312]	; (80010a0 <HAL_GPIO_Init+0x2fc>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d019      	beq.n	8000fa0 <HAL_GPIO_Init+0x1fc>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4a4d      	ldr	r2, [pc, #308]	; (80010a4 <HAL_GPIO_Init+0x300>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d013      	beq.n	8000f9c <HAL_GPIO_Init+0x1f8>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4a4c      	ldr	r2, [pc, #304]	; (80010a8 <HAL_GPIO_Init+0x304>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d00d      	beq.n	8000f98 <HAL_GPIO_Init+0x1f4>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4a4b      	ldr	r2, [pc, #300]	; (80010ac <HAL_GPIO_Init+0x308>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d007      	beq.n	8000f94 <HAL_GPIO_Init+0x1f0>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4a4a      	ldr	r2, [pc, #296]	; (80010b0 <HAL_GPIO_Init+0x30c>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d101      	bne.n	8000f90 <HAL_GPIO_Init+0x1ec>
 8000f8c:	2306      	movs	r3, #6
 8000f8e:	e00c      	b.n	8000faa <HAL_GPIO_Init+0x206>
 8000f90:	2307      	movs	r3, #7
 8000f92:	e00a      	b.n	8000faa <HAL_GPIO_Init+0x206>
 8000f94:	2305      	movs	r3, #5
 8000f96:	e008      	b.n	8000faa <HAL_GPIO_Init+0x206>
 8000f98:	2304      	movs	r3, #4
 8000f9a:	e006      	b.n	8000faa <HAL_GPIO_Init+0x206>
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	e004      	b.n	8000faa <HAL_GPIO_Init+0x206>
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	e002      	b.n	8000faa <HAL_GPIO_Init+0x206>
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e000      	b.n	8000faa <HAL_GPIO_Init+0x206>
 8000fa8:	2300      	movs	r3, #0
 8000faa:	697a      	ldr	r2, [r7, #20]
 8000fac:	f002 0203 	and.w	r2, r2, #3
 8000fb0:	0092      	lsls	r2, r2, #2
 8000fb2:	4093      	lsls	r3, r2
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fba:	4937      	ldr	r1, [pc, #220]	; (8001098 <HAL_GPIO_Init+0x2f4>)
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	089b      	lsrs	r3, r3, #2
 8000fc0:	3302      	adds	r3, #2
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fc8:	4b3a      	ldr	r3, [pc, #232]	; (80010b4 <HAL_GPIO_Init+0x310>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d003      	beq.n	8000fec <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fec:	4a31      	ldr	r2, [pc, #196]	; (80010b4 <HAL_GPIO_Init+0x310>)
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ff2:	4b30      	ldr	r3, [pc, #192]	; (80010b4 <HAL_GPIO_Init+0x310>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	4013      	ands	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d003      	beq.n	8001016 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	4313      	orrs	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001016:	4a27      	ldr	r2, [pc, #156]	; (80010b4 <HAL_GPIO_Init+0x310>)
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800101c:	4b25      	ldr	r3, [pc, #148]	; (80010b4 <HAL_GPIO_Init+0x310>)
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	43db      	mvns	r3, r3
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	4013      	ands	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001034:	2b00      	cmp	r3, #0
 8001036:	d003      	beq.n	8001040 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	4313      	orrs	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001040:	4a1c      	ldr	r2, [pc, #112]	; (80010b4 <HAL_GPIO_Init+0x310>)
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001046:	4b1b      	ldr	r3, [pc, #108]	; (80010b4 <HAL_GPIO_Init+0x310>)
 8001048:	68db      	ldr	r3, [r3, #12]
 800104a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	43db      	mvns	r3, r3
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	4013      	ands	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d003      	beq.n	800106a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	4313      	orrs	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800106a:	4a12      	ldr	r2, [pc, #72]	; (80010b4 <HAL_GPIO_Init+0x310>)
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	3301      	adds	r3, #1
 8001074:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	fa22 f303 	lsr.w	r3, r2, r3
 8001080:	2b00      	cmp	r3, #0
 8001082:	f47f ae97 	bne.w	8000db4 <HAL_GPIO_Init+0x10>
  }
}
 8001086:	bf00      	nop
 8001088:	bf00      	nop
 800108a:	371c      	adds	r7, #28
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	40021000 	.word	0x40021000
 8001098:	40010000 	.word	0x40010000
 800109c:	48000400 	.word	0x48000400
 80010a0:	48000800 	.word	0x48000800
 80010a4:	48000c00 	.word	0x48000c00
 80010a8:	48001000 	.word	0x48001000
 80010ac:	48001400 	.word	0x48001400
 80010b0:	48001800 	.word	0x48001800
 80010b4:	40010400 	.word	0x40010400

080010b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	460b      	mov	r3, r1
 80010c2:	807b      	strh	r3, [r7, #2]
 80010c4:	4613      	mov	r3, r2
 80010c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010c8:	787b      	ldrb	r3, [r7, #1]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010ce:	887a      	ldrh	r2, [r7, #2]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010d4:	e002      	b.n	80010dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010d6:	887a      	ldrh	r2, [r7, #2]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	460b      	mov	r3, r1
 80010f2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	695b      	ldr	r3, [r3, #20]
 80010f8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010fa:	887a      	ldrh	r2, [r7, #2]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	4013      	ands	r3, r2
 8001100:	041a      	lsls	r2, r3, #16
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	43d9      	mvns	r1, r3
 8001106:	887b      	ldrh	r3, [r7, #2]
 8001108:	400b      	ands	r3, r1
 800110a:	431a      	orrs	r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	619a      	str	r2, [r3, #24]
}
 8001110:	bf00      	nop
 8001112:	3714      	adds	r7, #20
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001122:	af00      	add	r7, sp, #0
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001128:	1d3b      	adds	r3, r7, #4
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d102      	bne.n	8001136 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	f000 bf01 	b.w	8001f38 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 0301 	and.w	r3, r3, #1
 8001140:	2b00      	cmp	r3, #0
 8001142:	f000 8160 	beq.w	8001406 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001146:	4bae      	ldr	r3, [pc, #696]	; (8001400 <HAL_RCC_OscConfig+0x2e4>)
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f003 030c 	and.w	r3, r3, #12
 800114e:	2b04      	cmp	r3, #4
 8001150:	d00c      	beq.n	800116c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001152:	4bab      	ldr	r3, [pc, #684]	; (8001400 <HAL_RCC_OscConfig+0x2e4>)
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f003 030c 	and.w	r3, r3, #12
 800115a:	2b08      	cmp	r3, #8
 800115c:	d159      	bne.n	8001212 <HAL_RCC_OscConfig+0xf6>
 800115e:	4ba8      	ldr	r3, [pc, #672]	; (8001400 <HAL_RCC_OscConfig+0x2e4>)
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001166:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800116a:	d152      	bne.n	8001212 <HAL_RCC_OscConfig+0xf6>
 800116c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001170:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001174:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001178:	fa93 f3a3 	rbit	r3, r3
 800117c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001180:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001184:	fab3 f383 	clz	r3, r3
 8001188:	b2db      	uxtb	r3, r3
 800118a:	095b      	lsrs	r3, r3, #5
 800118c:	b2db      	uxtb	r3, r3
 800118e:	f043 0301 	orr.w	r3, r3, #1
 8001192:	b2db      	uxtb	r3, r3
 8001194:	2b01      	cmp	r3, #1
 8001196:	d102      	bne.n	800119e <HAL_RCC_OscConfig+0x82>
 8001198:	4b99      	ldr	r3, [pc, #612]	; (8001400 <HAL_RCC_OscConfig+0x2e4>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	e015      	b.n	80011ca <HAL_RCC_OscConfig+0xae>
 800119e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011a2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80011aa:	fa93 f3a3 	rbit	r3, r3
 80011ae:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80011b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011b6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80011ba:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80011be:	fa93 f3a3 	rbit	r3, r3
 80011c2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80011c6:	4b8e      	ldr	r3, [pc, #568]	; (8001400 <HAL_RCC_OscConfig+0x2e4>)
 80011c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011ce:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80011d2:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80011d6:	fa92 f2a2 	rbit	r2, r2
 80011da:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80011de:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80011e2:	fab2 f282 	clz	r2, r2
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	f042 0220 	orr.w	r2, r2, #32
 80011ec:	b2d2      	uxtb	r2, r2
 80011ee:	f002 021f 	and.w	r2, r2, #31
 80011f2:	2101      	movs	r1, #1
 80011f4:	fa01 f202 	lsl.w	r2, r1, r2
 80011f8:	4013      	ands	r3, r2
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	f000 8102 	beq.w	8001404 <HAL_RCC_OscConfig+0x2e8>
 8001200:	1d3b      	adds	r3, r7, #4
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	f040 80fc 	bne.w	8001404 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	f000 be93 	b.w	8001f38 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800121c:	d106      	bne.n	800122c <HAL_RCC_OscConfig+0x110>
 800121e:	4b78      	ldr	r3, [pc, #480]	; (8001400 <HAL_RCC_OscConfig+0x2e4>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a77      	ldr	r2, [pc, #476]	; (8001400 <HAL_RCC_OscConfig+0x2e4>)
 8001224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001228:	6013      	str	r3, [r2, #0]
 800122a:	e030      	b.n	800128e <HAL_RCC_OscConfig+0x172>
 800122c:	1d3b      	adds	r3, r7, #4
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d10c      	bne.n	8001250 <HAL_RCC_OscConfig+0x134>
 8001236:	4b72      	ldr	r3, [pc, #456]	; (8001400 <HAL_RCC_OscConfig+0x2e4>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a71      	ldr	r2, [pc, #452]	; (8001400 <HAL_RCC_OscConfig+0x2e4>)
 800123c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001240:	6013      	str	r3, [r2, #0]
 8001242:	4b6f      	ldr	r3, [pc, #444]	; (8001400 <HAL_RCC_OscConfig+0x2e4>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a6e      	ldr	r2, [pc, #440]	; (8001400 <HAL_RCC_OscConfig+0x2e4>)
 8001248:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800124c:	6013      	str	r3, [r2, #0]
 800124e:	e01e      	b.n	800128e <HAL_RCC_OscConfig+0x172>
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800125a:	d10c      	bne.n	8001276 <HAL_RCC_OscConfig+0x15a>
 800125c:	4b68      	ldr	r3, [pc, #416]	; (8001400 <HAL_RCC_OscConfig+0x2e4>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a67      	ldr	r2, [pc, #412]	; (8001400 <HAL_RCC_OscConfig+0x2e4>)
 8001262:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001266:	6013      	str	r3, [r2, #0]
 8001268:	4b65      	ldr	r3, [pc, #404]	; (8001400 <HAL_RCC_OscConfig+0x2e4>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a64      	ldr	r2, [pc, #400]	; (8001400 <HAL_RCC_OscConfig+0x2e4>)
 800126e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001272:	6013      	str	r3, [r2, #0]
 8001274:	e00b      	b.n	800128e <HAL_RCC_OscConfig+0x172>
 8001276:	4b62      	ldr	r3, [pc, #392]	; (8001400 <HAL_RCC_OscConfig+0x2e4>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a61      	ldr	r2, [pc, #388]	; (8001400 <HAL_RCC_OscConfig+0x2e4>)
 800127c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001280:	6013      	str	r3, [r2, #0]
 8001282:	4b5f      	ldr	r3, [pc, #380]	; (8001400 <HAL_RCC_OscConfig+0x2e4>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a5e      	ldr	r2, [pc, #376]	; (8001400 <HAL_RCC_OscConfig+0x2e4>)
 8001288:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800128c:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d059      	beq.n	800134c <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001298:	f7ff fc42 	bl	8000b20 <HAL_GetTick>
 800129c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012a0:	e00a      	b.n	80012b8 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012a2:	f7ff fc3d 	bl	8000b20 <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b64      	cmp	r3, #100	; 0x64
 80012b0:	d902      	bls.n	80012b8 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	f000 be40 	b.w	8001f38 <HAL_RCC_OscConfig+0xe1c>
 80012b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012bc:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80012c4:	fa93 f3a3 	rbit	r3, r3
 80012c8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80012cc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012d0:	fab3 f383 	clz	r3, r3
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	095b      	lsrs	r3, r3, #5
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	f043 0301 	orr.w	r3, r3, #1
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d102      	bne.n	80012ea <HAL_RCC_OscConfig+0x1ce>
 80012e4:	4b46      	ldr	r3, [pc, #280]	; (8001400 <HAL_RCC_OscConfig+0x2e4>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	e015      	b.n	8001316 <HAL_RCC_OscConfig+0x1fa>
 80012ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012ee:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80012f6:	fa93 f3a3 	rbit	r3, r3
 80012fa:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80012fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001302:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001306:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800130a:	fa93 f3a3 	rbit	r3, r3
 800130e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001312:	4b3b      	ldr	r3, [pc, #236]	; (8001400 <HAL_RCC_OscConfig+0x2e4>)
 8001314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001316:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800131a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800131e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001322:	fa92 f2a2 	rbit	r2, r2
 8001326:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800132a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800132e:	fab2 f282 	clz	r2, r2
 8001332:	b2d2      	uxtb	r2, r2
 8001334:	f042 0220 	orr.w	r2, r2, #32
 8001338:	b2d2      	uxtb	r2, r2
 800133a:	f002 021f 	and.w	r2, r2, #31
 800133e:	2101      	movs	r1, #1
 8001340:	fa01 f202 	lsl.w	r2, r1, r2
 8001344:	4013      	ands	r3, r2
 8001346:	2b00      	cmp	r3, #0
 8001348:	d0ab      	beq.n	80012a2 <HAL_RCC_OscConfig+0x186>
 800134a:	e05c      	b.n	8001406 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134c:	f7ff fbe8 	bl	8000b20 <HAL_GetTick>
 8001350:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001354:	e00a      	b.n	800136c <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001356:	f7ff fbe3 	bl	8000b20 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b64      	cmp	r3, #100	; 0x64
 8001364:	d902      	bls.n	800136c <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	f000 bde6 	b.w	8001f38 <HAL_RCC_OscConfig+0xe1c>
 800136c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001370:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001374:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001378:	fa93 f3a3 	rbit	r3, r3
 800137c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001380:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001384:	fab3 f383 	clz	r3, r3
 8001388:	b2db      	uxtb	r3, r3
 800138a:	095b      	lsrs	r3, r3, #5
 800138c:	b2db      	uxtb	r3, r3
 800138e:	f043 0301 	orr.w	r3, r3, #1
 8001392:	b2db      	uxtb	r3, r3
 8001394:	2b01      	cmp	r3, #1
 8001396:	d102      	bne.n	800139e <HAL_RCC_OscConfig+0x282>
 8001398:	4b19      	ldr	r3, [pc, #100]	; (8001400 <HAL_RCC_OscConfig+0x2e4>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	e015      	b.n	80013ca <HAL_RCC_OscConfig+0x2ae>
 800139e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013a2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80013aa:	fa93 f3a3 	rbit	r3, r3
 80013ae:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80013b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013b6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80013ba:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80013be:	fa93 f3a3 	rbit	r3, r3
 80013c2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80013c6:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <HAL_RCC_OscConfig+0x2e4>)
 80013c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013ce:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80013d2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80013d6:	fa92 f2a2 	rbit	r2, r2
 80013da:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80013de:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80013e2:	fab2 f282 	clz	r2, r2
 80013e6:	b2d2      	uxtb	r2, r2
 80013e8:	f042 0220 	orr.w	r2, r2, #32
 80013ec:	b2d2      	uxtb	r2, r2
 80013ee:	f002 021f 	and.w	r2, r2, #31
 80013f2:	2101      	movs	r1, #1
 80013f4:	fa01 f202 	lsl.w	r2, r1, r2
 80013f8:	4013      	ands	r3, r2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1ab      	bne.n	8001356 <HAL_RCC_OscConfig+0x23a>
 80013fe:	e002      	b.n	8001406 <HAL_RCC_OscConfig+0x2ea>
 8001400:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001404:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001406:	1d3b      	adds	r3, r7, #4
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0302 	and.w	r3, r3, #2
 8001410:	2b00      	cmp	r3, #0
 8001412:	f000 8170 	beq.w	80016f6 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001416:	4bd0      	ldr	r3, [pc, #832]	; (8001758 <HAL_RCC_OscConfig+0x63c>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f003 030c 	and.w	r3, r3, #12
 800141e:	2b00      	cmp	r3, #0
 8001420:	d00c      	beq.n	800143c <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001422:	4bcd      	ldr	r3, [pc, #820]	; (8001758 <HAL_RCC_OscConfig+0x63c>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f003 030c 	and.w	r3, r3, #12
 800142a:	2b08      	cmp	r3, #8
 800142c:	d16d      	bne.n	800150a <HAL_RCC_OscConfig+0x3ee>
 800142e:	4bca      	ldr	r3, [pc, #808]	; (8001758 <HAL_RCC_OscConfig+0x63c>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001436:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800143a:	d166      	bne.n	800150a <HAL_RCC_OscConfig+0x3ee>
 800143c:	2302      	movs	r3, #2
 800143e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001442:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001446:	fa93 f3a3 	rbit	r3, r3
 800144a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800144e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001452:	fab3 f383 	clz	r3, r3
 8001456:	b2db      	uxtb	r3, r3
 8001458:	095b      	lsrs	r3, r3, #5
 800145a:	b2db      	uxtb	r3, r3
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	b2db      	uxtb	r3, r3
 8001462:	2b01      	cmp	r3, #1
 8001464:	d102      	bne.n	800146c <HAL_RCC_OscConfig+0x350>
 8001466:	4bbc      	ldr	r3, [pc, #752]	; (8001758 <HAL_RCC_OscConfig+0x63c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	e013      	b.n	8001494 <HAL_RCC_OscConfig+0x378>
 800146c:	2302      	movs	r3, #2
 800146e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001472:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001476:	fa93 f3a3 	rbit	r3, r3
 800147a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800147e:	2302      	movs	r3, #2
 8001480:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001484:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001488:	fa93 f3a3 	rbit	r3, r3
 800148c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001490:	4bb1      	ldr	r3, [pc, #708]	; (8001758 <HAL_RCC_OscConfig+0x63c>)
 8001492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001494:	2202      	movs	r2, #2
 8001496:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800149a:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800149e:	fa92 f2a2 	rbit	r2, r2
 80014a2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80014a6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80014aa:	fab2 f282 	clz	r2, r2
 80014ae:	b2d2      	uxtb	r2, r2
 80014b0:	f042 0220 	orr.w	r2, r2, #32
 80014b4:	b2d2      	uxtb	r2, r2
 80014b6:	f002 021f 	and.w	r2, r2, #31
 80014ba:	2101      	movs	r1, #1
 80014bc:	fa01 f202 	lsl.w	r2, r1, r2
 80014c0:	4013      	ands	r3, r2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d007      	beq.n	80014d6 <HAL_RCC_OscConfig+0x3ba>
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d002      	beq.n	80014d6 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	f000 bd31 	b.w	8001f38 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d6:	4ba0      	ldr	r3, [pc, #640]	; (8001758 <HAL_RCC_OscConfig+0x63c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014de:	1d3b      	adds	r3, r7, #4
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	691b      	ldr	r3, [r3, #16]
 80014e4:	21f8      	movs	r1, #248	; 0xf8
 80014e6:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ea:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80014ee:	fa91 f1a1 	rbit	r1, r1
 80014f2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80014f6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80014fa:	fab1 f181 	clz	r1, r1
 80014fe:	b2c9      	uxtb	r1, r1
 8001500:	408b      	lsls	r3, r1
 8001502:	4995      	ldr	r1, [pc, #596]	; (8001758 <HAL_RCC_OscConfig+0x63c>)
 8001504:	4313      	orrs	r3, r2
 8001506:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001508:	e0f5      	b.n	80016f6 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	2b00      	cmp	r3, #0
 8001512:	f000 8085 	beq.w	8001620 <HAL_RCC_OscConfig+0x504>
 8001516:	2301      	movs	r3, #1
 8001518:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800151c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001520:	fa93 f3a3 	rbit	r3, r3
 8001524:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001528:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800152c:	fab3 f383 	clz	r3, r3
 8001530:	b2db      	uxtb	r3, r3
 8001532:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001536:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	461a      	mov	r2, r3
 800153e:	2301      	movs	r3, #1
 8001540:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001542:	f7ff faed 	bl	8000b20 <HAL_GetTick>
 8001546:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800154a:	e00a      	b.n	8001562 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800154c:	f7ff fae8 	bl	8000b20 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d902      	bls.n	8001562 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	f000 bceb 	b.w	8001f38 <HAL_RCC_OscConfig+0xe1c>
 8001562:	2302      	movs	r3, #2
 8001564:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001568:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800156c:	fa93 f3a3 	rbit	r3, r3
 8001570:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001574:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001578:	fab3 f383 	clz	r3, r3
 800157c:	b2db      	uxtb	r3, r3
 800157e:	095b      	lsrs	r3, r3, #5
 8001580:	b2db      	uxtb	r3, r3
 8001582:	f043 0301 	orr.w	r3, r3, #1
 8001586:	b2db      	uxtb	r3, r3
 8001588:	2b01      	cmp	r3, #1
 800158a:	d102      	bne.n	8001592 <HAL_RCC_OscConfig+0x476>
 800158c:	4b72      	ldr	r3, [pc, #456]	; (8001758 <HAL_RCC_OscConfig+0x63c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	e013      	b.n	80015ba <HAL_RCC_OscConfig+0x49e>
 8001592:	2302      	movs	r3, #2
 8001594:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001598:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800159c:	fa93 f3a3 	rbit	r3, r3
 80015a0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80015a4:	2302      	movs	r3, #2
 80015a6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80015aa:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80015ae:	fa93 f3a3 	rbit	r3, r3
 80015b2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80015b6:	4b68      	ldr	r3, [pc, #416]	; (8001758 <HAL_RCC_OscConfig+0x63c>)
 80015b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ba:	2202      	movs	r2, #2
 80015bc:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80015c0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80015c4:	fa92 f2a2 	rbit	r2, r2
 80015c8:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80015cc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80015d0:	fab2 f282 	clz	r2, r2
 80015d4:	b2d2      	uxtb	r2, r2
 80015d6:	f042 0220 	orr.w	r2, r2, #32
 80015da:	b2d2      	uxtb	r2, r2
 80015dc:	f002 021f 	and.w	r2, r2, #31
 80015e0:	2101      	movs	r1, #1
 80015e2:	fa01 f202 	lsl.w	r2, r1, r2
 80015e6:	4013      	ands	r3, r2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d0af      	beq.n	800154c <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ec:	4b5a      	ldr	r3, [pc, #360]	; (8001758 <HAL_RCC_OscConfig+0x63c>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015f4:	1d3b      	adds	r3, r7, #4
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	691b      	ldr	r3, [r3, #16]
 80015fa:	21f8      	movs	r1, #248	; 0xf8
 80015fc:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001600:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001604:	fa91 f1a1 	rbit	r1, r1
 8001608:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800160c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001610:	fab1 f181 	clz	r1, r1
 8001614:	b2c9      	uxtb	r1, r1
 8001616:	408b      	lsls	r3, r1
 8001618:	494f      	ldr	r1, [pc, #316]	; (8001758 <HAL_RCC_OscConfig+0x63c>)
 800161a:	4313      	orrs	r3, r2
 800161c:	600b      	str	r3, [r1, #0]
 800161e:	e06a      	b.n	80016f6 <HAL_RCC_OscConfig+0x5da>
 8001620:	2301      	movs	r3, #1
 8001622:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001626:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800162a:	fa93 f3a3 	rbit	r3, r3
 800162e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001632:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001636:	fab3 f383 	clz	r3, r3
 800163a:	b2db      	uxtb	r3, r3
 800163c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001640:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	461a      	mov	r2, r3
 8001648:	2300      	movs	r3, #0
 800164a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164c:	f7ff fa68 	bl	8000b20 <HAL_GetTick>
 8001650:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001654:	e00a      	b.n	800166c <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001656:	f7ff fa63 	bl	8000b20 <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b02      	cmp	r3, #2
 8001664:	d902      	bls.n	800166c <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	f000 bc66 	b.w	8001f38 <HAL_RCC_OscConfig+0xe1c>
 800166c:	2302      	movs	r3, #2
 800166e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001672:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001676:	fa93 f3a3 	rbit	r3, r3
 800167a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800167e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001682:	fab3 f383 	clz	r3, r3
 8001686:	b2db      	uxtb	r3, r3
 8001688:	095b      	lsrs	r3, r3, #5
 800168a:	b2db      	uxtb	r3, r3
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	b2db      	uxtb	r3, r3
 8001692:	2b01      	cmp	r3, #1
 8001694:	d102      	bne.n	800169c <HAL_RCC_OscConfig+0x580>
 8001696:	4b30      	ldr	r3, [pc, #192]	; (8001758 <HAL_RCC_OscConfig+0x63c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	e013      	b.n	80016c4 <HAL_RCC_OscConfig+0x5a8>
 800169c:	2302      	movs	r3, #2
 800169e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80016a6:	fa93 f3a3 	rbit	r3, r3
 80016aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80016ae:	2302      	movs	r3, #2
 80016b0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80016b4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80016b8:	fa93 f3a3 	rbit	r3, r3
 80016bc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80016c0:	4b25      	ldr	r3, [pc, #148]	; (8001758 <HAL_RCC_OscConfig+0x63c>)
 80016c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c4:	2202      	movs	r2, #2
 80016c6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80016ca:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80016ce:	fa92 f2a2 	rbit	r2, r2
 80016d2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80016d6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80016da:	fab2 f282 	clz	r2, r2
 80016de:	b2d2      	uxtb	r2, r2
 80016e0:	f042 0220 	orr.w	r2, r2, #32
 80016e4:	b2d2      	uxtb	r2, r2
 80016e6:	f002 021f 	and.w	r2, r2, #31
 80016ea:	2101      	movs	r1, #1
 80016ec:	fa01 f202 	lsl.w	r2, r1, r2
 80016f0:	4013      	ands	r3, r2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1af      	bne.n	8001656 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016f6:	1d3b      	adds	r3, r7, #4
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0308 	and.w	r3, r3, #8
 8001700:	2b00      	cmp	r3, #0
 8001702:	f000 80da 	beq.w	80018ba <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001706:	1d3b      	adds	r3, r7, #4
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	695b      	ldr	r3, [r3, #20]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d069      	beq.n	80017e4 <HAL_RCC_OscConfig+0x6c8>
 8001710:	2301      	movs	r3, #1
 8001712:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001716:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800171a:	fa93 f3a3 	rbit	r3, r3
 800171e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001722:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001726:	fab3 f383 	clz	r3, r3
 800172a:	b2db      	uxtb	r3, r3
 800172c:	461a      	mov	r2, r3
 800172e:	4b0b      	ldr	r3, [pc, #44]	; (800175c <HAL_RCC_OscConfig+0x640>)
 8001730:	4413      	add	r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	461a      	mov	r2, r3
 8001736:	2301      	movs	r3, #1
 8001738:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800173a:	f7ff f9f1 	bl	8000b20 <HAL_GetTick>
 800173e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001742:	e00d      	b.n	8001760 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001744:	f7ff f9ec 	bl	8000b20 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d905      	bls.n	8001760 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e3ef      	b.n	8001f38 <HAL_RCC_OscConfig+0xe1c>
 8001758:	40021000 	.word	0x40021000
 800175c:	10908120 	.word	0x10908120
 8001760:	2302      	movs	r3, #2
 8001762:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001766:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800176a:	fa93 f2a3 	rbit	r2, r3
 800176e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001778:	2202      	movs	r2, #2
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	fa93 f2a3 	rbit	r2, r3
 8001786:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001790:	2202      	movs	r2, #2
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	fa93 f2a3 	rbit	r2, r3
 800179e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80017a2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017a4:	4ba4      	ldr	r3, [pc, #656]	; (8001a38 <HAL_RCC_OscConfig+0x91c>)
 80017a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017a8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80017ac:	2102      	movs	r1, #2
 80017ae:	6019      	str	r1, [r3, #0]
 80017b0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	fa93 f1a3 	rbit	r1, r3
 80017ba:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80017be:	6019      	str	r1, [r3, #0]
  return result;
 80017c0:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	fab3 f383 	clz	r3, r3
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	f003 031f 	and.w	r3, r3, #31
 80017d6:	2101      	movs	r1, #1
 80017d8:	fa01 f303 	lsl.w	r3, r1, r3
 80017dc:	4013      	ands	r3, r2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d0b0      	beq.n	8001744 <HAL_RCC_OscConfig+0x628>
 80017e2:	e06a      	b.n	80018ba <HAL_RCC_OscConfig+0x79e>
 80017e4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80017e8:	2201      	movs	r2, #1
 80017ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ec:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	fa93 f2a3 	rbit	r2, r3
 80017f6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80017fa:	601a      	str	r2, [r3, #0]
  return result;
 80017fc:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001800:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001802:	fab3 f383 	clz	r3, r3
 8001806:	b2db      	uxtb	r3, r3
 8001808:	461a      	mov	r2, r3
 800180a:	4b8c      	ldr	r3, [pc, #560]	; (8001a3c <HAL_RCC_OscConfig+0x920>)
 800180c:	4413      	add	r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	461a      	mov	r2, r3
 8001812:	2300      	movs	r3, #0
 8001814:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001816:	f7ff f983 	bl	8000b20 <HAL_GetTick>
 800181a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800181e:	e009      	b.n	8001834 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001820:	f7ff f97e 	bl	8000b20 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e381      	b.n	8001f38 <HAL_RCC_OscConfig+0xe1c>
 8001834:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001838:	2202      	movs	r2, #2
 800183a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	fa93 f2a3 	rbit	r2, r3
 8001846:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001850:	2202      	movs	r2, #2
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	fa93 f2a3 	rbit	r2, r3
 800185e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001868:	2202      	movs	r2, #2
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	fa93 f2a3 	rbit	r2, r3
 8001876:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800187a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800187c:	4b6e      	ldr	r3, [pc, #440]	; (8001a38 <HAL_RCC_OscConfig+0x91c>)
 800187e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001880:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001884:	2102      	movs	r1, #2
 8001886:	6019      	str	r1, [r3, #0]
 8001888:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	fa93 f1a3 	rbit	r1, r3
 8001892:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001896:	6019      	str	r1, [r3, #0]
  return result;
 8001898:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	fab3 f383 	clz	r3, r3
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	f003 031f 	and.w	r3, r3, #31
 80018ae:	2101      	movs	r1, #1
 80018b0:	fa01 f303 	lsl.w	r3, r1, r3
 80018b4:	4013      	ands	r3, r2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1b2      	bne.n	8001820 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018ba:	1d3b      	adds	r3, r7, #4
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0304 	and.w	r3, r3, #4
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f000 8157 	beq.w	8001b78 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018ca:	2300      	movs	r3, #0
 80018cc:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018d0:	4b59      	ldr	r3, [pc, #356]	; (8001a38 <HAL_RCC_OscConfig+0x91c>)
 80018d2:	69db      	ldr	r3, [r3, #28]
 80018d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d112      	bne.n	8001902 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018dc:	4b56      	ldr	r3, [pc, #344]	; (8001a38 <HAL_RCC_OscConfig+0x91c>)
 80018de:	69db      	ldr	r3, [r3, #28]
 80018e0:	4a55      	ldr	r2, [pc, #340]	; (8001a38 <HAL_RCC_OscConfig+0x91c>)
 80018e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e6:	61d3      	str	r3, [r2, #28]
 80018e8:	4b53      	ldr	r3, [pc, #332]	; (8001a38 <HAL_RCC_OscConfig+0x91c>)
 80018ea:	69db      	ldr	r3, [r3, #28]
 80018ec:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80018f0:	f107 030c 	add.w	r3, r7, #12
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	f107 030c 	add.w	r3, r7, #12
 80018fa:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80018fc:	2301      	movs	r3, #1
 80018fe:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001902:	4b4f      	ldr	r3, [pc, #316]	; (8001a40 <HAL_RCC_OscConfig+0x924>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800190a:	2b00      	cmp	r3, #0
 800190c:	d11a      	bne.n	8001944 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800190e:	4b4c      	ldr	r3, [pc, #304]	; (8001a40 <HAL_RCC_OscConfig+0x924>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a4b      	ldr	r2, [pc, #300]	; (8001a40 <HAL_RCC_OscConfig+0x924>)
 8001914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001918:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800191a:	f7ff f901 	bl	8000b20 <HAL_GetTick>
 800191e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001922:	e009      	b.n	8001938 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001924:	f7ff f8fc 	bl	8000b20 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	2b64      	cmp	r3, #100	; 0x64
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e2ff      	b.n	8001f38 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001938:	4b41      	ldr	r3, [pc, #260]	; (8001a40 <HAL_RCC_OscConfig+0x924>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001940:	2b00      	cmp	r3, #0
 8001942:	d0ef      	beq.n	8001924 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001944:	1d3b      	adds	r3, r7, #4
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d106      	bne.n	800195c <HAL_RCC_OscConfig+0x840>
 800194e:	4b3a      	ldr	r3, [pc, #232]	; (8001a38 <HAL_RCC_OscConfig+0x91c>)
 8001950:	6a1b      	ldr	r3, [r3, #32]
 8001952:	4a39      	ldr	r2, [pc, #228]	; (8001a38 <HAL_RCC_OscConfig+0x91c>)
 8001954:	f043 0301 	orr.w	r3, r3, #1
 8001958:	6213      	str	r3, [r2, #32]
 800195a:	e02f      	b.n	80019bc <HAL_RCC_OscConfig+0x8a0>
 800195c:	1d3b      	adds	r3, r7, #4
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d10c      	bne.n	8001980 <HAL_RCC_OscConfig+0x864>
 8001966:	4b34      	ldr	r3, [pc, #208]	; (8001a38 <HAL_RCC_OscConfig+0x91c>)
 8001968:	6a1b      	ldr	r3, [r3, #32]
 800196a:	4a33      	ldr	r2, [pc, #204]	; (8001a38 <HAL_RCC_OscConfig+0x91c>)
 800196c:	f023 0301 	bic.w	r3, r3, #1
 8001970:	6213      	str	r3, [r2, #32]
 8001972:	4b31      	ldr	r3, [pc, #196]	; (8001a38 <HAL_RCC_OscConfig+0x91c>)
 8001974:	6a1b      	ldr	r3, [r3, #32]
 8001976:	4a30      	ldr	r2, [pc, #192]	; (8001a38 <HAL_RCC_OscConfig+0x91c>)
 8001978:	f023 0304 	bic.w	r3, r3, #4
 800197c:	6213      	str	r3, [r2, #32]
 800197e:	e01d      	b.n	80019bc <HAL_RCC_OscConfig+0x8a0>
 8001980:	1d3b      	adds	r3, r7, #4
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	2b05      	cmp	r3, #5
 8001988:	d10c      	bne.n	80019a4 <HAL_RCC_OscConfig+0x888>
 800198a:	4b2b      	ldr	r3, [pc, #172]	; (8001a38 <HAL_RCC_OscConfig+0x91c>)
 800198c:	6a1b      	ldr	r3, [r3, #32]
 800198e:	4a2a      	ldr	r2, [pc, #168]	; (8001a38 <HAL_RCC_OscConfig+0x91c>)
 8001990:	f043 0304 	orr.w	r3, r3, #4
 8001994:	6213      	str	r3, [r2, #32]
 8001996:	4b28      	ldr	r3, [pc, #160]	; (8001a38 <HAL_RCC_OscConfig+0x91c>)
 8001998:	6a1b      	ldr	r3, [r3, #32]
 800199a:	4a27      	ldr	r2, [pc, #156]	; (8001a38 <HAL_RCC_OscConfig+0x91c>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	6213      	str	r3, [r2, #32]
 80019a2:	e00b      	b.n	80019bc <HAL_RCC_OscConfig+0x8a0>
 80019a4:	4b24      	ldr	r3, [pc, #144]	; (8001a38 <HAL_RCC_OscConfig+0x91c>)
 80019a6:	6a1b      	ldr	r3, [r3, #32]
 80019a8:	4a23      	ldr	r2, [pc, #140]	; (8001a38 <HAL_RCC_OscConfig+0x91c>)
 80019aa:	f023 0301 	bic.w	r3, r3, #1
 80019ae:	6213      	str	r3, [r2, #32]
 80019b0:	4b21      	ldr	r3, [pc, #132]	; (8001a38 <HAL_RCC_OscConfig+0x91c>)
 80019b2:	6a1b      	ldr	r3, [r3, #32]
 80019b4:	4a20      	ldr	r2, [pc, #128]	; (8001a38 <HAL_RCC_OscConfig+0x91c>)
 80019b6:	f023 0304 	bic.w	r3, r3, #4
 80019ba:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019bc:	1d3b      	adds	r3, r7, #4
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d06a      	beq.n	8001a9c <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019c6:	f7ff f8ab 	bl	8000b20 <HAL_GetTick>
 80019ca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ce:	e00b      	b.n	80019e8 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019d0:	f7ff f8a6 	bl	8000b20 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e2a7      	b.n	8001f38 <HAL_RCC_OscConfig+0xe1c>
 80019e8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80019ec:	2202      	movs	r2, #2
 80019ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	fa93 f2a3 	rbit	r2, r3
 80019fa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001a04:	2202      	movs	r2, #2
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	fa93 f2a3 	rbit	r2, r3
 8001a12:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001a16:	601a      	str	r2, [r3, #0]
  return result;
 8001a18:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001a1c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a1e:	fab3 f383 	clz	r3, r3
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	095b      	lsrs	r3, r3, #5
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	f043 0302 	orr.w	r3, r3, #2
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d108      	bne.n	8001a44 <HAL_RCC_OscConfig+0x928>
 8001a32:	4b01      	ldr	r3, [pc, #4]	; (8001a38 <HAL_RCC_OscConfig+0x91c>)
 8001a34:	6a1b      	ldr	r3, [r3, #32]
 8001a36:	e013      	b.n	8001a60 <HAL_RCC_OscConfig+0x944>
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	10908120 	.word	0x10908120
 8001a40:	40007000 	.word	0x40007000
 8001a44:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a48:	2202      	movs	r2, #2
 8001a4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	fa93 f2a3 	rbit	r2, r3
 8001a56:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	4bc0      	ldr	r3, [pc, #768]	; (8001d60 <HAL_RCC_OscConfig+0xc44>)
 8001a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a60:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001a64:	2102      	movs	r1, #2
 8001a66:	6011      	str	r1, [r2, #0]
 8001a68:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001a6c:	6812      	ldr	r2, [r2, #0]
 8001a6e:	fa92 f1a2 	rbit	r1, r2
 8001a72:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001a76:	6011      	str	r1, [r2, #0]
  return result;
 8001a78:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001a7c:	6812      	ldr	r2, [r2, #0]
 8001a7e:	fab2 f282 	clz	r2, r2
 8001a82:	b2d2      	uxtb	r2, r2
 8001a84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a88:	b2d2      	uxtb	r2, r2
 8001a8a:	f002 021f 	and.w	r2, r2, #31
 8001a8e:	2101      	movs	r1, #1
 8001a90:	fa01 f202 	lsl.w	r2, r1, r2
 8001a94:	4013      	ands	r3, r2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d09a      	beq.n	80019d0 <HAL_RCC_OscConfig+0x8b4>
 8001a9a:	e063      	b.n	8001b64 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a9c:	f7ff f840 	bl	8000b20 <HAL_GetTick>
 8001aa0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aa4:	e00b      	b.n	8001abe <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aa6:	f7ff f83b 	bl	8000b20 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e23c      	b.n	8001f38 <HAL_RCC_OscConfig+0xe1c>
 8001abe:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ac2:	2202      	movs	r2, #2
 8001ac4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	fa93 f2a3 	rbit	r2, r3
 8001ad0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ada:	2202      	movs	r2, #2
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	fa93 f2a3 	rbit	r2, r3
 8001ae8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001aec:	601a      	str	r2, [r3, #0]
  return result;
 8001aee:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001af2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001af4:	fab3 f383 	clz	r3, r3
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	095b      	lsrs	r3, r3, #5
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	f043 0302 	orr.w	r3, r3, #2
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d102      	bne.n	8001b0e <HAL_RCC_OscConfig+0x9f2>
 8001b08:	4b95      	ldr	r3, [pc, #596]	; (8001d60 <HAL_RCC_OscConfig+0xc44>)
 8001b0a:	6a1b      	ldr	r3, [r3, #32]
 8001b0c:	e00d      	b.n	8001b2a <HAL_RCC_OscConfig+0xa0e>
 8001b0e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b12:	2202      	movs	r2, #2
 8001b14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b16:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	fa93 f2a3 	rbit	r2, r3
 8001b20:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	4b8e      	ldr	r3, [pc, #568]	; (8001d60 <HAL_RCC_OscConfig+0xc44>)
 8001b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001b2e:	2102      	movs	r1, #2
 8001b30:	6011      	str	r1, [r2, #0]
 8001b32:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001b36:	6812      	ldr	r2, [r2, #0]
 8001b38:	fa92 f1a2 	rbit	r1, r2
 8001b3c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001b40:	6011      	str	r1, [r2, #0]
  return result;
 8001b42:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001b46:	6812      	ldr	r2, [r2, #0]
 8001b48:	fab2 f282 	clz	r2, r2
 8001b4c:	b2d2      	uxtb	r2, r2
 8001b4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b52:	b2d2      	uxtb	r2, r2
 8001b54:	f002 021f 	and.w	r2, r2, #31
 8001b58:	2101      	movs	r1, #1
 8001b5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b5e:	4013      	ands	r3, r2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d1a0      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b64:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d105      	bne.n	8001b78 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b6c:	4b7c      	ldr	r3, [pc, #496]	; (8001d60 <HAL_RCC_OscConfig+0xc44>)
 8001b6e:	69db      	ldr	r3, [r3, #28]
 8001b70:	4a7b      	ldr	r2, [pc, #492]	; (8001d60 <HAL_RCC_OscConfig+0xc44>)
 8001b72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b76:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b78:	1d3b      	adds	r3, r7, #4
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	699b      	ldr	r3, [r3, #24]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f000 81d9 	beq.w	8001f36 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b84:	4b76      	ldr	r3, [pc, #472]	; (8001d60 <HAL_RCC_OscConfig+0xc44>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 030c 	and.w	r3, r3, #12
 8001b8c:	2b08      	cmp	r3, #8
 8001b8e:	f000 81a6 	beq.w	8001ede <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b92:	1d3b      	adds	r3, r7, #4
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	f040 811e 	bne.w	8001dda <HAL_RCC_OscConfig+0xcbe>
 8001b9e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001ba2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ba6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	fa93 f2a3 	rbit	r2, r3
 8001bb2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001bb6:	601a      	str	r2, [r3, #0]
  return result;
 8001bb8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001bbc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bbe:	fab3 f383 	clz	r3, r3
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bc8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	461a      	mov	r2, r3
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd4:	f7fe ffa4 	bl	8000b20 <HAL_GetTick>
 8001bd8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bdc:	e009      	b.n	8001bf2 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bde:	f7fe ff9f 	bl	8000b20 <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e1a2      	b.n	8001f38 <HAL_RCC_OscConfig+0xe1c>
 8001bf2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001bf6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	fa93 f2a3 	rbit	r2, r3
 8001c06:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001c0a:	601a      	str	r2, [r3, #0]
  return result;
 8001c0c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001c10:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c12:	fab3 f383 	clz	r3, r3
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	095b      	lsrs	r3, r3, #5
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d102      	bne.n	8001c2c <HAL_RCC_OscConfig+0xb10>
 8001c26:	4b4e      	ldr	r3, [pc, #312]	; (8001d60 <HAL_RCC_OscConfig+0xc44>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	e01b      	b.n	8001c64 <HAL_RCC_OscConfig+0xb48>
 8001c2c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001c30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c36:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	fa93 f2a3 	rbit	r2, r3
 8001c40:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	fa93 f2a3 	rbit	r2, r3
 8001c5a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	4b3f      	ldr	r3, [pc, #252]	; (8001d60 <HAL_RCC_OscConfig+0xc44>)
 8001c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c64:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001c68:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c6c:	6011      	str	r1, [r2, #0]
 8001c6e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001c72:	6812      	ldr	r2, [r2, #0]
 8001c74:	fa92 f1a2 	rbit	r1, r2
 8001c78:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001c7c:	6011      	str	r1, [r2, #0]
  return result;
 8001c7e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001c82:	6812      	ldr	r2, [r2, #0]
 8001c84:	fab2 f282 	clz	r2, r2
 8001c88:	b2d2      	uxtb	r2, r2
 8001c8a:	f042 0220 	orr.w	r2, r2, #32
 8001c8e:	b2d2      	uxtb	r2, r2
 8001c90:	f002 021f 	and.w	r2, r2, #31
 8001c94:	2101      	movs	r1, #1
 8001c96:	fa01 f202 	lsl.w	r2, r1, r2
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d19e      	bne.n	8001bde <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ca0:	4b2f      	ldr	r3, [pc, #188]	; (8001d60 <HAL_RCC_OscConfig+0xc44>)
 8001ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca4:	f023 020f 	bic.w	r2, r3, #15
 8001ca8:	1d3b      	adds	r3, r7, #4
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cae:	492c      	ldr	r1, [pc, #176]	; (8001d60 <HAL_RCC_OscConfig+0xc44>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001cb4:	4b2a      	ldr	r3, [pc, #168]	; (8001d60 <HAL_RCC_OscConfig+0xc44>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001cbc:	1d3b      	adds	r3, r7, #4
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6a19      	ldr	r1, [r3, #32]
 8001cc2:	1d3b      	adds	r3, r7, #4
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	69db      	ldr	r3, [r3, #28]
 8001cc8:	430b      	orrs	r3, r1
 8001cca:	4925      	ldr	r1, [pc, #148]	; (8001d60 <HAL_RCC_OscConfig+0xc44>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	604b      	str	r3, [r1, #4]
 8001cd0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001cd4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001cd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cda:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	fa93 f2a3 	rbit	r2, r3
 8001ce4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ce8:	601a      	str	r2, [r3, #0]
  return result;
 8001cea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001cee:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cf0:	fab3 f383 	clz	r3, r3
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cfa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	461a      	mov	r2, r3
 8001d02:	2301      	movs	r3, #1
 8001d04:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d06:	f7fe ff0b 	bl	8000b20 <HAL_GetTick>
 8001d0a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d0e:	e009      	b.n	8001d24 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d10:	f7fe ff06 	bl	8000b20 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e109      	b.n	8001f38 <HAL_RCC_OscConfig+0xe1c>
 8001d24:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	fa93 f2a3 	rbit	r2, r3
 8001d38:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d3c:	601a      	str	r2, [r3, #0]
  return result;
 8001d3e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d42:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d44:	fab3 f383 	clz	r3, r3
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	095b      	lsrs	r3, r3, #5
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	f043 0301 	orr.w	r3, r3, #1
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d105      	bne.n	8001d64 <HAL_RCC_OscConfig+0xc48>
 8001d58:	4b01      	ldr	r3, [pc, #4]	; (8001d60 <HAL_RCC_OscConfig+0xc44>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	e01e      	b.n	8001d9c <HAL_RCC_OscConfig+0xc80>
 8001d5e:	bf00      	nop
 8001d60:	40021000 	.word	0x40021000
 8001d64:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	fa93 f2a3 	rbit	r2, r3
 8001d78:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	fa93 f2a3 	rbit	r2, r3
 8001d92:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	4b6a      	ldr	r3, [pc, #424]	; (8001f44 <HAL_RCC_OscConfig+0xe28>)
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001da0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001da4:	6011      	str	r1, [r2, #0]
 8001da6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001daa:	6812      	ldr	r2, [r2, #0]
 8001dac:	fa92 f1a2 	rbit	r1, r2
 8001db0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001db4:	6011      	str	r1, [r2, #0]
  return result;
 8001db6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001dba:	6812      	ldr	r2, [r2, #0]
 8001dbc:	fab2 f282 	clz	r2, r2
 8001dc0:	b2d2      	uxtb	r2, r2
 8001dc2:	f042 0220 	orr.w	r2, r2, #32
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	f002 021f 	and.w	r2, r2, #31
 8001dcc:	2101      	movs	r1, #1
 8001dce:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d09b      	beq.n	8001d10 <HAL_RCC_OscConfig+0xbf4>
 8001dd8:	e0ad      	b.n	8001f36 <HAL_RCC_OscConfig+0xe1a>
 8001dda:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001dde:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001de2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	fa93 f2a3 	rbit	r2, r3
 8001dee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001df2:	601a      	str	r2, [r3, #0]
  return result;
 8001df4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001df8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dfa:	fab3 f383 	clz	r3, r3
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e10:	f7fe fe86 	bl	8000b20 <HAL_GetTick>
 8001e14:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e18:	e009      	b.n	8001e2e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e1a:	f7fe fe81 	bl	8000b20 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e084      	b.n	8001f38 <HAL_RCC_OscConfig+0xe1c>
 8001e2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	fa93 f2a3 	rbit	r2, r3
 8001e42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e46:	601a      	str	r2, [r3, #0]
  return result;
 8001e48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e4c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e4e:	fab3 f383 	clz	r3, r3
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	095b      	lsrs	r3, r3, #5
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	f043 0301 	orr.w	r3, r3, #1
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d102      	bne.n	8001e68 <HAL_RCC_OscConfig+0xd4c>
 8001e62:	4b38      	ldr	r3, [pc, #224]	; (8001f44 <HAL_RCC_OscConfig+0xe28>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	e01b      	b.n	8001ea0 <HAL_RCC_OscConfig+0xd84>
 8001e68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	fa93 f2a3 	rbit	r2, r3
 8001e7c:	f107 0320 	add.w	r3, r7, #32
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	f107 031c 	add.w	r3, r7, #28
 8001e86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	f107 031c 	add.w	r3, r7, #28
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	fa93 f2a3 	rbit	r2, r3
 8001e96:	f107 0318 	add.w	r3, r7, #24
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	4b29      	ldr	r3, [pc, #164]	; (8001f44 <HAL_RCC_OscConfig+0xe28>)
 8001e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea0:	f107 0214 	add.w	r2, r7, #20
 8001ea4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ea8:	6011      	str	r1, [r2, #0]
 8001eaa:	f107 0214 	add.w	r2, r7, #20
 8001eae:	6812      	ldr	r2, [r2, #0]
 8001eb0:	fa92 f1a2 	rbit	r1, r2
 8001eb4:	f107 0210 	add.w	r2, r7, #16
 8001eb8:	6011      	str	r1, [r2, #0]
  return result;
 8001eba:	f107 0210 	add.w	r2, r7, #16
 8001ebe:	6812      	ldr	r2, [r2, #0]
 8001ec0:	fab2 f282 	clz	r2, r2
 8001ec4:	b2d2      	uxtb	r2, r2
 8001ec6:	f042 0220 	orr.w	r2, r2, #32
 8001eca:	b2d2      	uxtb	r2, r2
 8001ecc:	f002 021f 	and.w	r2, r2, #31
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d19e      	bne.n	8001e1a <HAL_RCC_OscConfig+0xcfe>
 8001edc:	e02b      	b.n	8001f36 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ede:	1d3b      	adds	r3, r7, #4
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d101      	bne.n	8001eec <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e025      	b.n	8001f38 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001eec:	4b15      	ldr	r3, [pc, #84]	; (8001f44 <HAL_RCC_OscConfig+0xe28>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001ef4:	4b13      	ldr	r3, [pc, #76]	; (8001f44 <HAL_RCC_OscConfig+0xe28>)
 8001ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001efc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001f00:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001f04:	1d3b      	adds	r3, r7, #4
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d111      	bne.n	8001f32 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001f0e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001f12:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f16:	1d3b      	adds	r3, r7, #4
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d108      	bne.n	8001f32 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001f20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f24:	f003 020f 	and.w	r2, r3, #15
 8001f28:	1d3b      	adds	r3, r7, #4
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d001      	beq.n	8001f36 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e000      	b.n	8001f38 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40021000 	.word	0x40021000

08001f48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b09e      	sub	sp, #120	; 0x78
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f52:	2300      	movs	r3, #0
 8001f54:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d101      	bne.n	8001f60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e162      	b.n	8002226 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f60:	4b90      	ldr	r3, [pc, #576]	; (80021a4 <HAL_RCC_ClockConfig+0x25c>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0307 	and.w	r3, r3, #7
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d910      	bls.n	8001f90 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f6e:	4b8d      	ldr	r3, [pc, #564]	; (80021a4 <HAL_RCC_ClockConfig+0x25c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f023 0207 	bic.w	r2, r3, #7
 8001f76:	498b      	ldr	r1, [pc, #556]	; (80021a4 <HAL_RCC_ClockConfig+0x25c>)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f7e:	4b89      	ldr	r3, [pc, #548]	; (80021a4 <HAL_RCC_ClockConfig+0x25c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d001      	beq.n	8001f90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e14a      	b.n	8002226 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d008      	beq.n	8001fae <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f9c:	4b82      	ldr	r3, [pc, #520]	; (80021a8 <HAL_RCC_ClockConfig+0x260>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	497f      	ldr	r1, [pc, #508]	; (80021a8 <HAL_RCC_ClockConfig+0x260>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f000 80dc 	beq.w	8002174 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d13c      	bne.n	800203e <HAL_RCC_ClockConfig+0xf6>
 8001fc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fc8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fcc:	fa93 f3a3 	rbit	r3, r3
 8001fd0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001fd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd4:	fab3 f383 	clz	r3, r3
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	095b      	lsrs	r3, r3, #5
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	f043 0301 	orr.w	r3, r3, #1
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d102      	bne.n	8001fee <HAL_RCC_ClockConfig+0xa6>
 8001fe8:	4b6f      	ldr	r3, [pc, #444]	; (80021a8 <HAL_RCC_ClockConfig+0x260>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	e00f      	b.n	800200e <HAL_RCC_ClockConfig+0xc6>
 8001fee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ff2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ff6:	fa93 f3a3 	rbit	r3, r3
 8001ffa:	667b      	str	r3, [r7, #100]	; 0x64
 8001ffc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002000:	663b      	str	r3, [r7, #96]	; 0x60
 8002002:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002004:	fa93 f3a3 	rbit	r3, r3
 8002008:	65fb      	str	r3, [r7, #92]	; 0x5c
 800200a:	4b67      	ldr	r3, [pc, #412]	; (80021a8 <HAL_RCC_ClockConfig+0x260>)
 800200c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002012:	65ba      	str	r2, [r7, #88]	; 0x58
 8002014:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002016:	fa92 f2a2 	rbit	r2, r2
 800201a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800201c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800201e:	fab2 f282 	clz	r2, r2
 8002022:	b2d2      	uxtb	r2, r2
 8002024:	f042 0220 	orr.w	r2, r2, #32
 8002028:	b2d2      	uxtb	r2, r2
 800202a:	f002 021f 	and.w	r2, r2, #31
 800202e:	2101      	movs	r1, #1
 8002030:	fa01 f202 	lsl.w	r2, r1, r2
 8002034:	4013      	ands	r3, r2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d17b      	bne.n	8002132 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e0f3      	b.n	8002226 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2b02      	cmp	r3, #2
 8002044:	d13c      	bne.n	80020c0 <HAL_RCC_ClockConfig+0x178>
 8002046:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800204a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800204e:	fa93 f3a3 	rbit	r3, r3
 8002052:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002054:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002056:	fab3 f383 	clz	r3, r3
 800205a:	b2db      	uxtb	r3, r3
 800205c:	095b      	lsrs	r3, r3, #5
 800205e:	b2db      	uxtb	r3, r3
 8002060:	f043 0301 	orr.w	r3, r3, #1
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b01      	cmp	r3, #1
 8002068:	d102      	bne.n	8002070 <HAL_RCC_ClockConfig+0x128>
 800206a:	4b4f      	ldr	r3, [pc, #316]	; (80021a8 <HAL_RCC_ClockConfig+0x260>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	e00f      	b.n	8002090 <HAL_RCC_ClockConfig+0x148>
 8002070:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002074:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002076:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002078:	fa93 f3a3 	rbit	r3, r3
 800207c:	647b      	str	r3, [r7, #68]	; 0x44
 800207e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002082:	643b      	str	r3, [r7, #64]	; 0x40
 8002084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002086:	fa93 f3a3 	rbit	r3, r3
 800208a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800208c:	4b46      	ldr	r3, [pc, #280]	; (80021a8 <HAL_RCC_ClockConfig+0x260>)
 800208e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002090:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002094:	63ba      	str	r2, [r7, #56]	; 0x38
 8002096:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002098:	fa92 f2a2 	rbit	r2, r2
 800209c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800209e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020a0:	fab2 f282 	clz	r2, r2
 80020a4:	b2d2      	uxtb	r2, r2
 80020a6:	f042 0220 	orr.w	r2, r2, #32
 80020aa:	b2d2      	uxtb	r2, r2
 80020ac:	f002 021f 	and.w	r2, r2, #31
 80020b0:	2101      	movs	r1, #1
 80020b2:	fa01 f202 	lsl.w	r2, r1, r2
 80020b6:	4013      	ands	r3, r2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d13a      	bne.n	8002132 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e0b2      	b.n	8002226 <HAL_RCC_ClockConfig+0x2de>
 80020c0:	2302      	movs	r3, #2
 80020c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020c6:	fa93 f3a3 	rbit	r3, r3
 80020ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80020cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ce:	fab3 f383 	clz	r3, r3
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	095b      	lsrs	r3, r3, #5
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	f043 0301 	orr.w	r3, r3, #1
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d102      	bne.n	80020e8 <HAL_RCC_ClockConfig+0x1a0>
 80020e2:	4b31      	ldr	r3, [pc, #196]	; (80021a8 <HAL_RCC_ClockConfig+0x260>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	e00d      	b.n	8002104 <HAL_RCC_ClockConfig+0x1bc>
 80020e8:	2302      	movs	r3, #2
 80020ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ee:	fa93 f3a3 	rbit	r3, r3
 80020f2:	627b      	str	r3, [r7, #36]	; 0x24
 80020f4:	2302      	movs	r3, #2
 80020f6:	623b      	str	r3, [r7, #32]
 80020f8:	6a3b      	ldr	r3, [r7, #32]
 80020fa:	fa93 f3a3 	rbit	r3, r3
 80020fe:	61fb      	str	r3, [r7, #28]
 8002100:	4b29      	ldr	r3, [pc, #164]	; (80021a8 <HAL_RCC_ClockConfig+0x260>)
 8002102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002104:	2202      	movs	r2, #2
 8002106:	61ba      	str	r2, [r7, #24]
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	fa92 f2a2 	rbit	r2, r2
 800210e:	617a      	str	r2, [r7, #20]
  return result;
 8002110:	697a      	ldr	r2, [r7, #20]
 8002112:	fab2 f282 	clz	r2, r2
 8002116:	b2d2      	uxtb	r2, r2
 8002118:	f042 0220 	orr.w	r2, r2, #32
 800211c:	b2d2      	uxtb	r2, r2
 800211e:	f002 021f 	and.w	r2, r2, #31
 8002122:	2101      	movs	r1, #1
 8002124:	fa01 f202 	lsl.w	r2, r1, r2
 8002128:	4013      	ands	r3, r2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e079      	b.n	8002226 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002132:	4b1d      	ldr	r3, [pc, #116]	; (80021a8 <HAL_RCC_ClockConfig+0x260>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f023 0203 	bic.w	r2, r3, #3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	491a      	ldr	r1, [pc, #104]	; (80021a8 <HAL_RCC_ClockConfig+0x260>)
 8002140:	4313      	orrs	r3, r2
 8002142:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002144:	f7fe fcec 	bl	8000b20 <HAL_GetTick>
 8002148:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800214a:	e00a      	b.n	8002162 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800214c:	f7fe fce8 	bl	8000b20 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	f241 3288 	movw	r2, #5000	; 0x1388
 800215a:	4293      	cmp	r3, r2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e061      	b.n	8002226 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002162:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <HAL_RCC_ClockConfig+0x260>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f003 020c 	and.w	r2, r3, #12
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	429a      	cmp	r2, r3
 8002172:	d1eb      	bne.n	800214c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002174:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <HAL_RCC_ClockConfig+0x25c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	429a      	cmp	r2, r3
 8002180:	d214      	bcs.n	80021ac <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002182:	4b08      	ldr	r3, [pc, #32]	; (80021a4 <HAL_RCC_ClockConfig+0x25c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f023 0207 	bic.w	r2, r3, #7
 800218a:	4906      	ldr	r1, [pc, #24]	; (80021a4 <HAL_RCC_ClockConfig+0x25c>)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	4313      	orrs	r3, r2
 8002190:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002192:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <HAL_RCC_ClockConfig+0x25c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0307 	and.w	r3, r3, #7
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	429a      	cmp	r2, r3
 800219e:	d005      	beq.n	80021ac <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e040      	b.n	8002226 <HAL_RCC_ClockConfig+0x2de>
 80021a4:	40022000 	.word	0x40022000
 80021a8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0304 	and.w	r3, r3, #4
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d008      	beq.n	80021ca <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021b8:	4b1d      	ldr	r3, [pc, #116]	; (8002230 <HAL_RCC_ClockConfig+0x2e8>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	491a      	ldr	r1, [pc, #104]	; (8002230 <HAL_RCC_ClockConfig+0x2e8>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0308 	and.w	r3, r3, #8
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d009      	beq.n	80021ea <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021d6:	4b16      	ldr	r3, [pc, #88]	; (8002230 <HAL_RCC_ClockConfig+0x2e8>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	4912      	ldr	r1, [pc, #72]	; (8002230 <HAL_RCC_ClockConfig+0x2e8>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80021ea:	f000 f829 	bl	8002240 <HAL_RCC_GetSysClockFreq>
 80021ee:	4601      	mov	r1, r0
 80021f0:	4b0f      	ldr	r3, [pc, #60]	; (8002230 <HAL_RCC_ClockConfig+0x2e8>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021f8:	22f0      	movs	r2, #240	; 0xf0
 80021fa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	fa92 f2a2 	rbit	r2, r2
 8002202:	60fa      	str	r2, [r7, #12]
  return result;
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	fab2 f282 	clz	r2, r2
 800220a:	b2d2      	uxtb	r2, r2
 800220c:	40d3      	lsrs	r3, r2
 800220e:	4a09      	ldr	r2, [pc, #36]	; (8002234 <HAL_RCC_ClockConfig+0x2ec>)
 8002210:	5cd3      	ldrb	r3, [r2, r3]
 8002212:	fa21 f303 	lsr.w	r3, r1, r3
 8002216:	4a08      	ldr	r2, [pc, #32]	; (8002238 <HAL_RCC_ClockConfig+0x2f0>)
 8002218:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800221a:	4b08      	ldr	r3, [pc, #32]	; (800223c <HAL_RCC_ClockConfig+0x2f4>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f7fe fc3a 	bl	8000a98 <HAL_InitTick>
  
  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3778      	adds	r7, #120	; 0x78
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	40021000 	.word	0x40021000
 8002234:	0800402c 	.word	0x0800402c
 8002238:	20000000 	.word	0x20000000
 800223c:	20000004 	.word	0x20000004

08002240 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002240:	b480      	push	{r7}
 8002242:	b08b      	sub	sp, #44	; 0x2c
 8002244:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002246:	2300      	movs	r3, #0
 8002248:	61fb      	str	r3, [r7, #28]
 800224a:	2300      	movs	r3, #0
 800224c:	61bb      	str	r3, [r7, #24]
 800224e:	2300      	movs	r3, #0
 8002250:	627b      	str	r3, [r7, #36]	; 0x24
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002256:	2300      	movs	r3, #0
 8002258:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800225a:	4b2a      	ldr	r3, [pc, #168]	; (8002304 <HAL_RCC_GetSysClockFreq+0xc4>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	f003 030c 	and.w	r3, r3, #12
 8002266:	2b04      	cmp	r3, #4
 8002268:	d002      	beq.n	8002270 <HAL_RCC_GetSysClockFreq+0x30>
 800226a:	2b08      	cmp	r3, #8
 800226c:	d003      	beq.n	8002276 <HAL_RCC_GetSysClockFreq+0x36>
 800226e:	e03f      	b.n	80022f0 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002270:	4b25      	ldr	r3, [pc, #148]	; (8002308 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002272:	623b      	str	r3, [r7, #32]
      break;
 8002274:	e03f      	b.n	80022f6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800227c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002280:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002282:	68ba      	ldr	r2, [r7, #8]
 8002284:	fa92 f2a2 	rbit	r2, r2
 8002288:	607a      	str	r2, [r7, #4]
  return result;
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	fab2 f282 	clz	r2, r2
 8002290:	b2d2      	uxtb	r2, r2
 8002292:	40d3      	lsrs	r3, r2
 8002294:	4a1d      	ldr	r2, [pc, #116]	; (800230c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002296:	5cd3      	ldrb	r3, [r2, r3]
 8002298:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800229a:	4b1a      	ldr	r3, [pc, #104]	; (8002304 <HAL_RCC_GetSysClockFreq+0xc4>)
 800229c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229e:	f003 030f 	and.w	r3, r3, #15
 80022a2:	220f      	movs	r2, #15
 80022a4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	fa92 f2a2 	rbit	r2, r2
 80022ac:	60fa      	str	r2, [r7, #12]
  return result;
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	fab2 f282 	clz	r2, r2
 80022b4:	b2d2      	uxtb	r2, r2
 80022b6:	40d3      	lsrs	r3, r2
 80022b8:	4a15      	ldr	r2, [pc, #84]	; (8002310 <HAL_RCC_GetSysClockFreq+0xd0>)
 80022ba:	5cd3      	ldrb	r3, [r2, r3]
 80022bc:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d008      	beq.n	80022da <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022c8:	4a0f      	ldr	r2, [pc, #60]	; (8002308 <HAL_RCC_GetSysClockFreq+0xc8>)
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	fb02 f303 	mul.w	r3, r2, r3
 80022d6:	627b      	str	r3, [r7, #36]	; 0x24
 80022d8:	e007      	b.n	80022ea <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022da:	4a0b      	ldr	r2, [pc, #44]	; (8002308 <HAL_RCC_GetSysClockFreq+0xc8>)
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	fbb2 f2f3 	udiv	r2, r2, r3
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	fb02 f303 	mul.w	r3, r2, r3
 80022e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	623b      	str	r3, [r7, #32]
      break;
 80022ee:	e002      	b.n	80022f6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022f0:	4b05      	ldr	r3, [pc, #20]	; (8002308 <HAL_RCC_GetSysClockFreq+0xc8>)
 80022f2:	623b      	str	r3, [r7, #32]
      break;
 80022f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022f6:	6a3b      	ldr	r3, [r7, #32]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	372c      	adds	r7, #44	; 0x2c
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	40021000 	.word	0x40021000
 8002308:	007a1200 	.word	0x007a1200
 800230c:	08004044 	.word	0x08004044
 8002310:	08004054 	.word	0x08004054

08002314 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002318:	4b03      	ldr	r3, [pc, #12]	; (8002328 <HAL_RCC_GetHCLKFreq+0x14>)
 800231a:	681b      	ldr	r3, [r3, #0]
}
 800231c:	4618      	mov	r0, r3
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	20000000 	.word	0x20000000

0800232c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002332:	f7ff ffef 	bl	8002314 <HAL_RCC_GetHCLKFreq>
 8002336:	4601      	mov	r1, r0
 8002338:	4b0b      	ldr	r3, [pc, #44]	; (8002368 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002340:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002344:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	fa92 f2a2 	rbit	r2, r2
 800234c:	603a      	str	r2, [r7, #0]
  return result;
 800234e:	683a      	ldr	r2, [r7, #0]
 8002350:	fab2 f282 	clz	r2, r2
 8002354:	b2d2      	uxtb	r2, r2
 8002356:	40d3      	lsrs	r3, r2
 8002358:	4a04      	ldr	r2, [pc, #16]	; (800236c <HAL_RCC_GetPCLK1Freq+0x40>)
 800235a:	5cd3      	ldrb	r3, [r2, r3]
 800235c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002360:	4618      	mov	r0, r3
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40021000 	.word	0x40021000
 800236c:	0800403c 	.word	0x0800403c

08002370 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002376:	f7ff ffcd 	bl	8002314 <HAL_RCC_GetHCLKFreq>
 800237a:	4601      	mov	r1, r0
 800237c:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <HAL_RCC_GetPCLK2Freq+0x3c>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002384:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002388:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	fa92 f2a2 	rbit	r2, r2
 8002390:	603a      	str	r2, [r7, #0]
  return result;
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	fab2 f282 	clz	r2, r2
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	40d3      	lsrs	r3, r2
 800239c:	4a04      	ldr	r2, [pc, #16]	; (80023b0 <HAL_RCC_GetPCLK2Freq+0x40>)
 800239e:	5cd3      	ldrb	r3, [r2, r3]
 80023a0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80023a4:	4618      	mov	r0, r3
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40021000 	.word	0x40021000
 80023b0:	0800403c 	.word	0x0800403c

080023b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b092      	sub	sp, #72	; 0x48
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023bc:	2300      	movs	r3, #0
 80023be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80023c4:	2300      	movs	r3, #0
 80023c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f000 80d4 	beq.w	8002580 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023d8:	4b4e      	ldr	r3, [pc, #312]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023da:	69db      	ldr	r3, [r3, #28]
 80023dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d10e      	bne.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e4:	4b4b      	ldr	r3, [pc, #300]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023e6:	69db      	ldr	r3, [r3, #28]
 80023e8:	4a4a      	ldr	r2, [pc, #296]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ee:	61d3      	str	r3, [r2, #28]
 80023f0:	4b48      	ldr	r3, [pc, #288]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023f2:	69db      	ldr	r3, [r3, #28]
 80023f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f8:	60bb      	str	r3, [r7, #8]
 80023fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023fc:	2301      	movs	r3, #1
 80023fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002402:	4b45      	ldr	r3, [pc, #276]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240a:	2b00      	cmp	r3, #0
 800240c:	d118      	bne.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800240e:	4b42      	ldr	r3, [pc, #264]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a41      	ldr	r2, [pc, #260]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002418:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800241a:	f7fe fb81 	bl	8000b20 <HAL_GetTick>
 800241e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002420:	e008      	b.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002422:	f7fe fb7d 	bl	8000b20 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b64      	cmp	r3, #100	; 0x64
 800242e:	d901      	bls.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e1d6      	b.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002434:	4b38      	ldr	r3, [pc, #224]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0f0      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002440:	4b34      	ldr	r3, [pc, #208]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002448:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800244a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800244c:	2b00      	cmp	r3, #0
 800244e:	f000 8084 	beq.w	800255a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800245a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800245c:	429a      	cmp	r2, r3
 800245e:	d07c      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002460:	4b2c      	ldr	r3, [pc, #176]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002468:	63fb      	str	r3, [r7, #60]	; 0x3c
 800246a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800246e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002472:	fa93 f3a3 	rbit	r3, r3
 8002476:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800247a:	fab3 f383 	clz	r3, r3
 800247e:	b2db      	uxtb	r3, r3
 8002480:	461a      	mov	r2, r3
 8002482:	4b26      	ldr	r3, [pc, #152]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002484:	4413      	add	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	461a      	mov	r2, r3
 800248a:	2301      	movs	r3, #1
 800248c:	6013      	str	r3, [r2, #0]
 800248e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002492:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002496:	fa93 f3a3 	rbit	r3, r3
 800249a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800249c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800249e:	fab3 f383 	clz	r3, r3
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	461a      	mov	r2, r3
 80024a6:	4b1d      	ldr	r3, [pc, #116]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80024a8:	4413      	add	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	461a      	mov	r2, r3
 80024ae:	2300      	movs	r3, #0
 80024b0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80024b2:	4a18      	ldr	r2, [pc, #96]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024b6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80024b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d04b      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c2:	f7fe fb2d 	bl	8000b20 <HAL_GetTick>
 80024c6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c8:	e00a      	b.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ca:	f7fe fb29 	bl	8000b20 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d8:	4293      	cmp	r3, r2
 80024da:	d901      	bls.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e180      	b.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80024e0:	2302      	movs	r3, #2
 80024e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e6:	fa93 f3a3 	rbit	r3, r3
 80024ea:	627b      	str	r3, [r7, #36]	; 0x24
 80024ec:	2302      	movs	r3, #2
 80024ee:	623b      	str	r3, [r7, #32]
 80024f0:	6a3b      	ldr	r3, [r7, #32]
 80024f2:	fa93 f3a3 	rbit	r3, r3
 80024f6:	61fb      	str	r3, [r7, #28]
  return result;
 80024f8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024fa:	fab3 f383 	clz	r3, r3
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	095b      	lsrs	r3, r3, #5
 8002502:	b2db      	uxtb	r3, r3
 8002504:	f043 0302 	orr.w	r3, r3, #2
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d108      	bne.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800250e:	4b01      	ldr	r3, [pc, #4]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	e00d      	b.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002514:	40021000 	.word	0x40021000
 8002518:	40007000 	.word	0x40007000
 800251c:	10908100 	.word	0x10908100
 8002520:	2302      	movs	r3, #2
 8002522:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	fa93 f3a3 	rbit	r3, r3
 800252a:	617b      	str	r3, [r7, #20]
 800252c:	4ba0      	ldr	r3, [pc, #640]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800252e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002530:	2202      	movs	r2, #2
 8002532:	613a      	str	r2, [r7, #16]
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	fa92 f2a2 	rbit	r2, r2
 800253a:	60fa      	str	r2, [r7, #12]
  return result;
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	fab2 f282 	clz	r2, r2
 8002542:	b2d2      	uxtb	r2, r2
 8002544:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002548:	b2d2      	uxtb	r2, r2
 800254a:	f002 021f 	and.w	r2, r2, #31
 800254e:	2101      	movs	r1, #1
 8002550:	fa01 f202 	lsl.w	r2, r1, r2
 8002554:	4013      	ands	r3, r2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d0b7      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800255a:	4b95      	ldr	r3, [pc, #596]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	4992      	ldr	r1, [pc, #584]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002568:	4313      	orrs	r3, r2
 800256a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800256c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002570:	2b01      	cmp	r3, #1
 8002572:	d105      	bne.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002574:	4b8e      	ldr	r3, [pc, #568]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002576:	69db      	ldr	r3, [r3, #28]
 8002578:	4a8d      	ldr	r2, [pc, #564]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800257a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800257e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	2b00      	cmp	r3, #0
 800258a:	d008      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800258c:	4b88      	ldr	r3, [pc, #544]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800258e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002590:	f023 0203 	bic.w	r2, r3, #3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	4985      	ldr	r1, [pc, #532]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800259a:	4313      	orrs	r3, r2
 800259c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d008      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025aa:	4b81      	ldr	r3, [pc, #516]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	497e      	ldr	r1, [pc, #504]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d008      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025c8:	4b79      	ldr	r3, [pc, #484]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	4976      	ldr	r1, [pc, #472]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0320 	and.w	r3, r3, #32
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d008      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025e6:	4b72      	ldr	r3, [pc, #456]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	f023 0210 	bic.w	r2, r3, #16
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	496f      	ldr	r1, [pc, #444]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d008      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002604:	4b6a      	ldr	r3, [pc, #424]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002610:	4967      	ldr	r1, [pc, #412]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002612:	4313      	orrs	r3, r2
 8002614:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800261e:	2b00      	cmp	r3, #0
 8002620:	d008      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002622:	4b63      	ldr	r3, [pc, #396]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	f023 0220 	bic.w	r2, r3, #32
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	4960      	ldr	r1, [pc, #384]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002630:	4313      	orrs	r3, r2
 8002632:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d008      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002640:	4b5b      	ldr	r3, [pc, #364]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002644:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	4958      	ldr	r1, [pc, #352]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800264e:	4313      	orrs	r3, r2
 8002650:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0308 	and.w	r3, r3, #8
 800265a:	2b00      	cmp	r3, #0
 800265c:	d008      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800265e:	4b54      	ldr	r3, [pc, #336]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002662:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	4951      	ldr	r1, [pc, #324]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800266c:	4313      	orrs	r3, r2
 800266e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0310 	and.w	r3, r3, #16
 8002678:	2b00      	cmp	r3, #0
 800267a:	d008      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800267c:	4b4c      	ldr	r3, [pc, #304]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800267e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002680:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	4949      	ldr	r1, [pc, #292]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800268a:	4313      	orrs	r3, r2
 800268c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002696:	2b00      	cmp	r3, #0
 8002698:	d008      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800269a:	4b45      	ldr	r3, [pc, #276]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a6:	4942      	ldr	r1, [pc, #264]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d008      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80026b8:	4b3d      	ldr	r3, [pc, #244]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026bc:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c4:	493a      	ldr	r1, [pc, #232]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d008      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80026d6:	4b36      	ldr	r3, [pc, #216]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026da:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e2:	4933      	ldr	r1, [pc, #204]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d008      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80026f4:	4b2e      	ldr	r3, [pc, #184]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002700:	492b      	ldr	r1, [pc, #172]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002702:	4313      	orrs	r3, r2
 8002704:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d008      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002712:	4b27      	ldr	r3, [pc, #156]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	4924      	ldr	r1, [pc, #144]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002720:	4313      	orrs	r3, r2
 8002722:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d008      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002730:	4b1f      	ldr	r3, [pc, #124]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002734:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800273c:	491c      	ldr	r1, [pc, #112]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800273e:	4313      	orrs	r3, r2
 8002740:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d008      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800274e:	4b18      	ldr	r3, [pc, #96]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800275a:	4915      	ldr	r1, [pc, #84]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800275c:	4313      	orrs	r3, r2
 800275e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d008      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800276c:	4b10      	ldr	r3, [pc, #64]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800276e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002770:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002778:	490d      	ldr	r1, [pc, #52]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800277a:	4313      	orrs	r3, r2
 800277c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d008      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800278a:	4b09      	ldr	r3, [pc, #36]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002796:	4906      	ldr	r1, [pc, #24]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002798:	4313      	orrs	r3, r2
 800279a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d00c      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80027a8:	4b01      	ldr	r3, [pc, #4]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ac:	e002      	b.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80027ae:	bf00      	nop
 80027b0:	40021000 	.word	0x40021000
 80027b4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027bc:	490b      	ldr	r1, [pc, #44]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d008      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80027ce:	4b07      	ldr	r3, [pc, #28]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027da:	4904      	ldr	r1, [pc, #16]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3748      	adds	r7, #72	; 0x48
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40021000 	.word	0x40021000

080027f0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e097      	b.n	8002934 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800280a:	b2db      	uxtb	r3, r3
 800280c:	2b00      	cmp	r3, #0
 800280e:	d106      	bne.n	800281e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f7fd ff7f 	bl	800071c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2202      	movs	r2, #2
 8002822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	6812      	ldr	r2, [r2, #0]
 8002830:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8002834:	f023 0307 	bic.w	r3, r3, #7
 8002838:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	3304      	adds	r3, #4
 8002842:	4619      	mov	r1, r3
 8002844:	4610      	mov	r0, r2
 8002846:	f000 f9cb 	bl	8002be0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	4313      	orrs	r3, r2
 800286a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002872:	f023 0303 	bic.w	r3, r3, #3
 8002876:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	021b      	lsls	r3, r3, #8
 8002882:	4313      	orrs	r3, r2
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	4313      	orrs	r3, r2
 8002888:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002890:	f023 030c 	bic.w	r3, r3, #12
 8002894:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800289c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	68da      	ldr	r2, [r3, #12]
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	021b      	lsls	r3, r3, #8
 80028ac:	4313      	orrs	r3, r2
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	011a      	lsls	r2, r3, #4
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	031b      	lsls	r3, r3, #12
 80028c0:	4313      	orrs	r3, r2
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80028ce:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80028d6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	695b      	ldr	r3, [r3, #20]
 80028e0:	011b      	lsls	r3, r3, #4
 80028e2:	4313      	orrs	r3, r2
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2201      	movs	r2, #1
 800292e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3718      	adds	r7, #24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b02      	cmp	r3, #2
 8002950:	d122      	bne.n	8002998 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b02      	cmp	r3, #2
 800295e:	d11b      	bne.n	8002998 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f06f 0202 	mvn.w	r2, #2
 8002968:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	f003 0303 	and.w	r3, r3, #3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d003      	beq.n	8002986 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 f90f 	bl	8002ba2 <HAL_TIM_IC_CaptureCallback>
 8002984:	e005      	b.n	8002992 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 f901 	bl	8002b8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 f912 	bl	8002bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	f003 0304 	and.w	r3, r3, #4
 80029a2:	2b04      	cmp	r3, #4
 80029a4:	d122      	bne.n	80029ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	f003 0304 	and.w	r3, r3, #4
 80029b0:	2b04      	cmp	r3, #4
 80029b2:	d11b      	bne.n	80029ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f06f 0204 	mvn.w	r2, #4
 80029bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2202      	movs	r2, #2
 80029c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d003      	beq.n	80029da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 f8e5 	bl	8002ba2 <HAL_TIM_IC_CaptureCallback>
 80029d8:	e005      	b.n	80029e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 f8d7 	bl	8002b8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f000 f8e8 	bl	8002bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	f003 0308 	and.w	r3, r3, #8
 80029f6:	2b08      	cmp	r3, #8
 80029f8:	d122      	bne.n	8002a40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	f003 0308 	and.w	r3, r3, #8
 8002a04:	2b08      	cmp	r3, #8
 8002a06:	d11b      	bne.n	8002a40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f06f 0208 	mvn.w	r2, #8
 8002a10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2204      	movs	r2, #4
 8002a16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	f003 0303 	and.w	r3, r3, #3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d003      	beq.n	8002a2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 f8bb 	bl	8002ba2 <HAL_TIM_IC_CaptureCallback>
 8002a2c:	e005      	b.n	8002a3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 f8ad 	bl	8002b8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 f8be 	bl	8002bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	f003 0310 	and.w	r3, r3, #16
 8002a4a:	2b10      	cmp	r3, #16
 8002a4c:	d122      	bne.n	8002a94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	f003 0310 	and.w	r3, r3, #16
 8002a58:	2b10      	cmp	r3, #16
 8002a5a:	d11b      	bne.n	8002a94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f06f 0210 	mvn.w	r2, #16
 8002a64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2208      	movs	r2, #8
 8002a6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	69db      	ldr	r3, [r3, #28]
 8002a72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f891 	bl	8002ba2 <HAL_TIM_IC_CaptureCallback>
 8002a80:	e005      	b.n	8002a8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f883 	bl	8002b8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 f894 	bl	8002bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d10e      	bne.n	8002ac0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	f003 0301 	and.w	r3, r3, #1
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d107      	bne.n	8002ac0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f06f 0201 	mvn.w	r2, #1
 8002ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 f85d 	bl	8002b7a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aca:	2b80      	cmp	r3, #128	; 0x80
 8002acc:	d10e      	bne.n	8002aec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad8:	2b80      	cmp	r3, #128	; 0x80
 8002ada:	d107      	bne.n	8002aec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f9ae 	bl	8002e48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002afa:	d10e      	bne.n	8002b1a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b06:	2b80      	cmp	r3, #128	; 0x80
 8002b08:	d107      	bne.n	8002b1a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002b12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 f9a1 	bl	8002e5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b24:	2b40      	cmp	r3, #64	; 0x40
 8002b26:	d10e      	bne.n	8002b46 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b32:	2b40      	cmp	r3, #64	; 0x40
 8002b34:	d107      	bne.n	8002b46 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 f842 	bl	8002bca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	f003 0320 	and.w	r3, r3, #32
 8002b50:	2b20      	cmp	r3, #32
 8002b52:	d10e      	bne.n	8002b72 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	f003 0320 	and.w	r3, r3, #32
 8002b5e:	2b20      	cmp	r3, #32
 8002b60:	d107      	bne.n	8002b72 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f06f 0220 	mvn.w	r2, #32
 8002b6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 f961 	bl	8002e34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b72:	bf00      	nop
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr

08002ba2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b083      	sub	sp, #12
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b083      	sub	sp, #12
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bbe:	bf00      	nop
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
	...

08002be0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a42      	ldr	r2, [pc, #264]	; (8002cfc <TIM_Base_SetConfig+0x11c>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d013      	beq.n	8002c20 <TIM_Base_SetConfig+0x40>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bfe:	d00f      	beq.n	8002c20 <TIM_Base_SetConfig+0x40>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a3f      	ldr	r2, [pc, #252]	; (8002d00 <TIM_Base_SetConfig+0x120>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d00b      	beq.n	8002c20 <TIM_Base_SetConfig+0x40>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a3e      	ldr	r2, [pc, #248]	; (8002d04 <TIM_Base_SetConfig+0x124>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d007      	beq.n	8002c20 <TIM_Base_SetConfig+0x40>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a3d      	ldr	r2, [pc, #244]	; (8002d08 <TIM_Base_SetConfig+0x128>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d003      	beq.n	8002c20 <TIM_Base_SetConfig+0x40>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a3c      	ldr	r2, [pc, #240]	; (8002d0c <TIM_Base_SetConfig+0x12c>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d108      	bne.n	8002c32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a31      	ldr	r2, [pc, #196]	; (8002cfc <TIM_Base_SetConfig+0x11c>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d01f      	beq.n	8002c7a <TIM_Base_SetConfig+0x9a>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c40:	d01b      	beq.n	8002c7a <TIM_Base_SetConfig+0x9a>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a2e      	ldr	r2, [pc, #184]	; (8002d00 <TIM_Base_SetConfig+0x120>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d017      	beq.n	8002c7a <TIM_Base_SetConfig+0x9a>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a2d      	ldr	r2, [pc, #180]	; (8002d04 <TIM_Base_SetConfig+0x124>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d013      	beq.n	8002c7a <TIM_Base_SetConfig+0x9a>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a2c      	ldr	r2, [pc, #176]	; (8002d08 <TIM_Base_SetConfig+0x128>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d00f      	beq.n	8002c7a <TIM_Base_SetConfig+0x9a>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a2c      	ldr	r2, [pc, #176]	; (8002d10 <TIM_Base_SetConfig+0x130>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d00b      	beq.n	8002c7a <TIM_Base_SetConfig+0x9a>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a2b      	ldr	r2, [pc, #172]	; (8002d14 <TIM_Base_SetConfig+0x134>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d007      	beq.n	8002c7a <TIM_Base_SetConfig+0x9a>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a2a      	ldr	r2, [pc, #168]	; (8002d18 <TIM_Base_SetConfig+0x138>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d003      	beq.n	8002c7a <TIM_Base_SetConfig+0x9a>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a25      	ldr	r2, [pc, #148]	; (8002d0c <TIM_Base_SetConfig+0x12c>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d108      	bne.n	8002c8c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a12      	ldr	r2, [pc, #72]	; (8002cfc <TIM_Base_SetConfig+0x11c>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d013      	beq.n	8002ce0 <TIM_Base_SetConfig+0x100>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a13      	ldr	r2, [pc, #76]	; (8002d08 <TIM_Base_SetConfig+0x128>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d00f      	beq.n	8002ce0 <TIM_Base_SetConfig+0x100>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a13      	ldr	r2, [pc, #76]	; (8002d10 <TIM_Base_SetConfig+0x130>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d00b      	beq.n	8002ce0 <TIM_Base_SetConfig+0x100>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a12      	ldr	r2, [pc, #72]	; (8002d14 <TIM_Base_SetConfig+0x134>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d007      	beq.n	8002ce0 <TIM_Base_SetConfig+0x100>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a11      	ldr	r2, [pc, #68]	; (8002d18 <TIM_Base_SetConfig+0x138>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d003      	beq.n	8002ce0 <TIM_Base_SetConfig+0x100>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a0c      	ldr	r2, [pc, #48]	; (8002d0c <TIM_Base_SetConfig+0x12c>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d103      	bne.n	8002ce8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	691a      	ldr	r2, [r3, #16]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	615a      	str	r2, [r3, #20]
}
 8002cee:	bf00      	nop
 8002cf0:	3714      	adds	r7, #20
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	40012c00 	.word	0x40012c00
 8002d00:	40000400 	.word	0x40000400
 8002d04:	40000800 	.word	0x40000800
 8002d08:	40013400 	.word	0x40013400
 8002d0c:	40015000 	.word	0x40015000
 8002d10:	40014000 	.word	0x40014000
 8002d14:	40014400 	.word	0x40014400
 8002d18:	40014800 	.word	0x40014800

08002d1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d101      	bne.n	8002d34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d30:	2302      	movs	r3, #2
 8002d32:	e06d      	b.n	8002e10 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2202      	movs	r2, #2
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a30      	ldr	r2, [pc, #192]	; (8002e1c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d009      	beq.n	8002d72 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a2f      	ldr	r2, [pc, #188]	; (8002e20 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d004      	beq.n	8002d72 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a2d      	ldr	r2, [pc, #180]	; (8002e24 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d108      	bne.n	8002d84 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002d78:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a1e      	ldr	r2, [pc, #120]	; (8002e1c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d01d      	beq.n	8002de4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002db0:	d018      	beq.n	8002de4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a1c      	ldr	r2, [pc, #112]	; (8002e28 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d013      	beq.n	8002de4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a1a      	ldr	r2, [pc, #104]	; (8002e2c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d00e      	beq.n	8002de4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a15      	ldr	r2, [pc, #84]	; (8002e20 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d009      	beq.n	8002de4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a16      	ldr	r2, [pc, #88]	; (8002e30 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d004      	beq.n	8002de4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a11      	ldr	r2, [pc, #68]	; (8002e24 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d10c      	bne.n	8002dfe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	68ba      	ldr	r2, [r7, #8]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3714      	adds	r7, #20
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	40012c00 	.word	0x40012c00
 8002e20:	40013400 	.word	0x40013400
 8002e24:	40015000 	.word	0x40015000
 8002e28:	40000400 	.word	0x40000400
 8002e2c:	40000800 	.word	0x40000800
 8002e30:	40014000 	.word	0x40014000

08002e34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e040      	b.n	8002f04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d106      	bne.n	8002e98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7fd fcc6 	bl	8000824 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2224      	movs	r2, #36	; 0x24
 8002e9c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f022 0201 	bic.w	r2, r2, #1
 8002eac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 f8c0 	bl	8003034 <UART_SetConfig>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d101      	bne.n	8002ebe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e022      	b.n	8002f04 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d002      	beq.n	8002ecc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 fa8a 	bl	80033e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	685a      	ldr	r2, [r3, #4]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002eda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689a      	ldr	r2, [r3, #8]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002eea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f042 0201 	orr.w	r2, r2, #1
 8002efa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 fb11 	bl	8003524 <UART_CheckIdleState>
 8002f02:	4603      	mov	r3, r0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3708      	adds	r7, #8
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b08a      	sub	sp, #40	; 0x28
 8002f10:	af02      	add	r7, sp, #8
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	603b      	str	r3, [r7, #0]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f20:	2b20      	cmp	r3, #32
 8002f22:	f040 8082 	bne.w	800302a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d002      	beq.n	8002f32 <HAL_UART_Transmit+0x26>
 8002f2c:	88fb      	ldrh	r3, [r7, #6]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e07a      	b.n	800302c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d101      	bne.n	8002f44 <HAL_UART_Transmit+0x38>
 8002f40:	2302      	movs	r3, #2
 8002f42:	e073      	b.n	800302c <HAL_UART_Transmit+0x120>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2221      	movs	r2, #33	; 0x21
 8002f58:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f5a:	f7fd fde1 	bl	8000b20 <HAL_GetTick>
 8002f5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	88fa      	ldrh	r2, [r7, #6]
 8002f64:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	88fa      	ldrh	r2, [r7, #6]
 8002f6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f78:	d108      	bne.n	8002f8c <HAL_UART_Transmit+0x80>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d104      	bne.n	8002f8c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002f82:	2300      	movs	r3, #0
 8002f84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	61bb      	str	r3, [r7, #24]
 8002f8a:	e003      	b.n	8002f94 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f90:	2300      	movs	r3, #0
 8002f92:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002f9c:	e02d      	b.n	8002ffa <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	2180      	movs	r1, #128	; 0x80
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f000 fb04 	bl	80035b6 <UART_WaitOnFlagUntilTimeout>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e039      	b.n	800302c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10b      	bne.n	8002fd6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	881a      	ldrh	r2, [r3, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fca:	b292      	uxth	r2, r2
 8002fcc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	3302      	adds	r3, #2
 8002fd2:	61bb      	str	r3, [r7, #24]
 8002fd4:	e008      	b.n	8002fe8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	781a      	ldrb	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	b292      	uxth	r2, r2
 8002fe0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003000:	b29b      	uxth	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1cb      	bne.n	8002f9e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	9300      	str	r3, [sp, #0]
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	2200      	movs	r2, #0
 800300e:	2140      	movs	r1, #64	; 0x40
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	f000 fad0 	bl	80035b6 <UART_WaitOnFlagUntilTimeout>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e005      	b.n	800302c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2220      	movs	r2, #32
 8003024:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003026:	2300      	movs	r3, #0
 8003028:	e000      	b.n	800302c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800302a:	2302      	movs	r3, #2
  }
}
 800302c:	4618      	mov	r0, r3
 800302e:	3720      	adds	r7, #32
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b088      	sub	sp, #32
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800303c:	2300      	movs	r3, #0
 800303e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689a      	ldr	r2, [r3, #8]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	431a      	orrs	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	431a      	orrs	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	69db      	ldr	r3, [r3, #28]
 8003054:	4313      	orrs	r3, r2
 8003056:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	4bab      	ldr	r3, [pc, #684]	; (800330c <UART_SetConfig+0x2d8>)
 8003060:	4013      	ands	r3, r2
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	6812      	ldr	r2, [r2, #0]
 8003066:	6979      	ldr	r1, [r7, #20]
 8003068:	430b      	orrs	r3, r1
 800306a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68da      	ldr	r2, [r3, #12]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	430a      	orrs	r2, r1
 8003080:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	4313      	orrs	r3, r2
 8003090:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	697a      	ldr	r2, [r7, #20]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a99      	ldr	r2, [pc, #612]	; (8003310 <UART_SetConfig+0x2dc>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d120      	bne.n	80030f2 <UART_SetConfig+0xbe>
 80030b0:	4b98      	ldr	r3, [pc, #608]	; (8003314 <UART_SetConfig+0x2e0>)
 80030b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b4:	f003 0303 	and.w	r3, r3, #3
 80030b8:	2b03      	cmp	r3, #3
 80030ba:	d817      	bhi.n	80030ec <UART_SetConfig+0xb8>
 80030bc:	a201      	add	r2, pc, #4	; (adr r2, 80030c4 <UART_SetConfig+0x90>)
 80030be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c2:	bf00      	nop
 80030c4:	080030d5 	.word	0x080030d5
 80030c8:	080030e1 	.word	0x080030e1
 80030cc:	080030e7 	.word	0x080030e7
 80030d0:	080030db 	.word	0x080030db
 80030d4:	2301      	movs	r3, #1
 80030d6:	77fb      	strb	r3, [r7, #31]
 80030d8:	e0b5      	b.n	8003246 <UART_SetConfig+0x212>
 80030da:	2302      	movs	r3, #2
 80030dc:	77fb      	strb	r3, [r7, #31]
 80030de:	e0b2      	b.n	8003246 <UART_SetConfig+0x212>
 80030e0:	2304      	movs	r3, #4
 80030e2:	77fb      	strb	r3, [r7, #31]
 80030e4:	e0af      	b.n	8003246 <UART_SetConfig+0x212>
 80030e6:	2308      	movs	r3, #8
 80030e8:	77fb      	strb	r3, [r7, #31]
 80030ea:	e0ac      	b.n	8003246 <UART_SetConfig+0x212>
 80030ec:	2310      	movs	r3, #16
 80030ee:	77fb      	strb	r3, [r7, #31]
 80030f0:	e0a9      	b.n	8003246 <UART_SetConfig+0x212>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a88      	ldr	r2, [pc, #544]	; (8003318 <UART_SetConfig+0x2e4>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d124      	bne.n	8003146 <UART_SetConfig+0x112>
 80030fc:	4b85      	ldr	r3, [pc, #532]	; (8003314 <UART_SetConfig+0x2e0>)
 80030fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003100:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003104:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003108:	d011      	beq.n	800312e <UART_SetConfig+0xfa>
 800310a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800310e:	d817      	bhi.n	8003140 <UART_SetConfig+0x10c>
 8003110:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003114:	d011      	beq.n	800313a <UART_SetConfig+0x106>
 8003116:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800311a:	d811      	bhi.n	8003140 <UART_SetConfig+0x10c>
 800311c:	2b00      	cmp	r3, #0
 800311e:	d003      	beq.n	8003128 <UART_SetConfig+0xf4>
 8003120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003124:	d006      	beq.n	8003134 <UART_SetConfig+0x100>
 8003126:	e00b      	b.n	8003140 <UART_SetConfig+0x10c>
 8003128:	2300      	movs	r3, #0
 800312a:	77fb      	strb	r3, [r7, #31]
 800312c:	e08b      	b.n	8003246 <UART_SetConfig+0x212>
 800312e:	2302      	movs	r3, #2
 8003130:	77fb      	strb	r3, [r7, #31]
 8003132:	e088      	b.n	8003246 <UART_SetConfig+0x212>
 8003134:	2304      	movs	r3, #4
 8003136:	77fb      	strb	r3, [r7, #31]
 8003138:	e085      	b.n	8003246 <UART_SetConfig+0x212>
 800313a:	2308      	movs	r3, #8
 800313c:	77fb      	strb	r3, [r7, #31]
 800313e:	e082      	b.n	8003246 <UART_SetConfig+0x212>
 8003140:	2310      	movs	r3, #16
 8003142:	77fb      	strb	r3, [r7, #31]
 8003144:	e07f      	b.n	8003246 <UART_SetConfig+0x212>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a74      	ldr	r2, [pc, #464]	; (800331c <UART_SetConfig+0x2e8>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d124      	bne.n	800319a <UART_SetConfig+0x166>
 8003150:	4b70      	ldr	r3, [pc, #448]	; (8003314 <UART_SetConfig+0x2e0>)
 8003152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003154:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003158:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800315c:	d011      	beq.n	8003182 <UART_SetConfig+0x14e>
 800315e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003162:	d817      	bhi.n	8003194 <UART_SetConfig+0x160>
 8003164:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003168:	d011      	beq.n	800318e <UART_SetConfig+0x15a>
 800316a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800316e:	d811      	bhi.n	8003194 <UART_SetConfig+0x160>
 8003170:	2b00      	cmp	r3, #0
 8003172:	d003      	beq.n	800317c <UART_SetConfig+0x148>
 8003174:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003178:	d006      	beq.n	8003188 <UART_SetConfig+0x154>
 800317a:	e00b      	b.n	8003194 <UART_SetConfig+0x160>
 800317c:	2300      	movs	r3, #0
 800317e:	77fb      	strb	r3, [r7, #31]
 8003180:	e061      	b.n	8003246 <UART_SetConfig+0x212>
 8003182:	2302      	movs	r3, #2
 8003184:	77fb      	strb	r3, [r7, #31]
 8003186:	e05e      	b.n	8003246 <UART_SetConfig+0x212>
 8003188:	2304      	movs	r3, #4
 800318a:	77fb      	strb	r3, [r7, #31]
 800318c:	e05b      	b.n	8003246 <UART_SetConfig+0x212>
 800318e:	2308      	movs	r3, #8
 8003190:	77fb      	strb	r3, [r7, #31]
 8003192:	e058      	b.n	8003246 <UART_SetConfig+0x212>
 8003194:	2310      	movs	r3, #16
 8003196:	77fb      	strb	r3, [r7, #31]
 8003198:	e055      	b.n	8003246 <UART_SetConfig+0x212>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a60      	ldr	r2, [pc, #384]	; (8003320 <UART_SetConfig+0x2ec>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d124      	bne.n	80031ee <UART_SetConfig+0x1ba>
 80031a4:	4b5b      	ldr	r3, [pc, #364]	; (8003314 <UART_SetConfig+0x2e0>)
 80031a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80031ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80031b0:	d011      	beq.n	80031d6 <UART_SetConfig+0x1a2>
 80031b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80031b6:	d817      	bhi.n	80031e8 <UART_SetConfig+0x1b4>
 80031b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031bc:	d011      	beq.n	80031e2 <UART_SetConfig+0x1ae>
 80031be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031c2:	d811      	bhi.n	80031e8 <UART_SetConfig+0x1b4>
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d003      	beq.n	80031d0 <UART_SetConfig+0x19c>
 80031c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031cc:	d006      	beq.n	80031dc <UART_SetConfig+0x1a8>
 80031ce:	e00b      	b.n	80031e8 <UART_SetConfig+0x1b4>
 80031d0:	2300      	movs	r3, #0
 80031d2:	77fb      	strb	r3, [r7, #31]
 80031d4:	e037      	b.n	8003246 <UART_SetConfig+0x212>
 80031d6:	2302      	movs	r3, #2
 80031d8:	77fb      	strb	r3, [r7, #31]
 80031da:	e034      	b.n	8003246 <UART_SetConfig+0x212>
 80031dc:	2304      	movs	r3, #4
 80031de:	77fb      	strb	r3, [r7, #31]
 80031e0:	e031      	b.n	8003246 <UART_SetConfig+0x212>
 80031e2:	2308      	movs	r3, #8
 80031e4:	77fb      	strb	r3, [r7, #31]
 80031e6:	e02e      	b.n	8003246 <UART_SetConfig+0x212>
 80031e8:	2310      	movs	r3, #16
 80031ea:	77fb      	strb	r3, [r7, #31]
 80031ec:	e02b      	b.n	8003246 <UART_SetConfig+0x212>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a4c      	ldr	r2, [pc, #304]	; (8003324 <UART_SetConfig+0x2f0>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d124      	bne.n	8003242 <UART_SetConfig+0x20e>
 80031f8:	4b46      	ldr	r3, [pc, #280]	; (8003314 <UART_SetConfig+0x2e0>)
 80031fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003200:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003204:	d011      	beq.n	800322a <UART_SetConfig+0x1f6>
 8003206:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800320a:	d817      	bhi.n	800323c <UART_SetConfig+0x208>
 800320c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003210:	d011      	beq.n	8003236 <UART_SetConfig+0x202>
 8003212:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003216:	d811      	bhi.n	800323c <UART_SetConfig+0x208>
 8003218:	2b00      	cmp	r3, #0
 800321a:	d003      	beq.n	8003224 <UART_SetConfig+0x1f0>
 800321c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003220:	d006      	beq.n	8003230 <UART_SetConfig+0x1fc>
 8003222:	e00b      	b.n	800323c <UART_SetConfig+0x208>
 8003224:	2300      	movs	r3, #0
 8003226:	77fb      	strb	r3, [r7, #31]
 8003228:	e00d      	b.n	8003246 <UART_SetConfig+0x212>
 800322a:	2302      	movs	r3, #2
 800322c:	77fb      	strb	r3, [r7, #31]
 800322e:	e00a      	b.n	8003246 <UART_SetConfig+0x212>
 8003230:	2304      	movs	r3, #4
 8003232:	77fb      	strb	r3, [r7, #31]
 8003234:	e007      	b.n	8003246 <UART_SetConfig+0x212>
 8003236:	2308      	movs	r3, #8
 8003238:	77fb      	strb	r3, [r7, #31]
 800323a:	e004      	b.n	8003246 <UART_SetConfig+0x212>
 800323c:	2310      	movs	r3, #16
 800323e:	77fb      	strb	r3, [r7, #31]
 8003240:	e001      	b.n	8003246 <UART_SetConfig+0x212>
 8003242:	2310      	movs	r3, #16
 8003244:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	69db      	ldr	r3, [r3, #28]
 800324a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800324e:	d16d      	bne.n	800332c <UART_SetConfig+0x2f8>
  {
    switch (clocksource)
 8003250:	7ffb      	ldrb	r3, [r7, #31]
 8003252:	2b08      	cmp	r3, #8
 8003254:	d827      	bhi.n	80032a6 <UART_SetConfig+0x272>
 8003256:	a201      	add	r2, pc, #4	; (adr r2, 800325c <UART_SetConfig+0x228>)
 8003258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325c:	08003281 	.word	0x08003281
 8003260:	08003289 	.word	0x08003289
 8003264:	08003291 	.word	0x08003291
 8003268:	080032a7 	.word	0x080032a7
 800326c:	08003297 	.word	0x08003297
 8003270:	080032a7 	.word	0x080032a7
 8003274:	080032a7 	.word	0x080032a7
 8003278:	080032a7 	.word	0x080032a7
 800327c:	0800329f 	.word	0x0800329f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003280:	f7ff f854 	bl	800232c <HAL_RCC_GetPCLK1Freq>
 8003284:	61b8      	str	r0, [r7, #24]
        break;
 8003286:	e013      	b.n	80032b0 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003288:	f7ff f872 	bl	8002370 <HAL_RCC_GetPCLK2Freq>
 800328c:	61b8      	str	r0, [r7, #24]
        break;
 800328e:	e00f      	b.n	80032b0 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003290:	4b25      	ldr	r3, [pc, #148]	; (8003328 <UART_SetConfig+0x2f4>)
 8003292:	61bb      	str	r3, [r7, #24]
        break;
 8003294:	e00c      	b.n	80032b0 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003296:	f7fe ffd3 	bl	8002240 <HAL_RCC_GetSysClockFreq>
 800329a:	61b8      	str	r0, [r7, #24]
        break;
 800329c:	e008      	b.n	80032b0 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800329e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032a2:	61bb      	str	r3, [r7, #24]
        break;
 80032a4:	e004      	b.n	80032b0 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	77bb      	strb	r3, [r7, #30]
        break;
 80032ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f000 8086 	beq.w	80033c4 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	005a      	lsls	r2, r3, #1
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	085b      	lsrs	r3, r3, #1
 80032c2:	441a      	add	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	2b0f      	cmp	r3, #15
 80032d4:	d916      	bls.n	8003304 <UART_SetConfig+0x2d0>
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032dc:	d212      	bcs.n	8003304 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	f023 030f 	bic.w	r3, r3, #15
 80032e6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	085b      	lsrs	r3, r3, #1
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	f003 0307 	and.w	r3, r3, #7
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	89fb      	ldrh	r3, [r7, #14]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	89fa      	ldrh	r2, [r7, #14]
 8003300:	60da      	str	r2, [r3, #12]
 8003302:	e05f      	b.n	80033c4 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	77bb      	strb	r3, [r7, #30]
 8003308:	e05c      	b.n	80033c4 <UART_SetConfig+0x390>
 800330a:	bf00      	nop
 800330c:	efff69f3 	.word	0xefff69f3
 8003310:	40013800 	.word	0x40013800
 8003314:	40021000 	.word	0x40021000
 8003318:	40004400 	.word	0x40004400
 800331c:	40004800 	.word	0x40004800
 8003320:	40004c00 	.word	0x40004c00
 8003324:	40005000 	.word	0x40005000
 8003328:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 800332c:	7ffb      	ldrb	r3, [r7, #31]
 800332e:	2b08      	cmp	r3, #8
 8003330:	d827      	bhi.n	8003382 <UART_SetConfig+0x34e>
 8003332:	a201      	add	r2, pc, #4	; (adr r2, 8003338 <UART_SetConfig+0x304>)
 8003334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003338:	0800335d 	.word	0x0800335d
 800333c:	08003365 	.word	0x08003365
 8003340:	0800336d 	.word	0x0800336d
 8003344:	08003383 	.word	0x08003383
 8003348:	08003373 	.word	0x08003373
 800334c:	08003383 	.word	0x08003383
 8003350:	08003383 	.word	0x08003383
 8003354:	08003383 	.word	0x08003383
 8003358:	0800337b 	.word	0x0800337b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800335c:	f7fe ffe6 	bl	800232c <HAL_RCC_GetPCLK1Freq>
 8003360:	61b8      	str	r0, [r7, #24]
        break;
 8003362:	e013      	b.n	800338c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003364:	f7ff f804 	bl	8002370 <HAL_RCC_GetPCLK2Freq>
 8003368:	61b8      	str	r0, [r7, #24]
        break;
 800336a:	e00f      	b.n	800338c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800336c:	4b1b      	ldr	r3, [pc, #108]	; (80033dc <UART_SetConfig+0x3a8>)
 800336e:	61bb      	str	r3, [r7, #24]
        break;
 8003370:	e00c      	b.n	800338c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003372:	f7fe ff65 	bl	8002240 <HAL_RCC_GetSysClockFreq>
 8003376:	61b8      	str	r0, [r7, #24]
        break;
 8003378:	e008      	b.n	800338c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800337a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800337e:	61bb      	str	r3, [r7, #24]
        break;
 8003380:	e004      	b.n	800338c <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8003382:	2300      	movs	r3, #0
 8003384:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	77bb      	strb	r3, [r7, #30]
        break;
 800338a:	bf00      	nop
    }

    if (pclk != 0U)
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d018      	beq.n	80033c4 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	085a      	lsrs	r2, r3, #1
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	441a      	add	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	2b0f      	cmp	r3, #15
 80033ac:	d908      	bls.n	80033c0 <UART_SetConfig+0x38c>
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b4:	d204      	bcs.n	80033c0 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	60da      	str	r2, [r3, #12]
 80033be:	e001      	b.n	80033c4 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80033d0:	7fbb      	ldrb	r3, [r7, #30]
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3720      	adds	r7, #32
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	007a1200 	.word	0x007a1200

080033e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ec:	f003 0301 	and.w	r3, r3, #1
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00a      	beq.n	800340a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	430a      	orrs	r2, r1
 8003408:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00a      	beq.n	800342c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	430a      	orrs	r2, r1
 800342a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003430:	f003 0304 	and.w	r3, r3, #4
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00a      	beq.n	800344e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	430a      	orrs	r2, r1
 800344c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003452:	f003 0308 	and.w	r3, r3, #8
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00a      	beq.n	8003470 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	430a      	orrs	r2, r1
 800346e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	f003 0310 	and.w	r3, r3, #16
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00a      	beq.n	8003492 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	f003 0320 	and.w	r3, r3, #32
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00a      	beq.n	80034b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d01a      	beq.n	80034f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034de:	d10a      	bne.n	80034f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00a      	beq.n	8003518 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	430a      	orrs	r2, r1
 8003516:	605a      	str	r2, [r3, #4]
  }
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af02      	add	r7, sp, #8
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003534:	f7fd faf4 	bl	8000b20 <HAL_GetTick>
 8003538:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0308 	and.w	r3, r3, #8
 8003544:	2b08      	cmp	r3, #8
 8003546:	d10e      	bne.n	8003566 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003548:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f82d 	bl	80035b6 <UART_WaitOnFlagUntilTimeout>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e023      	b.n	80035ae <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	2b04      	cmp	r3, #4
 8003572:	d10e      	bne.n	8003592 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003574:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003578:	9300      	str	r3, [sp, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f817 	bl	80035b6 <UART_WaitOnFlagUntilTimeout>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e00d      	b.n	80035ae <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2220      	movs	r2, #32
 8003596:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2220      	movs	r2, #32
 800359c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b09c      	sub	sp, #112	; 0x70
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	60f8      	str	r0, [r7, #12]
 80035be:	60b9      	str	r1, [r7, #8]
 80035c0:	603b      	str	r3, [r7, #0]
 80035c2:	4613      	mov	r3, r2
 80035c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035c6:	e0a5      	b.n	8003714 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ce:	f000 80a1 	beq.w	8003714 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035d2:	f7fd faa5 	bl	8000b20 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80035de:	429a      	cmp	r2, r3
 80035e0:	d302      	bcc.n	80035e8 <UART_WaitOnFlagUntilTimeout+0x32>
 80035e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d13e      	bne.n	8003666 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035f0:	e853 3f00 	ldrex	r3, [r3]
 80035f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80035f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80035fc:	667b      	str	r3, [r7, #100]	; 0x64
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	461a      	mov	r2, r3
 8003604:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003606:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003608:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800360c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800360e:	e841 2300 	strex	r3, r2, [r1]
 8003612:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003614:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1e6      	bne.n	80035e8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	3308      	adds	r3, #8
 8003620:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003624:	e853 3f00 	ldrex	r3, [r3]
 8003628:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800362a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800362c:	f023 0301 	bic.w	r3, r3, #1
 8003630:	663b      	str	r3, [r7, #96]	; 0x60
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	3308      	adds	r3, #8
 8003638:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800363a:	64ba      	str	r2, [r7, #72]	; 0x48
 800363c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800363e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003640:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003642:	e841 2300 	strex	r3, r2, [r1]
 8003646:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003648:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1e5      	bne.n	800361a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2220      	movs	r2, #32
 8003652:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2220      	movs	r2, #32
 8003658:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e067      	b.n	8003736 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0304 	and.w	r3, r3, #4
 8003670:	2b00      	cmp	r3, #0
 8003672:	d04f      	beq.n	8003714 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	69db      	ldr	r3, [r3, #28]
 800367a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800367e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003682:	d147      	bne.n	8003714 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800368c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003696:	e853 3f00 	ldrex	r3, [r3]
 800369a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80036a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	461a      	mov	r2, r3
 80036aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ac:	637b      	str	r3, [r7, #52]	; 0x34
 80036ae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036b4:	e841 2300 	strex	r3, r2, [r1]
 80036b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80036ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1e6      	bne.n	800368e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	3308      	adds	r3, #8
 80036c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	e853 3f00 	ldrex	r3, [r3]
 80036ce:	613b      	str	r3, [r7, #16]
   return(result);
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	f023 0301 	bic.w	r3, r3, #1
 80036d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	3308      	adds	r3, #8
 80036de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80036e0:	623a      	str	r2, [r7, #32]
 80036e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e4:	69f9      	ldr	r1, [r7, #28]
 80036e6:	6a3a      	ldr	r2, [r7, #32]
 80036e8:	e841 2300 	strex	r3, r2, [r1]
 80036ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d1e5      	bne.n	80036c0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2220      	movs	r2, #32
 80036f8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2220      	movs	r2, #32
 80036fe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2220      	movs	r2, #32
 8003704:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e010      	b.n	8003736 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	69da      	ldr	r2, [r3, #28]
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	4013      	ands	r3, r2
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	429a      	cmp	r2, r3
 8003722:	bf0c      	ite	eq
 8003724:	2301      	moveq	r3, #1
 8003726:	2300      	movne	r3, #0
 8003728:	b2db      	uxtb	r3, r3
 800372a:	461a      	mov	r2, r3
 800372c:	79fb      	ldrb	r3, [r7, #7]
 800372e:	429a      	cmp	r2, r3
 8003730:	f43f af4a 	beq.w	80035c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3770      	adds	r7, #112	; 0x70
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
	...

08003740 <__errno>:
 8003740:	4b01      	ldr	r3, [pc, #4]	; (8003748 <__errno+0x8>)
 8003742:	6818      	ldr	r0, [r3, #0]
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	2000000c 	.word	0x2000000c

0800374c <__libc_init_array>:
 800374c:	b570      	push	{r4, r5, r6, lr}
 800374e:	4d0d      	ldr	r5, [pc, #52]	; (8003784 <__libc_init_array+0x38>)
 8003750:	4c0d      	ldr	r4, [pc, #52]	; (8003788 <__libc_init_array+0x3c>)
 8003752:	1b64      	subs	r4, r4, r5
 8003754:	10a4      	asrs	r4, r4, #2
 8003756:	2600      	movs	r6, #0
 8003758:	42a6      	cmp	r6, r4
 800375a:	d109      	bne.n	8003770 <__libc_init_array+0x24>
 800375c:	4d0b      	ldr	r5, [pc, #44]	; (800378c <__libc_init_array+0x40>)
 800375e:	4c0c      	ldr	r4, [pc, #48]	; (8003790 <__libc_init_array+0x44>)
 8003760:	f000 fc4e 	bl	8004000 <_init>
 8003764:	1b64      	subs	r4, r4, r5
 8003766:	10a4      	asrs	r4, r4, #2
 8003768:	2600      	movs	r6, #0
 800376a:	42a6      	cmp	r6, r4
 800376c:	d105      	bne.n	800377a <__libc_init_array+0x2e>
 800376e:	bd70      	pop	{r4, r5, r6, pc}
 8003770:	f855 3b04 	ldr.w	r3, [r5], #4
 8003774:	4798      	blx	r3
 8003776:	3601      	adds	r6, #1
 8003778:	e7ee      	b.n	8003758 <__libc_init_array+0xc>
 800377a:	f855 3b04 	ldr.w	r3, [r5], #4
 800377e:	4798      	blx	r3
 8003780:	3601      	adds	r6, #1
 8003782:	e7f2      	b.n	800376a <__libc_init_array+0x1e>
 8003784:	08004098 	.word	0x08004098
 8003788:	08004098 	.word	0x08004098
 800378c:	08004098 	.word	0x08004098
 8003790:	0800409c 	.word	0x0800409c

08003794 <memset>:
 8003794:	4402      	add	r2, r0
 8003796:	4603      	mov	r3, r0
 8003798:	4293      	cmp	r3, r2
 800379a:	d100      	bne.n	800379e <memset+0xa>
 800379c:	4770      	bx	lr
 800379e:	f803 1b01 	strb.w	r1, [r3], #1
 80037a2:	e7f9      	b.n	8003798 <memset+0x4>

080037a4 <siprintf>:
 80037a4:	b40e      	push	{r1, r2, r3}
 80037a6:	b500      	push	{lr}
 80037a8:	b09c      	sub	sp, #112	; 0x70
 80037aa:	ab1d      	add	r3, sp, #116	; 0x74
 80037ac:	9002      	str	r0, [sp, #8]
 80037ae:	9006      	str	r0, [sp, #24]
 80037b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80037b4:	4809      	ldr	r0, [pc, #36]	; (80037dc <siprintf+0x38>)
 80037b6:	9107      	str	r1, [sp, #28]
 80037b8:	9104      	str	r1, [sp, #16]
 80037ba:	4909      	ldr	r1, [pc, #36]	; (80037e0 <siprintf+0x3c>)
 80037bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80037c0:	9105      	str	r1, [sp, #20]
 80037c2:	6800      	ldr	r0, [r0, #0]
 80037c4:	9301      	str	r3, [sp, #4]
 80037c6:	a902      	add	r1, sp, #8
 80037c8:	f000 f868 	bl	800389c <_svfiprintf_r>
 80037cc:	9b02      	ldr	r3, [sp, #8]
 80037ce:	2200      	movs	r2, #0
 80037d0:	701a      	strb	r2, [r3, #0]
 80037d2:	b01c      	add	sp, #112	; 0x70
 80037d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80037d8:	b003      	add	sp, #12
 80037da:	4770      	bx	lr
 80037dc:	2000000c 	.word	0x2000000c
 80037e0:	ffff0208 	.word	0xffff0208

080037e4 <__ssputs_r>:
 80037e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037e8:	688e      	ldr	r6, [r1, #8]
 80037ea:	429e      	cmp	r6, r3
 80037ec:	4682      	mov	sl, r0
 80037ee:	460c      	mov	r4, r1
 80037f0:	4690      	mov	r8, r2
 80037f2:	461f      	mov	r7, r3
 80037f4:	d838      	bhi.n	8003868 <__ssputs_r+0x84>
 80037f6:	898a      	ldrh	r2, [r1, #12]
 80037f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80037fc:	d032      	beq.n	8003864 <__ssputs_r+0x80>
 80037fe:	6825      	ldr	r5, [r4, #0]
 8003800:	6909      	ldr	r1, [r1, #16]
 8003802:	eba5 0901 	sub.w	r9, r5, r1
 8003806:	6965      	ldr	r5, [r4, #20]
 8003808:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800380c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003810:	3301      	adds	r3, #1
 8003812:	444b      	add	r3, r9
 8003814:	106d      	asrs	r5, r5, #1
 8003816:	429d      	cmp	r5, r3
 8003818:	bf38      	it	cc
 800381a:	461d      	movcc	r5, r3
 800381c:	0553      	lsls	r3, r2, #21
 800381e:	d531      	bpl.n	8003884 <__ssputs_r+0xa0>
 8003820:	4629      	mov	r1, r5
 8003822:	f000 fb47 	bl	8003eb4 <_malloc_r>
 8003826:	4606      	mov	r6, r0
 8003828:	b950      	cbnz	r0, 8003840 <__ssputs_r+0x5c>
 800382a:	230c      	movs	r3, #12
 800382c:	f8ca 3000 	str.w	r3, [sl]
 8003830:	89a3      	ldrh	r3, [r4, #12]
 8003832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003836:	81a3      	strh	r3, [r4, #12]
 8003838:	f04f 30ff 	mov.w	r0, #4294967295
 800383c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003840:	6921      	ldr	r1, [r4, #16]
 8003842:	464a      	mov	r2, r9
 8003844:	f000 fabe 	bl	8003dc4 <memcpy>
 8003848:	89a3      	ldrh	r3, [r4, #12]
 800384a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800384e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003852:	81a3      	strh	r3, [r4, #12]
 8003854:	6126      	str	r6, [r4, #16]
 8003856:	6165      	str	r5, [r4, #20]
 8003858:	444e      	add	r6, r9
 800385a:	eba5 0509 	sub.w	r5, r5, r9
 800385e:	6026      	str	r6, [r4, #0]
 8003860:	60a5      	str	r5, [r4, #8]
 8003862:	463e      	mov	r6, r7
 8003864:	42be      	cmp	r6, r7
 8003866:	d900      	bls.n	800386a <__ssputs_r+0x86>
 8003868:	463e      	mov	r6, r7
 800386a:	4632      	mov	r2, r6
 800386c:	6820      	ldr	r0, [r4, #0]
 800386e:	4641      	mov	r1, r8
 8003870:	f000 fab6 	bl	8003de0 <memmove>
 8003874:	68a3      	ldr	r3, [r4, #8]
 8003876:	6822      	ldr	r2, [r4, #0]
 8003878:	1b9b      	subs	r3, r3, r6
 800387a:	4432      	add	r2, r6
 800387c:	60a3      	str	r3, [r4, #8]
 800387e:	6022      	str	r2, [r4, #0]
 8003880:	2000      	movs	r0, #0
 8003882:	e7db      	b.n	800383c <__ssputs_r+0x58>
 8003884:	462a      	mov	r2, r5
 8003886:	f000 fb6f 	bl	8003f68 <_realloc_r>
 800388a:	4606      	mov	r6, r0
 800388c:	2800      	cmp	r0, #0
 800388e:	d1e1      	bne.n	8003854 <__ssputs_r+0x70>
 8003890:	6921      	ldr	r1, [r4, #16]
 8003892:	4650      	mov	r0, sl
 8003894:	f000 fabe 	bl	8003e14 <_free_r>
 8003898:	e7c7      	b.n	800382a <__ssputs_r+0x46>
	...

0800389c <_svfiprintf_r>:
 800389c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038a0:	4698      	mov	r8, r3
 80038a2:	898b      	ldrh	r3, [r1, #12]
 80038a4:	061b      	lsls	r3, r3, #24
 80038a6:	b09d      	sub	sp, #116	; 0x74
 80038a8:	4607      	mov	r7, r0
 80038aa:	460d      	mov	r5, r1
 80038ac:	4614      	mov	r4, r2
 80038ae:	d50e      	bpl.n	80038ce <_svfiprintf_r+0x32>
 80038b0:	690b      	ldr	r3, [r1, #16]
 80038b2:	b963      	cbnz	r3, 80038ce <_svfiprintf_r+0x32>
 80038b4:	2140      	movs	r1, #64	; 0x40
 80038b6:	f000 fafd 	bl	8003eb4 <_malloc_r>
 80038ba:	6028      	str	r0, [r5, #0]
 80038bc:	6128      	str	r0, [r5, #16]
 80038be:	b920      	cbnz	r0, 80038ca <_svfiprintf_r+0x2e>
 80038c0:	230c      	movs	r3, #12
 80038c2:	603b      	str	r3, [r7, #0]
 80038c4:	f04f 30ff 	mov.w	r0, #4294967295
 80038c8:	e0d1      	b.n	8003a6e <_svfiprintf_r+0x1d2>
 80038ca:	2340      	movs	r3, #64	; 0x40
 80038cc:	616b      	str	r3, [r5, #20]
 80038ce:	2300      	movs	r3, #0
 80038d0:	9309      	str	r3, [sp, #36]	; 0x24
 80038d2:	2320      	movs	r3, #32
 80038d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80038d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80038dc:	2330      	movs	r3, #48	; 0x30
 80038de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003a88 <_svfiprintf_r+0x1ec>
 80038e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80038e6:	f04f 0901 	mov.w	r9, #1
 80038ea:	4623      	mov	r3, r4
 80038ec:	469a      	mov	sl, r3
 80038ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80038f2:	b10a      	cbz	r2, 80038f8 <_svfiprintf_r+0x5c>
 80038f4:	2a25      	cmp	r2, #37	; 0x25
 80038f6:	d1f9      	bne.n	80038ec <_svfiprintf_r+0x50>
 80038f8:	ebba 0b04 	subs.w	fp, sl, r4
 80038fc:	d00b      	beq.n	8003916 <_svfiprintf_r+0x7a>
 80038fe:	465b      	mov	r3, fp
 8003900:	4622      	mov	r2, r4
 8003902:	4629      	mov	r1, r5
 8003904:	4638      	mov	r0, r7
 8003906:	f7ff ff6d 	bl	80037e4 <__ssputs_r>
 800390a:	3001      	adds	r0, #1
 800390c:	f000 80aa 	beq.w	8003a64 <_svfiprintf_r+0x1c8>
 8003910:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003912:	445a      	add	r2, fp
 8003914:	9209      	str	r2, [sp, #36]	; 0x24
 8003916:	f89a 3000 	ldrb.w	r3, [sl]
 800391a:	2b00      	cmp	r3, #0
 800391c:	f000 80a2 	beq.w	8003a64 <_svfiprintf_r+0x1c8>
 8003920:	2300      	movs	r3, #0
 8003922:	f04f 32ff 	mov.w	r2, #4294967295
 8003926:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800392a:	f10a 0a01 	add.w	sl, sl, #1
 800392e:	9304      	str	r3, [sp, #16]
 8003930:	9307      	str	r3, [sp, #28]
 8003932:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003936:	931a      	str	r3, [sp, #104]	; 0x68
 8003938:	4654      	mov	r4, sl
 800393a:	2205      	movs	r2, #5
 800393c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003940:	4851      	ldr	r0, [pc, #324]	; (8003a88 <_svfiprintf_r+0x1ec>)
 8003942:	f7fc fc4d 	bl	80001e0 <memchr>
 8003946:	9a04      	ldr	r2, [sp, #16]
 8003948:	b9d8      	cbnz	r0, 8003982 <_svfiprintf_r+0xe6>
 800394a:	06d0      	lsls	r0, r2, #27
 800394c:	bf44      	itt	mi
 800394e:	2320      	movmi	r3, #32
 8003950:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003954:	0711      	lsls	r1, r2, #28
 8003956:	bf44      	itt	mi
 8003958:	232b      	movmi	r3, #43	; 0x2b
 800395a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800395e:	f89a 3000 	ldrb.w	r3, [sl]
 8003962:	2b2a      	cmp	r3, #42	; 0x2a
 8003964:	d015      	beq.n	8003992 <_svfiprintf_r+0xf6>
 8003966:	9a07      	ldr	r2, [sp, #28]
 8003968:	4654      	mov	r4, sl
 800396a:	2000      	movs	r0, #0
 800396c:	f04f 0c0a 	mov.w	ip, #10
 8003970:	4621      	mov	r1, r4
 8003972:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003976:	3b30      	subs	r3, #48	; 0x30
 8003978:	2b09      	cmp	r3, #9
 800397a:	d94e      	bls.n	8003a1a <_svfiprintf_r+0x17e>
 800397c:	b1b0      	cbz	r0, 80039ac <_svfiprintf_r+0x110>
 800397e:	9207      	str	r2, [sp, #28]
 8003980:	e014      	b.n	80039ac <_svfiprintf_r+0x110>
 8003982:	eba0 0308 	sub.w	r3, r0, r8
 8003986:	fa09 f303 	lsl.w	r3, r9, r3
 800398a:	4313      	orrs	r3, r2
 800398c:	9304      	str	r3, [sp, #16]
 800398e:	46a2      	mov	sl, r4
 8003990:	e7d2      	b.n	8003938 <_svfiprintf_r+0x9c>
 8003992:	9b03      	ldr	r3, [sp, #12]
 8003994:	1d19      	adds	r1, r3, #4
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	9103      	str	r1, [sp, #12]
 800399a:	2b00      	cmp	r3, #0
 800399c:	bfbb      	ittet	lt
 800399e:	425b      	neglt	r3, r3
 80039a0:	f042 0202 	orrlt.w	r2, r2, #2
 80039a4:	9307      	strge	r3, [sp, #28]
 80039a6:	9307      	strlt	r3, [sp, #28]
 80039a8:	bfb8      	it	lt
 80039aa:	9204      	strlt	r2, [sp, #16]
 80039ac:	7823      	ldrb	r3, [r4, #0]
 80039ae:	2b2e      	cmp	r3, #46	; 0x2e
 80039b0:	d10c      	bne.n	80039cc <_svfiprintf_r+0x130>
 80039b2:	7863      	ldrb	r3, [r4, #1]
 80039b4:	2b2a      	cmp	r3, #42	; 0x2a
 80039b6:	d135      	bne.n	8003a24 <_svfiprintf_r+0x188>
 80039b8:	9b03      	ldr	r3, [sp, #12]
 80039ba:	1d1a      	adds	r2, r3, #4
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	9203      	str	r2, [sp, #12]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	bfb8      	it	lt
 80039c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80039c8:	3402      	adds	r4, #2
 80039ca:	9305      	str	r3, [sp, #20]
 80039cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003a98 <_svfiprintf_r+0x1fc>
 80039d0:	7821      	ldrb	r1, [r4, #0]
 80039d2:	2203      	movs	r2, #3
 80039d4:	4650      	mov	r0, sl
 80039d6:	f7fc fc03 	bl	80001e0 <memchr>
 80039da:	b140      	cbz	r0, 80039ee <_svfiprintf_r+0x152>
 80039dc:	2340      	movs	r3, #64	; 0x40
 80039de:	eba0 000a 	sub.w	r0, r0, sl
 80039e2:	fa03 f000 	lsl.w	r0, r3, r0
 80039e6:	9b04      	ldr	r3, [sp, #16]
 80039e8:	4303      	orrs	r3, r0
 80039ea:	3401      	adds	r4, #1
 80039ec:	9304      	str	r3, [sp, #16]
 80039ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039f2:	4826      	ldr	r0, [pc, #152]	; (8003a8c <_svfiprintf_r+0x1f0>)
 80039f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80039f8:	2206      	movs	r2, #6
 80039fa:	f7fc fbf1 	bl	80001e0 <memchr>
 80039fe:	2800      	cmp	r0, #0
 8003a00:	d038      	beq.n	8003a74 <_svfiprintf_r+0x1d8>
 8003a02:	4b23      	ldr	r3, [pc, #140]	; (8003a90 <_svfiprintf_r+0x1f4>)
 8003a04:	bb1b      	cbnz	r3, 8003a4e <_svfiprintf_r+0x1b2>
 8003a06:	9b03      	ldr	r3, [sp, #12]
 8003a08:	3307      	adds	r3, #7
 8003a0a:	f023 0307 	bic.w	r3, r3, #7
 8003a0e:	3308      	adds	r3, #8
 8003a10:	9303      	str	r3, [sp, #12]
 8003a12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a14:	4433      	add	r3, r6
 8003a16:	9309      	str	r3, [sp, #36]	; 0x24
 8003a18:	e767      	b.n	80038ea <_svfiprintf_r+0x4e>
 8003a1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a1e:	460c      	mov	r4, r1
 8003a20:	2001      	movs	r0, #1
 8003a22:	e7a5      	b.n	8003970 <_svfiprintf_r+0xd4>
 8003a24:	2300      	movs	r3, #0
 8003a26:	3401      	adds	r4, #1
 8003a28:	9305      	str	r3, [sp, #20]
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	f04f 0c0a 	mov.w	ip, #10
 8003a30:	4620      	mov	r0, r4
 8003a32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a36:	3a30      	subs	r2, #48	; 0x30
 8003a38:	2a09      	cmp	r2, #9
 8003a3a:	d903      	bls.n	8003a44 <_svfiprintf_r+0x1a8>
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d0c5      	beq.n	80039cc <_svfiprintf_r+0x130>
 8003a40:	9105      	str	r1, [sp, #20]
 8003a42:	e7c3      	b.n	80039cc <_svfiprintf_r+0x130>
 8003a44:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a48:	4604      	mov	r4, r0
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e7f0      	b.n	8003a30 <_svfiprintf_r+0x194>
 8003a4e:	ab03      	add	r3, sp, #12
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	462a      	mov	r2, r5
 8003a54:	4b0f      	ldr	r3, [pc, #60]	; (8003a94 <_svfiprintf_r+0x1f8>)
 8003a56:	a904      	add	r1, sp, #16
 8003a58:	4638      	mov	r0, r7
 8003a5a:	f3af 8000 	nop.w
 8003a5e:	1c42      	adds	r2, r0, #1
 8003a60:	4606      	mov	r6, r0
 8003a62:	d1d6      	bne.n	8003a12 <_svfiprintf_r+0x176>
 8003a64:	89ab      	ldrh	r3, [r5, #12]
 8003a66:	065b      	lsls	r3, r3, #25
 8003a68:	f53f af2c 	bmi.w	80038c4 <_svfiprintf_r+0x28>
 8003a6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a6e:	b01d      	add	sp, #116	; 0x74
 8003a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a74:	ab03      	add	r3, sp, #12
 8003a76:	9300      	str	r3, [sp, #0]
 8003a78:	462a      	mov	r2, r5
 8003a7a:	4b06      	ldr	r3, [pc, #24]	; (8003a94 <_svfiprintf_r+0x1f8>)
 8003a7c:	a904      	add	r1, sp, #16
 8003a7e:	4638      	mov	r0, r7
 8003a80:	f000 f87a 	bl	8003b78 <_printf_i>
 8003a84:	e7eb      	b.n	8003a5e <_svfiprintf_r+0x1c2>
 8003a86:	bf00      	nop
 8003a88:	08004064 	.word	0x08004064
 8003a8c:	0800406e 	.word	0x0800406e
 8003a90:	00000000 	.word	0x00000000
 8003a94:	080037e5 	.word	0x080037e5
 8003a98:	0800406a 	.word	0x0800406a

08003a9c <_printf_common>:
 8003a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003aa0:	4616      	mov	r6, r2
 8003aa2:	4699      	mov	r9, r3
 8003aa4:	688a      	ldr	r2, [r1, #8]
 8003aa6:	690b      	ldr	r3, [r1, #16]
 8003aa8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003aac:	4293      	cmp	r3, r2
 8003aae:	bfb8      	it	lt
 8003ab0:	4613      	movlt	r3, r2
 8003ab2:	6033      	str	r3, [r6, #0]
 8003ab4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ab8:	4607      	mov	r7, r0
 8003aba:	460c      	mov	r4, r1
 8003abc:	b10a      	cbz	r2, 8003ac2 <_printf_common+0x26>
 8003abe:	3301      	adds	r3, #1
 8003ac0:	6033      	str	r3, [r6, #0]
 8003ac2:	6823      	ldr	r3, [r4, #0]
 8003ac4:	0699      	lsls	r1, r3, #26
 8003ac6:	bf42      	ittt	mi
 8003ac8:	6833      	ldrmi	r3, [r6, #0]
 8003aca:	3302      	addmi	r3, #2
 8003acc:	6033      	strmi	r3, [r6, #0]
 8003ace:	6825      	ldr	r5, [r4, #0]
 8003ad0:	f015 0506 	ands.w	r5, r5, #6
 8003ad4:	d106      	bne.n	8003ae4 <_printf_common+0x48>
 8003ad6:	f104 0a19 	add.w	sl, r4, #25
 8003ada:	68e3      	ldr	r3, [r4, #12]
 8003adc:	6832      	ldr	r2, [r6, #0]
 8003ade:	1a9b      	subs	r3, r3, r2
 8003ae0:	42ab      	cmp	r3, r5
 8003ae2:	dc26      	bgt.n	8003b32 <_printf_common+0x96>
 8003ae4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ae8:	1e13      	subs	r3, r2, #0
 8003aea:	6822      	ldr	r2, [r4, #0]
 8003aec:	bf18      	it	ne
 8003aee:	2301      	movne	r3, #1
 8003af0:	0692      	lsls	r2, r2, #26
 8003af2:	d42b      	bmi.n	8003b4c <_printf_common+0xb0>
 8003af4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003af8:	4649      	mov	r1, r9
 8003afa:	4638      	mov	r0, r7
 8003afc:	47c0      	blx	r8
 8003afe:	3001      	adds	r0, #1
 8003b00:	d01e      	beq.n	8003b40 <_printf_common+0xa4>
 8003b02:	6823      	ldr	r3, [r4, #0]
 8003b04:	68e5      	ldr	r5, [r4, #12]
 8003b06:	6832      	ldr	r2, [r6, #0]
 8003b08:	f003 0306 	and.w	r3, r3, #6
 8003b0c:	2b04      	cmp	r3, #4
 8003b0e:	bf08      	it	eq
 8003b10:	1aad      	subeq	r5, r5, r2
 8003b12:	68a3      	ldr	r3, [r4, #8]
 8003b14:	6922      	ldr	r2, [r4, #16]
 8003b16:	bf0c      	ite	eq
 8003b18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b1c:	2500      	movne	r5, #0
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	bfc4      	itt	gt
 8003b22:	1a9b      	subgt	r3, r3, r2
 8003b24:	18ed      	addgt	r5, r5, r3
 8003b26:	2600      	movs	r6, #0
 8003b28:	341a      	adds	r4, #26
 8003b2a:	42b5      	cmp	r5, r6
 8003b2c:	d11a      	bne.n	8003b64 <_printf_common+0xc8>
 8003b2e:	2000      	movs	r0, #0
 8003b30:	e008      	b.n	8003b44 <_printf_common+0xa8>
 8003b32:	2301      	movs	r3, #1
 8003b34:	4652      	mov	r2, sl
 8003b36:	4649      	mov	r1, r9
 8003b38:	4638      	mov	r0, r7
 8003b3a:	47c0      	blx	r8
 8003b3c:	3001      	adds	r0, #1
 8003b3e:	d103      	bne.n	8003b48 <_printf_common+0xac>
 8003b40:	f04f 30ff 	mov.w	r0, #4294967295
 8003b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b48:	3501      	adds	r5, #1
 8003b4a:	e7c6      	b.n	8003ada <_printf_common+0x3e>
 8003b4c:	18e1      	adds	r1, r4, r3
 8003b4e:	1c5a      	adds	r2, r3, #1
 8003b50:	2030      	movs	r0, #48	; 0x30
 8003b52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b56:	4422      	add	r2, r4
 8003b58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b60:	3302      	adds	r3, #2
 8003b62:	e7c7      	b.n	8003af4 <_printf_common+0x58>
 8003b64:	2301      	movs	r3, #1
 8003b66:	4622      	mov	r2, r4
 8003b68:	4649      	mov	r1, r9
 8003b6a:	4638      	mov	r0, r7
 8003b6c:	47c0      	blx	r8
 8003b6e:	3001      	adds	r0, #1
 8003b70:	d0e6      	beq.n	8003b40 <_printf_common+0xa4>
 8003b72:	3601      	adds	r6, #1
 8003b74:	e7d9      	b.n	8003b2a <_printf_common+0x8e>
	...

08003b78 <_printf_i>:
 8003b78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b7c:	460c      	mov	r4, r1
 8003b7e:	4691      	mov	r9, r2
 8003b80:	7e27      	ldrb	r7, [r4, #24]
 8003b82:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003b84:	2f78      	cmp	r7, #120	; 0x78
 8003b86:	4680      	mov	r8, r0
 8003b88:	469a      	mov	sl, r3
 8003b8a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b8e:	d807      	bhi.n	8003ba0 <_printf_i+0x28>
 8003b90:	2f62      	cmp	r7, #98	; 0x62
 8003b92:	d80a      	bhi.n	8003baa <_printf_i+0x32>
 8003b94:	2f00      	cmp	r7, #0
 8003b96:	f000 80d8 	beq.w	8003d4a <_printf_i+0x1d2>
 8003b9a:	2f58      	cmp	r7, #88	; 0x58
 8003b9c:	f000 80a3 	beq.w	8003ce6 <_printf_i+0x16e>
 8003ba0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003ba4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ba8:	e03a      	b.n	8003c20 <_printf_i+0xa8>
 8003baa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003bae:	2b15      	cmp	r3, #21
 8003bb0:	d8f6      	bhi.n	8003ba0 <_printf_i+0x28>
 8003bb2:	a001      	add	r0, pc, #4	; (adr r0, 8003bb8 <_printf_i+0x40>)
 8003bb4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003bb8:	08003c11 	.word	0x08003c11
 8003bbc:	08003c25 	.word	0x08003c25
 8003bc0:	08003ba1 	.word	0x08003ba1
 8003bc4:	08003ba1 	.word	0x08003ba1
 8003bc8:	08003ba1 	.word	0x08003ba1
 8003bcc:	08003ba1 	.word	0x08003ba1
 8003bd0:	08003c25 	.word	0x08003c25
 8003bd4:	08003ba1 	.word	0x08003ba1
 8003bd8:	08003ba1 	.word	0x08003ba1
 8003bdc:	08003ba1 	.word	0x08003ba1
 8003be0:	08003ba1 	.word	0x08003ba1
 8003be4:	08003d31 	.word	0x08003d31
 8003be8:	08003c55 	.word	0x08003c55
 8003bec:	08003d13 	.word	0x08003d13
 8003bf0:	08003ba1 	.word	0x08003ba1
 8003bf4:	08003ba1 	.word	0x08003ba1
 8003bf8:	08003d53 	.word	0x08003d53
 8003bfc:	08003ba1 	.word	0x08003ba1
 8003c00:	08003c55 	.word	0x08003c55
 8003c04:	08003ba1 	.word	0x08003ba1
 8003c08:	08003ba1 	.word	0x08003ba1
 8003c0c:	08003d1b 	.word	0x08003d1b
 8003c10:	680b      	ldr	r3, [r1, #0]
 8003c12:	1d1a      	adds	r2, r3, #4
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	600a      	str	r2, [r1, #0]
 8003c18:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003c1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c20:	2301      	movs	r3, #1
 8003c22:	e0a3      	b.n	8003d6c <_printf_i+0x1f4>
 8003c24:	6825      	ldr	r5, [r4, #0]
 8003c26:	6808      	ldr	r0, [r1, #0]
 8003c28:	062e      	lsls	r6, r5, #24
 8003c2a:	f100 0304 	add.w	r3, r0, #4
 8003c2e:	d50a      	bpl.n	8003c46 <_printf_i+0xce>
 8003c30:	6805      	ldr	r5, [r0, #0]
 8003c32:	600b      	str	r3, [r1, #0]
 8003c34:	2d00      	cmp	r5, #0
 8003c36:	da03      	bge.n	8003c40 <_printf_i+0xc8>
 8003c38:	232d      	movs	r3, #45	; 0x2d
 8003c3a:	426d      	negs	r5, r5
 8003c3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c40:	485e      	ldr	r0, [pc, #376]	; (8003dbc <_printf_i+0x244>)
 8003c42:	230a      	movs	r3, #10
 8003c44:	e019      	b.n	8003c7a <_printf_i+0x102>
 8003c46:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003c4a:	6805      	ldr	r5, [r0, #0]
 8003c4c:	600b      	str	r3, [r1, #0]
 8003c4e:	bf18      	it	ne
 8003c50:	b22d      	sxthne	r5, r5
 8003c52:	e7ef      	b.n	8003c34 <_printf_i+0xbc>
 8003c54:	680b      	ldr	r3, [r1, #0]
 8003c56:	6825      	ldr	r5, [r4, #0]
 8003c58:	1d18      	adds	r0, r3, #4
 8003c5a:	6008      	str	r0, [r1, #0]
 8003c5c:	0628      	lsls	r0, r5, #24
 8003c5e:	d501      	bpl.n	8003c64 <_printf_i+0xec>
 8003c60:	681d      	ldr	r5, [r3, #0]
 8003c62:	e002      	b.n	8003c6a <_printf_i+0xf2>
 8003c64:	0669      	lsls	r1, r5, #25
 8003c66:	d5fb      	bpl.n	8003c60 <_printf_i+0xe8>
 8003c68:	881d      	ldrh	r5, [r3, #0]
 8003c6a:	4854      	ldr	r0, [pc, #336]	; (8003dbc <_printf_i+0x244>)
 8003c6c:	2f6f      	cmp	r7, #111	; 0x6f
 8003c6e:	bf0c      	ite	eq
 8003c70:	2308      	moveq	r3, #8
 8003c72:	230a      	movne	r3, #10
 8003c74:	2100      	movs	r1, #0
 8003c76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c7a:	6866      	ldr	r6, [r4, #4]
 8003c7c:	60a6      	str	r6, [r4, #8]
 8003c7e:	2e00      	cmp	r6, #0
 8003c80:	bfa2      	ittt	ge
 8003c82:	6821      	ldrge	r1, [r4, #0]
 8003c84:	f021 0104 	bicge.w	r1, r1, #4
 8003c88:	6021      	strge	r1, [r4, #0]
 8003c8a:	b90d      	cbnz	r5, 8003c90 <_printf_i+0x118>
 8003c8c:	2e00      	cmp	r6, #0
 8003c8e:	d04d      	beq.n	8003d2c <_printf_i+0x1b4>
 8003c90:	4616      	mov	r6, r2
 8003c92:	fbb5 f1f3 	udiv	r1, r5, r3
 8003c96:	fb03 5711 	mls	r7, r3, r1, r5
 8003c9a:	5dc7      	ldrb	r7, [r0, r7]
 8003c9c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003ca0:	462f      	mov	r7, r5
 8003ca2:	42bb      	cmp	r3, r7
 8003ca4:	460d      	mov	r5, r1
 8003ca6:	d9f4      	bls.n	8003c92 <_printf_i+0x11a>
 8003ca8:	2b08      	cmp	r3, #8
 8003caa:	d10b      	bne.n	8003cc4 <_printf_i+0x14c>
 8003cac:	6823      	ldr	r3, [r4, #0]
 8003cae:	07df      	lsls	r7, r3, #31
 8003cb0:	d508      	bpl.n	8003cc4 <_printf_i+0x14c>
 8003cb2:	6923      	ldr	r3, [r4, #16]
 8003cb4:	6861      	ldr	r1, [r4, #4]
 8003cb6:	4299      	cmp	r1, r3
 8003cb8:	bfde      	ittt	le
 8003cba:	2330      	movle	r3, #48	; 0x30
 8003cbc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003cc0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003cc4:	1b92      	subs	r2, r2, r6
 8003cc6:	6122      	str	r2, [r4, #16]
 8003cc8:	f8cd a000 	str.w	sl, [sp]
 8003ccc:	464b      	mov	r3, r9
 8003cce:	aa03      	add	r2, sp, #12
 8003cd0:	4621      	mov	r1, r4
 8003cd2:	4640      	mov	r0, r8
 8003cd4:	f7ff fee2 	bl	8003a9c <_printf_common>
 8003cd8:	3001      	adds	r0, #1
 8003cda:	d14c      	bne.n	8003d76 <_printf_i+0x1fe>
 8003cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce0:	b004      	add	sp, #16
 8003ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ce6:	4835      	ldr	r0, [pc, #212]	; (8003dbc <_printf_i+0x244>)
 8003ce8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003cec:	6823      	ldr	r3, [r4, #0]
 8003cee:	680e      	ldr	r6, [r1, #0]
 8003cf0:	061f      	lsls	r7, r3, #24
 8003cf2:	f856 5b04 	ldr.w	r5, [r6], #4
 8003cf6:	600e      	str	r6, [r1, #0]
 8003cf8:	d514      	bpl.n	8003d24 <_printf_i+0x1ac>
 8003cfa:	07d9      	lsls	r1, r3, #31
 8003cfc:	bf44      	itt	mi
 8003cfe:	f043 0320 	orrmi.w	r3, r3, #32
 8003d02:	6023      	strmi	r3, [r4, #0]
 8003d04:	b91d      	cbnz	r5, 8003d0e <_printf_i+0x196>
 8003d06:	6823      	ldr	r3, [r4, #0]
 8003d08:	f023 0320 	bic.w	r3, r3, #32
 8003d0c:	6023      	str	r3, [r4, #0]
 8003d0e:	2310      	movs	r3, #16
 8003d10:	e7b0      	b.n	8003c74 <_printf_i+0xfc>
 8003d12:	6823      	ldr	r3, [r4, #0]
 8003d14:	f043 0320 	orr.w	r3, r3, #32
 8003d18:	6023      	str	r3, [r4, #0]
 8003d1a:	2378      	movs	r3, #120	; 0x78
 8003d1c:	4828      	ldr	r0, [pc, #160]	; (8003dc0 <_printf_i+0x248>)
 8003d1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d22:	e7e3      	b.n	8003cec <_printf_i+0x174>
 8003d24:	065e      	lsls	r6, r3, #25
 8003d26:	bf48      	it	mi
 8003d28:	b2ad      	uxthmi	r5, r5
 8003d2a:	e7e6      	b.n	8003cfa <_printf_i+0x182>
 8003d2c:	4616      	mov	r6, r2
 8003d2e:	e7bb      	b.n	8003ca8 <_printf_i+0x130>
 8003d30:	680b      	ldr	r3, [r1, #0]
 8003d32:	6826      	ldr	r6, [r4, #0]
 8003d34:	6960      	ldr	r0, [r4, #20]
 8003d36:	1d1d      	adds	r5, r3, #4
 8003d38:	600d      	str	r5, [r1, #0]
 8003d3a:	0635      	lsls	r5, r6, #24
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	d501      	bpl.n	8003d44 <_printf_i+0x1cc>
 8003d40:	6018      	str	r0, [r3, #0]
 8003d42:	e002      	b.n	8003d4a <_printf_i+0x1d2>
 8003d44:	0671      	lsls	r1, r6, #25
 8003d46:	d5fb      	bpl.n	8003d40 <_printf_i+0x1c8>
 8003d48:	8018      	strh	r0, [r3, #0]
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	6123      	str	r3, [r4, #16]
 8003d4e:	4616      	mov	r6, r2
 8003d50:	e7ba      	b.n	8003cc8 <_printf_i+0x150>
 8003d52:	680b      	ldr	r3, [r1, #0]
 8003d54:	1d1a      	adds	r2, r3, #4
 8003d56:	600a      	str	r2, [r1, #0]
 8003d58:	681e      	ldr	r6, [r3, #0]
 8003d5a:	6862      	ldr	r2, [r4, #4]
 8003d5c:	2100      	movs	r1, #0
 8003d5e:	4630      	mov	r0, r6
 8003d60:	f7fc fa3e 	bl	80001e0 <memchr>
 8003d64:	b108      	cbz	r0, 8003d6a <_printf_i+0x1f2>
 8003d66:	1b80      	subs	r0, r0, r6
 8003d68:	6060      	str	r0, [r4, #4]
 8003d6a:	6863      	ldr	r3, [r4, #4]
 8003d6c:	6123      	str	r3, [r4, #16]
 8003d6e:	2300      	movs	r3, #0
 8003d70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d74:	e7a8      	b.n	8003cc8 <_printf_i+0x150>
 8003d76:	6923      	ldr	r3, [r4, #16]
 8003d78:	4632      	mov	r2, r6
 8003d7a:	4649      	mov	r1, r9
 8003d7c:	4640      	mov	r0, r8
 8003d7e:	47d0      	blx	sl
 8003d80:	3001      	adds	r0, #1
 8003d82:	d0ab      	beq.n	8003cdc <_printf_i+0x164>
 8003d84:	6823      	ldr	r3, [r4, #0]
 8003d86:	079b      	lsls	r3, r3, #30
 8003d88:	d413      	bmi.n	8003db2 <_printf_i+0x23a>
 8003d8a:	68e0      	ldr	r0, [r4, #12]
 8003d8c:	9b03      	ldr	r3, [sp, #12]
 8003d8e:	4298      	cmp	r0, r3
 8003d90:	bfb8      	it	lt
 8003d92:	4618      	movlt	r0, r3
 8003d94:	e7a4      	b.n	8003ce0 <_printf_i+0x168>
 8003d96:	2301      	movs	r3, #1
 8003d98:	4632      	mov	r2, r6
 8003d9a:	4649      	mov	r1, r9
 8003d9c:	4640      	mov	r0, r8
 8003d9e:	47d0      	blx	sl
 8003da0:	3001      	adds	r0, #1
 8003da2:	d09b      	beq.n	8003cdc <_printf_i+0x164>
 8003da4:	3501      	adds	r5, #1
 8003da6:	68e3      	ldr	r3, [r4, #12]
 8003da8:	9903      	ldr	r1, [sp, #12]
 8003daa:	1a5b      	subs	r3, r3, r1
 8003dac:	42ab      	cmp	r3, r5
 8003dae:	dcf2      	bgt.n	8003d96 <_printf_i+0x21e>
 8003db0:	e7eb      	b.n	8003d8a <_printf_i+0x212>
 8003db2:	2500      	movs	r5, #0
 8003db4:	f104 0619 	add.w	r6, r4, #25
 8003db8:	e7f5      	b.n	8003da6 <_printf_i+0x22e>
 8003dba:	bf00      	nop
 8003dbc:	08004075 	.word	0x08004075
 8003dc0:	08004086 	.word	0x08004086

08003dc4 <memcpy>:
 8003dc4:	440a      	add	r2, r1
 8003dc6:	4291      	cmp	r1, r2
 8003dc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8003dcc:	d100      	bne.n	8003dd0 <memcpy+0xc>
 8003dce:	4770      	bx	lr
 8003dd0:	b510      	push	{r4, lr}
 8003dd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003dd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003dda:	4291      	cmp	r1, r2
 8003ddc:	d1f9      	bne.n	8003dd2 <memcpy+0xe>
 8003dde:	bd10      	pop	{r4, pc}

08003de0 <memmove>:
 8003de0:	4288      	cmp	r0, r1
 8003de2:	b510      	push	{r4, lr}
 8003de4:	eb01 0402 	add.w	r4, r1, r2
 8003de8:	d902      	bls.n	8003df0 <memmove+0x10>
 8003dea:	4284      	cmp	r4, r0
 8003dec:	4623      	mov	r3, r4
 8003dee:	d807      	bhi.n	8003e00 <memmove+0x20>
 8003df0:	1e43      	subs	r3, r0, #1
 8003df2:	42a1      	cmp	r1, r4
 8003df4:	d008      	beq.n	8003e08 <memmove+0x28>
 8003df6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003dfa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003dfe:	e7f8      	b.n	8003df2 <memmove+0x12>
 8003e00:	4402      	add	r2, r0
 8003e02:	4601      	mov	r1, r0
 8003e04:	428a      	cmp	r2, r1
 8003e06:	d100      	bne.n	8003e0a <memmove+0x2a>
 8003e08:	bd10      	pop	{r4, pc}
 8003e0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003e12:	e7f7      	b.n	8003e04 <memmove+0x24>

08003e14 <_free_r>:
 8003e14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e16:	2900      	cmp	r1, #0
 8003e18:	d048      	beq.n	8003eac <_free_r+0x98>
 8003e1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e1e:	9001      	str	r0, [sp, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f1a1 0404 	sub.w	r4, r1, #4
 8003e26:	bfb8      	it	lt
 8003e28:	18e4      	addlt	r4, r4, r3
 8003e2a:	f000 f8d3 	bl	8003fd4 <__malloc_lock>
 8003e2e:	4a20      	ldr	r2, [pc, #128]	; (8003eb0 <_free_r+0x9c>)
 8003e30:	9801      	ldr	r0, [sp, #4]
 8003e32:	6813      	ldr	r3, [r2, #0]
 8003e34:	4615      	mov	r5, r2
 8003e36:	b933      	cbnz	r3, 8003e46 <_free_r+0x32>
 8003e38:	6063      	str	r3, [r4, #4]
 8003e3a:	6014      	str	r4, [r2, #0]
 8003e3c:	b003      	add	sp, #12
 8003e3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e42:	f000 b8cd 	b.w	8003fe0 <__malloc_unlock>
 8003e46:	42a3      	cmp	r3, r4
 8003e48:	d90b      	bls.n	8003e62 <_free_r+0x4e>
 8003e4a:	6821      	ldr	r1, [r4, #0]
 8003e4c:	1862      	adds	r2, r4, r1
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	bf04      	itt	eq
 8003e52:	681a      	ldreq	r2, [r3, #0]
 8003e54:	685b      	ldreq	r3, [r3, #4]
 8003e56:	6063      	str	r3, [r4, #4]
 8003e58:	bf04      	itt	eq
 8003e5a:	1852      	addeq	r2, r2, r1
 8003e5c:	6022      	streq	r2, [r4, #0]
 8003e5e:	602c      	str	r4, [r5, #0]
 8003e60:	e7ec      	b.n	8003e3c <_free_r+0x28>
 8003e62:	461a      	mov	r2, r3
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	b10b      	cbz	r3, 8003e6c <_free_r+0x58>
 8003e68:	42a3      	cmp	r3, r4
 8003e6a:	d9fa      	bls.n	8003e62 <_free_r+0x4e>
 8003e6c:	6811      	ldr	r1, [r2, #0]
 8003e6e:	1855      	adds	r5, r2, r1
 8003e70:	42a5      	cmp	r5, r4
 8003e72:	d10b      	bne.n	8003e8c <_free_r+0x78>
 8003e74:	6824      	ldr	r4, [r4, #0]
 8003e76:	4421      	add	r1, r4
 8003e78:	1854      	adds	r4, r2, r1
 8003e7a:	42a3      	cmp	r3, r4
 8003e7c:	6011      	str	r1, [r2, #0]
 8003e7e:	d1dd      	bne.n	8003e3c <_free_r+0x28>
 8003e80:	681c      	ldr	r4, [r3, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	6053      	str	r3, [r2, #4]
 8003e86:	4421      	add	r1, r4
 8003e88:	6011      	str	r1, [r2, #0]
 8003e8a:	e7d7      	b.n	8003e3c <_free_r+0x28>
 8003e8c:	d902      	bls.n	8003e94 <_free_r+0x80>
 8003e8e:	230c      	movs	r3, #12
 8003e90:	6003      	str	r3, [r0, #0]
 8003e92:	e7d3      	b.n	8003e3c <_free_r+0x28>
 8003e94:	6825      	ldr	r5, [r4, #0]
 8003e96:	1961      	adds	r1, r4, r5
 8003e98:	428b      	cmp	r3, r1
 8003e9a:	bf04      	itt	eq
 8003e9c:	6819      	ldreq	r1, [r3, #0]
 8003e9e:	685b      	ldreq	r3, [r3, #4]
 8003ea0:	6063      	str	r3, [r4, #4]
 8003ea2:	bf04      	itt	eq
 8003ea4:	1949      	addeq	r1, r1, r5
 8003ea6:	6021      	streq	r1, [r4, #0]
 8003ea8:	6054      	str	r4, [r2, #4]
 8003eaa:	e7c7      	b.n	8003e3c <_free_r+0x28>
 8003eac:	b003      	add	sp, #12
 8003eae:	bd30      	pop	{r4, r5, pc}
 8003eb0:	20000090 	.word	0x20000090

08003eb4 <_malloc_r>:
 8003eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eb6:	1ccd      	adds	r5, r1, #3
 8003eb8:	f025 0503 	bic.w	r5, r5, #3
 8003ebc:	3508      	adds	r5, #8
 8003ebe:	2d0c      	cmp	r5, #12
 8003ec0:	bf38      	it	cc
 8003ec2:	250c      	movcc	r5, #12
 8003ec4:	2d00      	cmp	r5, #0
 8003ec6:	4606      	mov	r6, r0
 8003ec8:	db01      	blt.n	8003ece <_malloc_r+0x1a>
 8003eca:	42a9      	cmp	r1, r5
 8003ecc:	d903      	bls.n	8003ed6 <_malloc_r+0x22>
 8003ece:	230c      	movs	r3, #12
 8003ed0:	6033      	str	r3, [r6, #0]
 8003ed2:	2000      	movs	r0, #0
 8003ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ed6:	f000 f87d 	bl	8003fd4 <__malloc_lock>
 8003eda:	4921      	ldr	r1, [pc, #132]	; (8003f60 <_malloc_r+0xac>)
 8003edc:	680a      	ldr	r2, [r1, #0]
 8003ede:	4614      	mov	r4, r2
 8003ee0:	b99c      	cbnz	r4, 8003f0a <_malloc_r+0x56>
 8003ee2:	4f20      	ldr	r7, [pc, #128]	; (8003f64 <_malloc_r+0xb0>)
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	b923      	cbnz	r3, 8003ef2 <_malloc_r+0x3e>
 8003ee8:	4621      	mov	r1, r4
 8003eea:	4630      	mov	r0, r6
 8003eec:	f000 f862 	bl	8003fb4 <_sbrk_r>
 8003ef0:	6038      	str	r0, [r7, #0]
 8003ef2:	4629      	mov	r1, r5
 8003ef4:	4630      	mov	r0, r6
 8003ef6:	f000 f85d 	bl	8003fb4 <_sbrk_r>
 8003efa:	1c43      	adds	r3, r0, #1
 8003efc:	d123      	bne.n	8003f46 <_malloc_r+0x92>
 8003efe:	230c      	movs	r3, #12
 8003f00:	6033      	str	r3, [r6, #0]
 8003f02:	4630      	mov	r0, r6
 8003f04:	f000 f86c 	bl	8003fe0 <__malloc_unlock>
 8003f08:	e7e3      	b.n	8003ed2 <_malloc_r+0x1e>
 8003f0a:	6823      	ldr	r3, [r4, #0]
 8003f0c:	1b5b      	subs	r3, r3, r5
 8003f0e:	d417      	bmi.n	8003f40 <_malloc_r+0x8c>
 8003f10:	2b0b      	cmp	r3, #11
 8003f12:	d903      	bls.n	8003f1c <_malloc_r+0x68>
 8003f14:	6023      	str	r3, [r4, #0]
 8003f16:	441c      	add	r4, r3
 8003f18:	6025      	str	r5, [r4, #0]
 8003f1a:	e004      	b.n	8003f26 <_malloc_r+0x72>
 8003f1c:	6863      	ldr	r3, [r4, #4]
 8003f1e:	42a2      	cmp	r2, r4
 8003f20:	bf0c      	ite	eq
 8003f22:	600b      	streq	r3, [r1, #0]
 8003f24:	6053      	strne	r3, [r2, #4]
 8003f26:	4630      	mov	r0, r6
 8003f28:	f000 f85a 	bl	8003fe0 <__malloc_unlock>
 8003f2c:	f104 000b 	add.w	r0, r4, #11
 8003f30:	1d23      	adds	r3, r4, #4
 8003f32:	f020 0007 	bic.w	r0, r0, #7
 8003f36:	1ac2      	subs	r2, r0, r3
 8003f38:	d0cc      	beq.n	8003ed4 <_malloc_r+0x20>
 8003f3a:	1a1b      	subs	r3, r3, r0
 8003f3c:	50a3      	str	r3, [r4, r2]
 8003f3e:	e7c9      	b.n	8003ed4 <_malloc_r+0x20>
 8003f40:	4622      	mov	r2, r4
 8003f42:	6864      	ldr	r4, [r4, #4]
 8003f44:	e7cc      	b.n	8003ee0 <_malloc_r+0x2c>
 8003f46:	1cc4      	adds	r4, r0, #3
 8003f48:	f024 0403 	bic.w	r4, r4, #3
 8003f4c:	42a0      	cmp	r0, r4
 8003f4e:	d0e3      	beq.n	8003f18 <_malloc_r+0x64>
 8003f50:	1a21      	subs	r1, r4, r0
 8003f52:	4630      	mov	r0, r6
 8003f54:	f000 f82e 	bl	8003fb4 <_sbrk_r>
 8003f58:	3001      	adds	r0, #1
 8003f5a:	d1dd      	bne.n	8003f18 <_malloc_r+0x64>
 8003f5c:	e7cf      	b.n	8003efe <_malloc_r+0x4a>
 8003f5e:	bf00      	nop
 8003f60:	20000090 	.word	0x20000090
 8003f64:	20000094 	.word	0x20000094

08003f68 <_realloc_r>:
 8003f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f6a:	4607      	mov	r7, r0
 8003f6c:	4614      	mov	r4, r2
 8003f6e:	460e      	mov	r6, r1
 8003f70:	b921      	cbnz	r1, 8003f7c <_realloc_r+0x14>
 8003f72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003f76:	4611      	mov	r1, r2
 8003f78:	f7ff bf9c 	b.w	8003eb4 <_malloc_r>
 8003f7c:	b922      	cbnz	r2, 8003f88 <_realloc_r+0x20>
 8003f7e:	f7ff ff49 	bl	8003e14 <_free_r>
 8003f82:	4625      	mov	r5, r4
 8003f84:	4628      	mov	r0, r5
 8003f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f88:	f000 f830 	bl	8003fec <_malloc_usable_size_r>
 8003f8c:	42a0      	cmp	r0, r4
 8003f8e:	d20f      	bcs.n	8003fb0 <_realloc_r+0x48>
 8003f90:	4621      	mov	r1, r4
 8003f92:	4638      	mov	r0, r7
 8003f94:	f7ff ff8e 	bl	8003eb4 <_malloc_r>
 8003f98:	4605      	mov	r5, r0
 8003f9a:	2800      	cmp	r0, #0
 8003f9c:	d0f2      	beq.n	8003f84 <_realloc_r+0x1c>
 8003f9e:	4631      	mov	r1, r6
 8003fa0:	4622      	mov	r2, r4
 8003fa2:	f7ff ff0f 	bl	8003dc4 <memcpy>
 8003fa6:	4631      	mov	r1, r6
 8003fa8:	4638      	mov	r0, r7
 8003faa:	f7ff ff33 	bl	8003e14 <_free_r>
 8003fae:	e7e9      	b.n	8003f84 <_realloc_r+0x1c>
 8003fb0:	4635      	mov	r5, r6
 8003fb2:	e7e7      	b.n	8003f84 <_realloc_r+0x1c>

08003fb4 <_sbrk_r>:
 8003fb4:	b538      	push	{r3, r4, r5, lr}
 8003fb6:	4d06      	ldr	r5, [pc, #24]	; (8003fd0 <_sbrk_r+0x1c>)
 8003fb8:	2300      	movs	r3, #0
 8003fba:	4604      	mov	r4, r0
 8003fbc:	4608      	mov	r0, r1
 8003fbe:	602b      	str	r3, [r5, #0]
 8003fc0:	f7fc fce2 	bl	8000988 <_sbrk>
 8003fc4:	1c43      	adds	r3, r0, #1
 8003fc6:	d102      	bne.n	8003fce <_sbrk_r+0x1a>
 8003fc8:	682b      	ldr	r3, [r5, #0]
 8003fca:	b103      	cbz	r3, 8003fce <_sbrk_r+0x1a>
 8003fcc:	6023      	str	r3, [r4, #0]
 8003fce:	bd38      	pop	{r3, r4, r5, pc}
 8003fd0:	2000023c 	.word	0x2000023c

08003fd4 <__malloc_lock>:
 8003fd4:	4801      	ldr	r0, [pc, #4]	; (8003fdc <__malloc_lock+0x8>)
 8003fd6:	f000 b811 	b.w	8003ffc <__retarget_lock_acquire_recursive>
 8003fda:	bf00      	nop
 8003fdc:	20000244 	.word	0x20000244

08003fe0 <__malloc_unlock>:
 8003fe0:	4801      	ldr	r0, [pc, #4]	; (8003fe8 <__malloc_unlock+0x8>)
 8003fe2:	f000 b80c 	b.w	8003ffe <__retarget_lock_release_recursive>
 8003fe6:	bf00      	nop
 8003fe8:	20000244 	.word	0x20000244

08003fec <_malloc_usable_size_r>:
 8003fec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ff0:	1f18      	subs	r0, r3, #4
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	bfbc      	itt	lt
 8003ff6:	580b      	ldrlt	r3, [r1, r0]
 8003ff8:	18c0      	addlt	r0, r0, r3
 8003ffa:	4770      	bx	lr

08003ffc <__retarget_lock_acquire_recursive>:
 8003ffc:	4770      	bx	lr

08003ffe <__retarget_lock_release_recursive>:
 8003ffe:	4770      	bx	lr

08004000 <_init>:
 8004000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004002:	bf00      	nop
 8004004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004006:	bc08      	pop	{r3}
 8004008:	469e      	mov	lr, r3
 800400a:	4770      	bx	lr

0800400c <_fini>:
 800400c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800400e:	bf00      	nop
 8004010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004012:	bc08      	pop	{r3}
 8004014:	469e      	mov	lr, r3
 8004016:	4770      	bx	lr

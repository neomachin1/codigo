
board767zi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e8c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004084  08004084  00014084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800409c  0800409c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800409c  0800409c  0001409c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040a4  080040a4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040a4  080040a4  000140a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040a8  080040a8  000140a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080040ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f8  2000000c  080040b8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000504  080040b8  00020504  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000113b1  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022c5  00000000  00000000  000313eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c28  00000000  00000000  000336b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b50  00000000  00000000  000342d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027b16  00000000  00000000  00034e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f26e  00000000  00000000  0005c93e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9274  00000000  00000000  0006bbac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00164e20  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031f8  00000000  00000000  00164e74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	0800406c 	.word	0x0800406c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	0800406c 	.word	0x0800406c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000534:	f000 fbef 	bl	8000d16 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000538:	f000 f818 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053c:	f000 f928 	bl	8000790 <MX_GPIO_Init>
  MX_ETH_Init();
 8000540:	f000 f886 	bl	8000650 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000544:	f000 f8c6 	bl	80006d4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000548:	f000 f8f4 	bl	8000734 <MX_USB_OTG_FS_PCD_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 800054c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000550:	4805      	ldr	r0, [pc, #20]	; (8000568 <main+0x38>)
 8000552:	f001 fb76 	bl	8001c42 <HAL_GPIO_TogglePin>
	//HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
	HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 8000556:	2180      	movs	r1, #128	; 0x80
 8000558:	4803      	ldr	r0, [pc, #12]	; (8000568 <main+0x38>)
 800055a:	f001 fb72 	bl	8001c42 <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 800055e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000562:	f000 fc35 	bl	8000dd0 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8000566:	e7f1      	b.n	800054c <main+0x1c>
 8000568:	40020400 	.word	0x40020400

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b094      	sub	sp, #80	; 0x50
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 031c 	add.w	r3, r7, #28
 8000576:	2234      	movs	r2, #52	; 0x34
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f003 fd6e 	bl	800405c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	f107 0308 	add.w	r3, r7, #8
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000590:	f001 fcba 	bl	8001f08 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000594:	4b2c      	ldr	r3, [pc, #176]	; (8000648 <SystemClock_Config+0xdc>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000598:	4a2b      	ldr	r2, [pc, #172]	; (8000648 <SystemClock_Config+0xdc>)
 800059a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059e:	6413      	str	r3, [r2, #64]	; 0x40
 80005a0:	4b29      	ldr	r3, [pc, #164]	; (8000648 <SystemClock_Config+0xdc>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005ac:	4b27      	ldr	r3, [pc, #156]	; (800064c <SystemClock_Config+0xe0>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005b4:	4a25      	ldr	r2, [pc, #148]	; (800064c <SystemClock_Config+0xe0>)
 80005b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ba:	6013      	str	r3, [r2, #0]
 80005bc:	4b23      	ldr	r3, [pc, #140]	; (800064c <SystemClock_Config+0xe0>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005c4:	603b      	str	r3, [r7, #0]
 80005c6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c8:	2301      	movs	r3, #1
 80005ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005cc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d2:	2302      	movs	r3, #2
 80005d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005dc:	2304      	movs	r3, #4
 80005de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80005e0:	2360      	movs	r3, #96	; 0x60
 80005e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e4:	2302      	movs	r3, #2
 80005e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005e8:	2304      	movs	r3, #4
 80005ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005ec:	2302      	movs	r3, #2
 80005ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f0:	f107 031c 	add.w	r3, r7, #28
 80005f4:	4618      	mov	r0, r3
 80005f6:	f001 fce7 	bl	8001fc8 <HAL_RCC_OscConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000600:	f000 f968 	bl	80008d4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000604:	f001 fc90 	bl	8001f28 <HAL_PWREx_EnableOverDrive>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800060e:	f000 f961 	bl	80008d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000612:	230f      	movs	r3, #15
 8000614:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000616:	2302      	movs	r3, #2
 8000618:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061a:	2300      	movs	r3, #0
 800061c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800061e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000622:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000628:	f107 0308 	add.w	r3, r7, #8
 800062c:	2103      	movs	r1, #3
 800062e:	4618      	mov	r0, r3
 8000630:	f001 ff78 	bl	8002524 <HAL_RCC_ClockConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800063a:	f000 f94b 	bl	80008d4 <Error_Handler>
  }
}
 800063e:	bf00      	nop
 8000640:	3750      	adds	r7, #80	; 0x50
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40023800 	.word	0x40023800
 800064c:	40007000 	.word	0x40007000

08000650 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000654:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <MX_ETH_Init+0x78>)
 8000656:	4a1d      	ldr	r2, [pc, #116]	; (80006cc <MX_ETH_Init+0x7c>)
 8000658:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800065a:	4b1b      	ldr	r3, [pc, #108]	; (80006c8 <MX_ETH_Init+0x78>)
 800065c:	2201      	movs	r2, #1
 800065e:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8000660:	4b19      	ldr	r3, [pc, #100]	; (80006c8 <MX_ETH_Init+0x78>)
 8000662:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000666:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8000668:	4b17      	ldr	r3, [pc, #92]	; (80006c8 <MX_ETH_Init+0x78>)
 800066a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800066e:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8000670:	4b15      	ldr	r3, [pc, #84]	; (80006c8 <MX_ETH_Init+0x78>)
 8000672:	2200      	movs	r2, #0
 8000674:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8000676:	4b16      	ldr	r3, [pc, #88]	; (80006d0 <MX_ETH_Init+0x80>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800067c:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <MX_ETH_Init+0x80>)
 800067e:	2280      	movs	r2, #128	; 0x80
 8000680:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000682:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <MX_ETH_Init+0x80>)
 8000684:	22e1      	movs	r2, #225	; 0xe1
 8000686:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000688:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <MX_ETH_Init+0x80>)
 800068a:	2200      	movs	r2, #0
 800068c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800068e:	4b10      	ldr	r3, [pc, #64]	; (80006d0 <MX_ETH_Init+0x80>)
 8000690:	2200      	movs	r2, #0
 8000692:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000694:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <MX_ETH_Init+0x80>)
 8000696:	2200      	movs	r2, #0
 8000698:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800069a:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <MX_ETH_Init+0x78>)
 800069c:	4a0c      	ldr	r2, [pc, #48]	; (80006d0 <MX_ETH_Init+0x80>)
 800069e:	615a      	str	r2, [r3, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80006a0:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <MX_ETH_Init+0x78>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80006a6:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <MX_ETH_Init+0x78>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <MX_ETH_Init+0x78>)
 80006ae:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80006b2:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006b4:	4804      	ldr	r0, [pc, #16]	; (80006c8 <MX_ETH_Init+0x78>)
 80006b6:	f000 fc95 	bl	8000fe4 <HAL_ETH_Init>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 80006c0:	f000 f908 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	200004b8 	.word	0x200004b8
 80006cc:	40028000 	.word	0x40028000
 80006d0:	20000028 	.word	0x20000028

080006d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006d8:	4b14      	ldr	r3, [pc, #80]	; (800072c <MX_USART3_UART_Init+0x58>)
 80006da:	4a15      	ldr	r2, [pc, #84]	; (8000730 <MX_USART3_UART_Init+0x5c>)
 80006dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006de:	4b13      	ldr	r3, [pc, #76]	; (800072c <MX_USART3_UART_Init+0x58>)
 80006e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006e6:	4b11      	ldr	r3, [pc, #68]	; (800072c <MX_USART3_UART_Init+0x58>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	; (800072c <MX_USART3_UART_Init+0x58>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <MX_USART3_UART_Init+0x58>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <MX_USART3_UART_Init+0x58>)
 80006fa:	220c      	movs	r2, #12
 80006fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fe:	4b0b      	ldr	r3, [pc, #44]	; (800072c <MX_USART3_UART_Init+0x58>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000704:	4b09      	ldr	r3, [pc, #36]	; (800072c <MX_USART3_UART_Init+0x58>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800070a:	4b08      	ldr	r3, [pc, #32]	; (800072c <MX_USART3_UART_Init+0x58>)
 800070c:	2200      	movs	r2, #0
 800070e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <MX_USART3_UART_Init+0x58>)
 8000712:	2200      	movs	r2, #0
 8000714:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000716:	4805      	ldr	r0, [pc, #20]	; (800072c <MX_USART3_UART_Init+0x58>)
 8000718:	f002 fd2e 	bl	8003178 <HAL_UART_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000722:	f000 f8d7 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000030 	.word	0x20000030
 8000730:	40004800 	.word	0x40004800

08000734 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800073a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800073e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000740:	4b12      	ldr	r3, [pc, #72]	; (800078c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000742:	2206      	movs	r2, #6
 8000744:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000748:	2202      	movs	r2, #2
 800074a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800074e:	2200      	movs	r2, #0
 8000750:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000754:	2202      	movs	r2, #2
 8000756:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800075a:	2201      	movs	r2, #1
 800075c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000760:	2200      	movs	r2, #0
 8000762:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000764:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000766:	2200      	movs	r2, #0
 8000768:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800076a:	4b08      	ldr	r3, [pc, #32]	; (800078c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800076c:	2201      	movs	r2, #1
 800076e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000772:	2200      	movs	r2, #0
 8000774:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000778:	f001 fa7d 	bl	8001c76 <HAL_PCD_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000782:	f000 f8a7 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	200000b4 	.word	0x200000b4

08000790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08c      	sub	sp, #48	; 0x30
 8000794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a6:	4b47      	ldr	r3, [pc, #284]	; (80008c4 <MX_GPIO_Init+0x134>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a46      	ldr	r2, [pc, #280]	; (80008c4 <MX_GPIO_Init+0x134>)
 80007ac:	f043 0304 	orr.w	r3, r3, #4
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b44      	ldr	r3, [pc, #272]	; (80008c4 <MX_GPIO_Init+0x134>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0304 	and.w	r3, r3, #4
 80007ba:	61bb      	str	r3, [r7, #24]
 80007bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007be:	4b41      	ldr	r3, [pc, #260]	; (80008c4 <MX_GPIO_Init+0x134>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a40      	ldr	r2, [pc, #256]	; (80008c4 <MX_GPIO_Init+0x134>)
 80007c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b3e      	ldr	r3, [pc, #248]	; (80008c4 <MX_GPIO_Init+0x134>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007d2:	617b      	str	r3, [r7, #20]
 80007d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	4b3b      	ldr	r3, [pc, #236]	; (80008c4 <MX_GPIO_Init+0x134>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a3a      	ldr	r2, [pc, #232]	; (80008c4 <MX_GPIO_Init+0x134>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b38      	ldr	r3, [pc, #224]	; (80008c4 <MX_GPIO_Init+0x134>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ee:	4b35      	ldr	r3, [pc, #212]	; (80008c4 <MX_GPIO_Init+0x134>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a34      	ldr	r2, [pc, #208]	; (80008c4 <MX_GPIO_Init+0x134>)
 80007f4:	f043 0302 	orr.w	r3, r3, #2
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b32      	ldr	r3, [pc, #200]	; (80008c4 <MX_GPIO_Init+0x134>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0302 	and.w	r3, r3, #2
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000806:	4b2f      	ldr	r3, [pc, #188]	; (80008c4 <MX_GPIO_Init+0x134>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a2e      	ldr	r2, [pc, #184]	; (80008c4 <MX_GPIO_Init+0x134>)
 800080c:	f043 0308 	orr.w	r3, r3, #8
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b2c      	ldr	r3, [pc, #176]	; (80008c4 <MX_GPIO_Init+0x134>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0308 	and.w	r3, r3, #8
 800081a:	60bb      	str	r3, [r7, #8]
 800081c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800081e:	4b29      	ldr	r3, [pc, #164]	; (80008c4 <MX_GPIO_Init+0x134>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a28      	ldr	r2, [pc, #160]	; (80008c4 <MX_GPIO_Init+0x134>)
 8000824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b26      	ldr	r3, [pc, #152]	; (80008c4 <MX_GPIO_Init+0x134>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	f244 0181 	movw	r1, #16513	; 0x4081
 800083c:	4822      	ldr	r0, [pc, #136]	; (80008c8 <MX_GPIO_Init+0x138>)
 800083e:	f001 f9e7 	bl	8001c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	2140      	movs	r1, #64	; 0x40
 8000846:	4821      	ldr	r0, [pc, #132]	; (80008cc <MX_GPIO_Init+0x13c>)
 8000848:	f001 f9e2 	bl	8001c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800084c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000852:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000856:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800085c:	f107 031c 	add.w	r3, r7, #28
 8000860:	4619      	mov	r1, r3
 8000862:	481b      	ldr	r0, [pc, #108]	; (80008d0 <MX_GPIO_Init+0x140>)
 8000864:	f001 f828 	bl	80018b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000868:	f244 0381 	movw	r3, #16513	; 0x4081
 800086c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086e:	2301      	movs	r3, #1
 8000870:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	4619      	mov	r1, r3
 8000880:	4811      	ldr	r0, [pc, #68]	; (80008c8 <MX_GPIO_Init+0x138>)
 8000882:	f001 f819 	bl	80018b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000886:	2340      	movs	r3, #64	; 0x40
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088a:	2301      	movs	r3, #1
 800088c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	480b      	ldr	r0, [pc, #44]	; (80008cc <MX_GPIO_Init+0x13c>)
 800089e:	f001 f80b 	bl	80018b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008a2:	2380      	movs	r3, #128	; 0x80
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a6:	2300      	movs	r3, #0
 80008a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	4619      	mov	r1, r3
 80008b4:	4805      	ldr	r0, [pc, #20]	; (80008cc <MX_GPIO_Init+0x13c>)
 80008b6:	f000 ffff 	bl	80018b8 <HAL_GPIO_Init>

}
 80008ba:	bf00      	nop
 80008bc:	3730      	adds	r7, #48	; 0x30
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40020400 	.word	0x40020400
 80008cc:	40021800 	.word	0x40021800
 80008d0:	40020800 	.word	0x40020800

080008d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d8:	b672      	cpsid	i
}
 80008da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008dc:	e7fe      	b.n	80008dc <Error_Handler+0x8>
	...

080008e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80008e6:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <HAL_MspInit+0x44>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ea:	4a0e      	ldr	r2, [pc, #56]	; (8000924 <HAL_MspInit+0x44>)
 80008ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f0:	6413      	str	r3, [r2, #64]	; 0x40
 80008f2:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <HAL_MspInit+0x44>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <HAL_MspInit+0x44>)
 8000900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000902:	4a08      	ldr	r2, [pc, #32]	; (8000924 <HAL_MspInit+0x44>)
 8000904:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000908:	6453      	str	r3, [r2, #68]	; 0x44
 800090a:	4b06      	ldr	r3, [pc, #24]	; (8000924 <HAL_MspInit+0x44>)
 800090c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000916:	bf00      	nop
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	40023800 	.word	0x40023800

08000928 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08e      	sub	sp, #56	; 0x38
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000930:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a4e      	ldr	r2, [pc, #312]	; (8000a80 <HAL_ETH_MspInit+0x158>)
 8000946:	4293      	cmp	r3, r2
 8000948:	f040 8096 	bne.w	8000a78 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800094c:	4b4d      	ldr	r3, [pc, #308]	; (8000a84 <HAL_ETH_MspInit+0x15c>)
 800094e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000950:	4a4c      	ldr	r2, [pc, #304]	; (8000a84 <HAL_ETH_MspInit+0x15c>)
 8000952:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000956:	6313      	str	r3, [r2, #48]	; 0x30
 8000958:	4b4a      	ldr	r3, [pc, #296]	; (8000a84 <HAL_ETH_MspInit+0x15c>)
 800095a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000960:	623b      	str	r3, [r7, #32]
 8000962:	6a3b      	ldr	r3, [r7, #32]
 8000964:	4b47      	ldr	r3, [pc, #284]	; (8000a84 <HAL_ETH_MspInit+0x15c>)
 8000966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000968:	4a46      	ldr	r2, [pc, #280]	; (8000a84 <HAL_ETH_MspInit+0x15c>)
 800096a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800096e:	6313      	str	r3, [r2, #48]	; 0x30
 8000970:	4b44      	ldr	r3, [pc, #272]	; (8000a84 <HAL_ETH_MspInit+0x15c>)
 8000972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000974:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000978:	61fb      	str	r3, [r7, #28]
 800097a:	69fb      	ldr	r3, [r7, #28]
 800097c:	4b41      	ldr	r3, [pc, #260]	; (8000a84 <HAL_ETH_MspInit+0x15c>)
 800097e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000980:	4a40      	ldr	r2, [pc, #256]	; (8000a84 <HAL_ETH_MspInit+0x15c>)
 8000982:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000986:	6313      	str	r3, [r2, #48]	; 0x30
 8000988:	4b3e      	ldr	r3, [pc, #248]	; (8000a84 <HAL_ETH_MspInit+0x15c>)
 800098a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000990:	61bb      	str	r3, [r7, #24]
 8000992:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000994:	4b3b      	ldr	r3, [pc, #236]	; (8000a84 <HAL_ETH_MspInit+0x15c>)
 8000996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000998:	4a3a      	ldr	r2, [pc, #232]	; (8000a84 <HAL_ETH_MspInit+0x15c>)
 800099a:	f043 0304 	orr.w	r3, r3, #4
 800099e:	6313      	str	r3, [r2, #48]	; 0x30
 80009a0:	4b38      	ldr	r3, [pc, #224]	; (8000a84 <HAL_ETH_MspInit+0x15c>)
 80009a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	617b      	str	r3, [r7, #20]
 80009aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b35      	ldr	r3, [pc, #212]	; (8000a84 <HAL_ETH_MspInit+0x15c>)
 80009ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b0:	4a34      	ldr	r2, [pc, #208]	; (8000a84 <HAL_ETH_MspInit+0x15c>)
 80009b2:	f043 0301 	orr.w	r3, r3, #1
 80009b6:	6313      	str	r3, [r2, #48]	; 0x30
 80009b8:	4b32      	ldr	r3, [pc, #200]	; (8000a84 <HAL_ETH_MspInit+0x15c>)
 80009ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009bc:	f003 0301 	and.w	r3, r3, #1
 80009c0:	613b      	str	r3, [r7, #16]
 80009c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c4:	4b2f      	ldr	r3, [pc, #188]	; (8000a84 <HAL_ETH_MspInit+0x15c>)
 80009c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c8:	4a2e      	ldr	r2, [pc, #184]	; (8000a84 <HAL_ETH_MspInit+0x15c>)
 80009ca:	f043 0302 	orr.w	r3, r3, #2
 80009ce:	6313      	str	r3, [r2, #48]	; 0x30
 80009d0:	4b2c      	ldr	r3, [pc, #176]	; (8000a84 <HAL_ETH_MspInit+0x15c>)
 80009d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d4:	f003 0302 	and.w	r3, r3, #2
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80009dc:	4b29      	ldr	r3, [pc, #164]	; (8000a84 <HAL_ETH_MspInit+0x15c>)
 80009de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e0:	4a28      	ldr	r2, [pc, #160]	; (8000a84 <HAL_ETH_MspInit+0x15c>)
 80009e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009e6:	6313      	str	r3, [r2, #48]	; 0x30
 80009e8:	4b26      	ldr	r3, [pc, #152]	; (8000a84 <HAL_ETH_MspInit+0x15c>)
 80009ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80009f4:	2332      	movs	r3, #50	; 0x32
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f8:	2302      	movs	r3, #2
 80009fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a00:	2303      	movs	r3, #3
 8000a02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a04:	230b      	movs	r3, #11
 8000a06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	481e      	ldr	r0, [pc, #120]	; (8000a88 <HAL_ETH_MspInit+0x160>)
 8000a10:	f000 ff52 	bl	80018b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a14:	2386      	movs	r3, #134	; 0x86
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a20:	2303      	movs	r3, #3
 8000a22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a24:	230b      	movs	r3, #11
 8000a26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4817      	ldr	r0, [pc, #92]	; (8000a8c <HAL_ETH_MspInit+0x164>)
 8000a30:	f000 ff42 	bl	80018b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a42:	2303      	movs	r3, #3
 8000a44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a46:	230b      	movs	r3, #11
 8000a48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4e:	4619      	mov	r1, r3
 8000a50:	480f      	ldr	r0, [pc, #60]	; (8000a90 <HAL_ETH_MspInit+0x168>)
 8000a52:	f000 ff31 	bl	80018b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000a56:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a64:	2303      	movs	r3, #3
 8000a66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a68:	230b      	movs	r3, #11
 8000a6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a70:	4619      	mov	r1, r3
 8000a72:	4808      	ldr	r0, [pc, #32]	; (8000a94 <HAL_ETH_MspInit+0x16c>)
 8000a74:	f000 ff20 	bl	80018b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000a78:	bf00      	nop
 8000a7a:	3738      	adds	r7, #56	; 0x38
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40028000 	.word	0x40028000
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40020800 	.word	0x40020800
 8000a8c:	40020000 	.word	0x40020000
 8000a90:	40020400 	.word	0x40020400
 8000a94:	40021800 	.word	0x40021800

08000a98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b0ae      	sub	sp, #184	; 0xb8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	2290      	movs	r2, #144	; 0x90
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f003 facf 	bl	800405c <memset>
  if(huart->Instance==USART3)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a22      	ldr	r2, [pc, #136]	; (8000b4c <HAL_UART_MspInit+0xb4>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d13c      	bne.n	8000b42 <HAL_UART_MspInit+0xaa>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ac8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000acc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f001 ff26 	bl	8002928 <HAL_RCCEx_PeriphCLKConfig>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ae2:	f7ff fef7 	bl	80008d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ae6:	4b1a      	ldr	r3, [pc, #104]	; (8000b50 <HAL_UART_MspInit+0xb8>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aea:	4a19      	ldr	r2, [pc, #100]	; (8000b50 <HAL_UART_MspInit+0xb8>)
 8000aec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000af0:	6413      	str	r3, [r2, #64]	; 0x40
 8000af2:	4b17      	ldr	r3, [pc, #92]	; (8000b50 <HAL_UART_MspInit+0xb8>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000afa:	613b      	str	r3, [r7, #16]
 8000afc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000afe:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <HAL_UART_MspInit+0xb8>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a13      	ldr	r2, [pc, #76]	; (8000b50 <HAL_UART_MspInit+0xb8>)
 8000b04:	f043 0308 	orr.w	r3, r3, #8
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <HAL_UART_MspInit+0xb8>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0308 	and.w	r3, r3, #8
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b30:	2307      	movs	r3, #7
 8000b32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b36:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4805      	ldr	r0, [pc, #20]	; (8000b54 <HAL_UART_MspInit+0xbc>)
 8000b3e:	f000 febb 	bl	80018b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b42:	bf00      	nop
 8000b44:	37b8      	adds	r7, #184	; 0xb8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40004800 	.word	0x40004800
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40020c00 	.word	0x40020c00

08000b58 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b0ae      	sub	sp, #184	; 0xb8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	2290      	movs	r2, #144	; 0x90
 8000b76:	2100      	movs	r1, #0
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f003 fa6f 	bl	800405c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b86:	d159      	bne.n	8000c3c <HAL_PCD_MspInit+0xe4>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000b88:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000b8c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f001 fec5 	bl	8002928 <HAL_RCCEx_PeriphCLKConfig>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000ba4:	f7ff fe96 	bl	80008d4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba8:	4b26      	ldr	r3, [pc, #152]	; (8000c44 <HAL_PCD_MspInit+0xec>)
 8000baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bac:	4a25      	ldr	r2, [pc, #148]	; (8000c44 <HAL_PCD_MspInit+0xec>)
 8000bae:	f043 0301 	orr.w	r3, r3, #1
 8000bb2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb4:	4b23      	ldr	r3, [pc, #140]	; (8000c44 <HAL_PCD_MspInit+0xec>)
 8000bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb8:	f003 0301 	and.w	r3, r3, #1
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000bc0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000bc4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000bda:	230a      	movs	r3, #10
 8000bdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000be4:	4619      	mov	r1, r3
 8000be6:	4818      	ldr	r0, [pc, #96]	; (8000c48 <HAL_PCD_MspInit+0xf0>)
 8000be8:	f000 fe66 	bl	80018b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000bec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bf0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c00:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c04:	4619      	mov	r1, r3
 8000c06:	4810      	ldr	r0, [pc, #64]	; (8000c48 <HAL_PCD_MspInit+0xf0>)
 8000c08:	f000 fe56 	bl	80018b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c0c:	4b0d      	ldr	r3, [pc, #52]	; (8000c44 <HAL_PCD_MspInit+0xec>)
 8000c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c10:	4a0c      	ldr	r2, [pc, #48]	; (8000c44 <HAL_PCD_MspInit+0xec>)
 8000c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c16:	6353      	str	r3, [r2, #52]	; 0x34
 8000c18:	4b0a      	ldr	r3, [pc, #40]	; (8000c44 <HAL_PCD_MspInit+0xec>)
 8000c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	4b07      	ldr	r3, [pc, #28]	; (8000c44 <HAL_PCD_MspInit+0xec>)
 8000c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c28:	4a06      	ldr	r2, [pc, #24]	; (8000c44 <HAL_PCD_MspInit+0xec>)
 8000c2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c2e:	6453      	str	r3, [r2, #68]	; 0x44
 8000c30:	4b04      	ldr	r3, [pc, #16]	; (8000c44 <HAL_PCD_MspInit+0xec>)
 8000c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000c3c:	bf00      	nop
 8000c3e:	37b8      	adds	r7, #184	; 0xb8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40023800 	.word	0x40023800
 8000c48:	40020000 	.word	0x40020000

08000c4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <NMI_Handler+0x4>

08000c52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c56:	e7fe      	b.n	8000c56 <HardFault_Handler+0x4>

08000c58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <MemManage_Handler+0x4>

08000c5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c62:	e7fe      	b.n	8000c62 <BusFault_Handler+0x4>

08000c64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <UsageFault_Handler+0x4>

08000c6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c98:	f000 f87a 	bl	8000d90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <SystemInit+0x20>)
 8000ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000caa:	4a05      	ldr	r2, [pc, #20]	; (8000cc0 <SystemInit+0x20>)
 8000cac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cfc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cc8:	480d      	ldr	r0, [pc, #52]	; (8000d00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cca:	490e      	ldr	r1, [pc, #56]	; (8000d04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ccc:	4a0e      	ldr	r2, [pc, #56]	; (8000d08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd0:	e002      	b.n	8000cd8 <LoopCopyDataInit>

08000cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd6:	3304      	adds	r3, #4

08000cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cdc:	d3f9      	bcc.n	8000cd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cde:	4a0b      	ldr	r2, [pc, #44]	; (8000d0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ce0:	4c0b      	ldr	r4, [pc, #44]	; (8000d10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce4:	e001      	b.n	8000cea <LoopFillZerobss>

08000ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce8:	3204      	adds	r2, #4

08000cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cec:	d3fb      	bcc.n	8000ce6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cee:	f7ff ffd7 	bl	8000ca0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cf2:	f003 f98f 	bl	8004014 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cf6:	f7ff fc1b 	bl	8000530 <main>
  bx  lr    
 8000cfa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cfc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000d00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d04:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d08:	080040ac 	.word	0x080040ac
  ldr r2, =_sbss
 8000d0c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d10:	20000504 	.word	0x20000504

08000d14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d14:	e7fe      	b.n	8000d14 <ADC_IRQHandler>

08000d16 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d1a:	2003      	movs	r0, #3
 8000d1c:	f000 f92e 	bl	8000f7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d20:	2000      	movs	r0, #0
 8000d22:	f000 f805 	bl	8000d30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d26:	f7ff fddb 	bl	80008e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d2a:	2300      	movs	r3, #0
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d38:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <HAL_InitTick+0x54>)
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <HAL_InitTick+0x58>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	4619      	mov	r1, r3
 8000d42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f000 f93b 	bl	8000fca <HAL_SYSTICK_Config>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e00e      	b.n	8000d7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2b0f      	cmp	r3, #15
 8000d62:	d80a      	bhi.n	8000d7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d64:	2200      	movs	r2, #0
 8000d66:	6879      	ldr	r1, [r7, #4]
 8000d68:	f04f 30ff 	mov.w	r0, #4294967295
 8000d6c:	f000 f911 	bl	8000f92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d70:	4a06      	ldr	r2, [pc, #24]	; (8000d8c <HAL_InitTick+0x5c>)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d76:	2300      	movs	r3, #0
 8000d78:	e000      	b.n	8000d7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20000000 	.word	0x20000000
 8000d88:	20000008 	.word	0x20000008
 8000d8c:	20000004 	.word	0x20000004

08000d90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <HAL_IncTick+0x20>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_IncTick+0x24>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4413      	add	r3, r2
 8000da0:	4a04      	ldr	r2, [pc, #16]	; (8000db4 <HAL_IncTick+0x24>)
 8000da2:	6013      	str	r3, [r2, #0]
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	20000008 	.word	0x20000008
 8000db4:	20000500 	.word	0x20000500

08000db8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return uwTick;
 8000dbc:	4b03      	ldr	r3, [pc, #12]	; (8000dcc <HAL_GetTick+0x14>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	20000500 	.word	0x20000500

08000dd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dd8:	f7ff ffee 	bl	8000db8 <HAL_GetTick>
 8000ddc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000de8:	d005      	beq.n	8000df6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dea:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <HAL_Delay+0x44>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	461a      	mov	r2, r3
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	4413      	add	r3, r2
 8000df4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000df6:	bf00      	nop
 8000df8:	f7ff ffde 	bl	8000db8 <HAL_GetTick>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	68fa      	ldr	r2, [r7, #12]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d8f7      	bhi.n	8000df8 <HAL_Delay+0x28>
  {
  }
}
 8000e08:	bf00      	nop
 8000e0a:	bf00      	nop
 8000e0c:	3710      	adds	r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000008 	.word	0x20000008

08000e18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e28:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <__NVIC_SetPriorityGrouping+0x40>)
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e2e:	68ba      	ldr	r2, [r7, #8]
 8000e30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e34:	4013      	ands	r3, r2
 8000e36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e40:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <__NVIC_SetPriorityGrouping+0x44>)
 8000e42:	4313      	orrs	r3, r2
 8000e44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e46:	4a04      	ldr	r2, [pc, #16]	; (8000e58 <__NVIC_SetPriorityGrouping+0x40>)
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	60d3      	str	r3, [r2, #12]
}
 8000e4c:	bf00      	nop
 8000e4e:	3714      	adds	r7, #20
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000ed00 	.word	0xe000ed00
 8000e5c:	05fa0000 	.word	0x05fa0000

08000e60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e64:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <__NVIC_GetPriorityGrouping+0x18>)
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	0a1b      	lsrs	r3, r3, #8
 8000e6a:	f003 0307 	and.w	r3, r3, #7
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	6039      	str	r1, [r7, #0]
 8000e86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	db0a      	blt.n	8000ea6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	b2da      	uxtb	r2, r3
 8000e94:	490c      	ldr	r1, [pc, #48]	; (8000ec8 <__NVIC_SetPriority+0x4c>)
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	0112      	lsls	r2, r2, #4
 8000e9c:	b2d2      	uxtb	r2, r2
 8000e9e:	440b      	add	r3, r1
 8000ea0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ea4:	e00a      	b.n	8000ebc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	4908      	ldr	r1, [pc, #32]	; (8000ecc <__NVIC_SetPriority+0x50>)
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	f003 030f 	and.w	r3, r3, #15
 8000eb2:	3b04      	subs	r3, #4
 8000eb4:	0112      	lsls	r2, r2, #4
 8000eb6:	b2d2      	uxtb	r2, r2
 8000eb8:	440b      	add	r3, r1
 8000eba:	761a      	strb	r2, [r3, #24]
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000e100 	.word	0xe000e100
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b089      	sub	sp, #36	; 0x24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	f1c3 0307 	rsb	r3, r3, #7
 8000eea:	2b04      	cmp	r3, #4
 8000eec:	bf28      	it	cs
 8000eee:	2304      	movcs	r3, #4
 8000ef0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	3304      	adds	r3, #4
 8000ef6:	2b06      	cmp	r3, #6
 8000ef8:	d902      	bls.n	8000f00 <NVIC_EncodePriority+0x30>
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	3b03      	subs	r3, #3
 8000efe:	e000      	b.n	8000f02 <NVIC_EncodePriority+0x32>
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f04:	f04f 32ff 	mov.w	r2, #4294967295
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43da      	mvns	r2, r3
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	401a      	ands	r2, r3
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f18:	f04f 31ff 	mov.w	r1, #4294967295
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f22:	43d9      	mvns	r1, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f28:	4313      	orrs	r3, r2
         );
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3724      	adds	r7, #36	; 0x24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
	...

08000f38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f48:	d301      	bcc.n	8000f4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e00f      	b.n	8000f6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f4e:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <SysTick_Config+0x40>)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3b01      	subs	r3, #1
 8000f54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f56:	210f      	movs	r1, #15
 8000f58:	f04f 30ff 	mov.w	r0, #4294967295
 8000f5c:	f7ff ff8e 	bl	8000e7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f60:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <SysTick_Config+0x40>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f66:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <SysTick_Config+0x40>)
 8000f68:	2207      	movs	r2, #7
 8000f6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	e000e010 	.word	0xe000e010

08000f7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f7ff ff47 	bl	8000e18 <__NVIC_SetPriorityGrouping>
}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b086      	sub	sp, #24
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	4603      	mov	r3, r0
 8000f9a:	60b9      	str	r1, [r7, #8]
 8000f9c:	607a      	str	r2, [r7, #4]
 8000f9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fa4:	f7ff ff5c 	bl	8000e60 <__NVIC_GetPriorityGrouping>
 8000fa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	68b9      	ldr	r1, [r7, #8]
 8000fae:	6978      	ldr	r0, [r7, #20]
 8000fb0:	f7ff ff8e 	bl	8000ed0 <NVIC_EncodePriority>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fba:	4611      	mov	r1, r2
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff ff5d 	bl	8000e7c <__NVIC_SetPriority>
}
 8000fc2:	bf00      	nop
 8000fc4:	3718      	adds	r7, #24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f7ff ffb0 	bl	8000f38 <SysTick_Config>
 8000fd8:	4603      	mov	r3, r0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b088      	sub	sp, #32
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61fb      	str	r3, [r7, #28]
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8000ff4:	4ba9      	ldr	r3, [pc, #676]	; (800129c <HAL_ETH_Init+0x2b8>)
 8000ff6:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d101      	bne.n	800100a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e181      	b.n	800130e <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001010:	b2db      	uxtb	r3, r3
 8001012:	2b00      	cmp	r3, #0
 8001014:	d106      	bne.n	8001024 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2200      	movs	r2, #0
 800101a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f7ff fc82 	bl	8000928 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001024:	4b9e      	ldr	r3, [pc, #632]	; (80012a0 <HAL_ETH_Init+0x2bc>)
 8001026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001028:	4a9d      	ldr	r2, [pc, #628]	; (80012a0 <HAL_ETH_Init+0x2bc>)
 800102a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800102e:	6453      	str	r3, [r2, #68]	; 0x44
 8001030:	4b9b      	ldr	r3, [pc, #620]	; (80012a0 <HAL_ETH_Init+0x2bc>)
 8001032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001034:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001038:	60bb      	str	r3, [r7, #8]
 800103a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800103c:	4b99      	ldr	r3, [pc, #612]	; (80012a4 <HAL_ETH_Init+0x2c0>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	4a98      	ldr	r2, [pc, #608]	; (80012a4 <HAL_ETH_Init+0x2c0>)
 8001042:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001046:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001048:	4b96      	ldr	r3, [pc, #600]	; (80012a4 <HAL_ETH_Init+0x2c0>)
 800104a:	685a      	ldr	r2, [r3, #4]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6a1b      	ldr	r3, [r3, #32]
 8001050:	4994      	ldr	r1, [pc, #592]	; (80012a4 <HAL_ETH_Init+0x2c0>)
 8001052:	4313      	orrs	r3, r2
 8001054:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f042 0201 	orr.w	r2, r2, #1
 8001068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800106c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800106e:	f7ff fea3 	bl	8000db8 <HAL_GetTick>
 8001072:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001074:	e011      	b.n	800109a <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001076:	f7ff fe9f 	bl	8000db8 <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001084:	d909      	bls.n	800109a <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2203      	movs	r2, #3
 800108a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001096:	2303      	movs	r3, #3
 8001098:	e139      	b.n	800130e <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 0301 	and.w	r3, r3, #1
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d1e4      	bne.n	8001076 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	691b      	ldr	r3, [r3, #16]
 80010b2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	f023 031c 	bic.w	r3, r3, #28
 80010ba:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80010bc:	f001 fc00 	bl	80028c0 <HAL_RCC_GetHCLKFreq>
 80010c0:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	4a78      	ldr	r2, [pc, #480]	; (80012a8 <HAL_ETH_Init+0x2c4>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d908      	bls.n	80010dc <HAL_ETH_Init+0xf8>
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	4a77      	ldr	r2, [pc, #476]	; (80012ac <HAL_ETH_Init+0x2c8>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d804      	bhi.n	80010dc <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	f043 0308 	orr.w	r3, r3, #8
 80010d8:	61fb      	str	r3, [r7, #28]
 80010da:	e027      	b.n	800112c <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	4a73      	ldr	r2, [pc, #460]	; (80012ac <HAL_ETH_Init+0x2c8>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d908      	bls.n	80010f6 <HAL_ETH_Init+0x112>
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	4a6d      	ldr	r2, [pc, #436]	; (800129c <HAL_ETH_Init+0x2b8>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d204      	bcs.n	80010f6 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	f043 030c 	orr.w	r3, r3, #12
 80010f2:	61fb      	str	r3, [r7, #28]
 80010f4:	e01a      	b.n	800112c <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	4a68      	ldr	r2, [pc, #416]	; (800129c <HAL_ETH_Init+0x2b8>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d303      	bcc.n	8001106 <HAL_ETH_Init+0x122>
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	4a6b      	ldr	r2, [pc, #428]	; (80012b0 <HAL_ETH_Init+0x2cc>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d911      	bls.n	800112a <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	4a69      	ldr	r2, [pc, #420]	; (80012b0 <HAL_ETH_Init+0x2cc>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d908      	bls.n	8001120 <HAL_ETH_Init+0x13c>
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	4a68      	ldr	r2, [pc, #416]	; (80012b4 <HAL_ETH_Init+0x2d0>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d804      	bhi.n	8001120 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	f043 0304 	orr.w	r3, r3, #4
 800111c:	61fb      	str	r3, [r7, #28]
 800111e:	e005      	b.n	800112c <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	f043 0310 	orr.w	r3, r3, #16
 8001126:	61fb      	str	r3, [r7, #28]
 8001128:	e000      	b.n	800112c <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800112a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	69fa      	ldr	r2, [r7, #28]
 8001132:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001134:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001138:	2100      	movs	r1, #0
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f000 f954 	bl	80013e8 <HAL_ETH_WritePHYRegister>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d00b      	beq.n	800115e <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800114a:	6939      	ldr	r1, [r7, #16]
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f000 f9b1 	bl	80014b4 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2201      	movs	r2, #1
 8001156:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e0d7      	b.n	800130e <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800115e:	20ff      	movs	r0, #255	; 0xff
 8001160:	f7ff fe36 	bl	8000dd0 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	2b00      	cmp	r3, #0
 800116a:	f000 80a5 	beq.w	80012b8 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800116e:	f7ff fe23 	bl	8000db8 <HAL_GetTick>
 8001172:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001174:	f107 030c 	add.w	r3, r7, #12
 8001178:	461a      	mov	r2, r3
 800117a:	2101      	movs	r1, #1
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f000 f8cb 	bl	8001318 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001182:	f7ff fe19 	bl	8000db8 <HAL_GetTick>
 8001186:	4602      	mov	r2, r0
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001190:	4293      	cmp	r3, r2
 8001192:	d90f      	bls.n	80011b4 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001198:	6939      	ldr	r1, [r7, #16]
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f000 f98a 	bl	80014b4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2201      	movs	r2, #1
 80011a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2200      	movs	r2, #0
 80011ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80011b0:	2303      	movs	r3, #3
 80011b2:	e0ac      	b.n	800130e <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f003 0304 	and.w	r3, r3, #4
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d0da      	beq.n	8001174 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80011be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011c2:	2100      	movs	r1, #0
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f000 f90f 	bl	80013e8 <HAL_ETH_WritePHYRegister>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d00b      	beq.n	80011e8 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80011d4:	6939      	ldr	r1, [r7, #16]
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f000 f96c 	bl	80014b4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2201      	movs	r2, #1
 80011e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80011e4:	2301      	movs	r3, #1
 80011e6:	e092      	b.n	800130e <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80011e8:	f7ff fde6 	bl	8000db8 <HAL_GetTick>
 80011ec:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80011ee:	f107 030c 	add.w	r3, r7, #12
 80011f2:	461a      	mov	r2, r3
 80011f4:	2101      	movs	r1, #1
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f000 f88e 	bl	8001318 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80011fc:	f7ff fddc 	bl	8000db8 <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	f241 3288 	movw	r2, #5000	; 0x1388
 800120a:	4293      	cmp	r3, r2
 800120c:	d90f      	bls.n	800122e <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001212:	6939      	ldr	r1, [r7, #16]
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f000 f94d 	bl	80014b4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2201      	movs	r2, #1
 800121e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e06f      	b.n	800130e <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	f003 0320 	and.w	r3, r3, #32
 8001234:	2b00      	cmp	r3, #0
 8001236:	d0da      	beq.n	80011ee <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001238:	f107 030c 	add.w	r3, r7, #12
 800123c:	461a      	mov	r2, r3
 800123e:	2110      	movs	r1, #16
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f000 f869 	bl	8001318 <HAL_ETH_ReadPHYRegister>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d00b      	beq.n	8001264 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001250:	6939      	ldr	r1, [r7, #16]
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f000 f92e 	bl	80014b4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2201      	movs	r2, #1
 800125c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001260:	2301      	movs	r3, #1
 8001262:	e054      	b.n	800130e <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	2b00      	cmp	r3, #0
 800126c:	d004      	beq.n	8001278 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	e002      	b.n	800127e <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	2b00      	cmp	r3, #0
 8001286:	d003      	beq.n	8001290 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	e035      	b.n	80012fc <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	e030      	b.n	80012fc <HAL_ETH_Init+0x318>
 800129a:	bf00      	nop
 800129c:	03938700 	.word	0x03938700
 80012a0:	40023800 	.word	0x40023800
 80012a4:	40013800 	.word	0x40013800
 80012a8:	01312cff 	.word	0x01312cff
 80012ac:	02160ebf 	.word	0x02160ebf
 80012b0:	05f5e0ff 	.word	0x05f5e0ff
 80012b4:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	08db      	lsrs	r3, r3, #3
 80012be:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	085b      	lsrs	r3, r3, #1
 80012c6:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80012c8:	4313      	orrs	r3, r2
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	461a      	mov	r2, r3
 80012ce:	2100      	movs	r1, #0
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f000 f889 	bl	80013e8 <HAL_ETH_WritePHYRegister>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d00b      	beq.n	80012f4 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80012e0:	6939      	ldr	r1, [r7, #16]
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f000 f8e6 	bl	80014b4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2201      	movs	r2, #1
 80012ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e00c      	b.n	800130e <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80012f4:	f640 70ff 	movw	r0, #4095	; 0xfff
 80012f8:	f7ff fd6a 	bl	8000dd0 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80012fc:	6939      	ldr	r1, [r7, #16]
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f000 f8d8 	bl	80014b4 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2201      	movs	r2, #1
 8001308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3720      	adds	r7, #32
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop

08001318 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	460b      	mov	r3, r1
 8001322:	607a      	str	r2, [r7, #4]
 8001324:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b82      	cmp	r3, #130	; 0x82
 8001338:	d101      	bne.n	800133e <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800133a:	2302      	movs	r3, #2
 800133c:	e050      	b.n	80013e0 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2282      	movs	r2, #130	; 0x82
 8001342:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	691b      	ldr	r3, [r3, #16]
 800134c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	f003 031c 	and.w	r3, r3, #28
 8001354:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	8a1b      	ldrh	r3, [r3, #16]
 800135a:	02db      	lsls	r3, r3, #11
 800135c:	b29b      	uxth	r3, r3
 800135e:	697a      	ldr	r2, [r7, #20]
 8001360:	4313      	orrs	r3, r2
 8001362:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001364:	897b      	ldrh	r3, [r7, #10]
 8001366:	019b      	lsls	r3, r3, #6
 8001368:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800136c:	697a      	ldr	r2, [r7, #20]
 800136e:	4313      	orrs	r3, r2
 8001370:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	f023 0302 	bic.w	r3, r3, #2
 8001378:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	697a      	ldr	r2, [r7, #20]
 8001388:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800138a:	f7ff fd15 	bl	8000db8 <HAL_GetTick>
 800138e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001390:	e015      	b.n	80013be <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001392:	f7ff fd11 	bl	8000db8 <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013a0:	d309      	bcc.n	80013b6 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	2201      	movs	r2, #1
 80013a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e014      	b.n	80013e0 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	691b      	ldr	r3, [r3, #16]
 80013bc:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d1e4      	bne.n	8001392 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	695b      	ldr	r3, [r3, #20]
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	461a      	mov	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2201      	movs	r2, #1
 80013da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80013de:	2300      	movs	r3, #0
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3718      	adds	r7, #24
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	460b      	mov	r3, r1
 80013f2:	607a      	str	r2, [r7, #4]
 80013f4:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001404:	b2db      	uxtb	r3, r3
 8001406:	2b42      	cmp	r3, #66	; 0x42
 8001408:	d101      	bne.n	800140e <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800140a:	2302      	movs	r3, #2
 800140c:	e04e      	b.n	80014ac <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	2242      	movs	r2, #66	; 0x42
 8001412:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	691b      	ldr	r3, [r3, #16]
 800141c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	f003 031c 	and.w	r3, r3, #28
 8001424:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	8a1b      	ldrh	r3, [r3, #16]
 800142a:	02db      	lsls	r3, r3, #11
 800142c:	b29b      	uxth	r3, r3
 800142e:	697a      	ldr	r2, [r7, #20]
 8001430:	4313      	orrs	r3, r2
 8001432:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001434:	897b      	ldrh	r3, [r7, #10]
 8001436:	019b      	lsls	r3, r3, #6
 8001438:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800143c:	697a      	ldr	r2, [r7, #20]
 800143e:	4313      	orrs	r3, r2
 8001440:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	f043 0302 	orr.w	r3, r3, #2
 8001448:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	b29a      	uxth	r2, r3
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	697a      	ldr	r2, [r7, #20]
 8001462:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001464:	f7ff fca8 	bl	8000db8 <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800146a:	e015      	b.n	8001498 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800146c:	f7ff fca4 	bl	8000db8 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800147a:	d309      	bcc.n	8001490 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2201      	movs	r2, #1
 8001480:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2200      	movs	r2, #0
 8001488:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e00d      	b.n	80014ac <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	691b      	ldr	r3, [r3, #16]
 8001496:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1e4      	bne.n	800146c <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	2201      	movs	r2, #1
 80014a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3718      	adds	r7, #24
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b0b0      	sub	sp, #192	; 0xc0
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 80014be:	2300      	movs	r3, #0
 80014c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d007      	beq.n	80014da <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014d0:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80014da:	2300      	movs	r3, #0
 80014dc:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80014de:	2300      	movs	r3, #0
 80014e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80014e2:	2300      	movs	r3, #0
 80014e4:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80014e6:	2300      	movs	r3, #0
 80014e8:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80014ea:	2300      	movs	r3, #0
 80014ec:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80014ee:	2300      	movs	r3, #0
 80014f0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d103      	bne.n	8001502 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80014fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014fe:	663b      	str	r3, [r7, #96]	; 0x60
 8001500:	e001      	b.n	8001506 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001502:	2300      	movs	r3, #0
 8001504:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001506:	f44f 7300 	mov.w	r3, #512	; 0x200
 800150a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800150c:	2300      	movs	r3, #0
 800150e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001510:	2300      	movs	r3, #0
 8001512:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001514:	2300      	movs	r3, #0
 8001516:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001518:	2300      	movs	r3, #0
 800151a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800151c:	2300      	movs	r3, #0
 800151e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001520:	2340      	movs	r3, #64	; 0x40
 8001522:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001524:	2300      	movs	r3, #0
 8001526:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800152a:	2300      	movs	r3, #0
 800152c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001530:	2300      	movs	r3, #0
 8001532:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001536:	2300      	movs	r3, #0
 8001538:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800153c:	2300      	movs	r3, #0
 800153e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8001542:	2300      	movs	r3, #0
 8001544:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8001548:	2300      	movs	r3, #0
 800154a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 800154e:	2300      	movs	r3, #0
 8001550:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001554:	2380      	movs	r3, #128	; 0x80
 8001556:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800155a:	2300      	movs	r3, #0
 800155c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001560:	2300      	movs	r3, #0
 8001562:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001566:	2300      	movs	r3, #0
 8001568:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800156c:	2300      	movs	r3, #0
 800156e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001572:	2300      	movs	r3, #0
 8001574:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8001578:	2300      	movs	r3, #0
 800157a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001588:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800158c:	4bab      	ldr	r3, [pc, #684]	; (800183c <ETH_MACDMAConfig+0x388>)
 800158e:	4013      	ands	r3, r2
 8001590:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001594:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001598:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800159a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 800159c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800159e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80015a0:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80015a6:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80015a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80015aa:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80015ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80015ae:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80015b4:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80015b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80015b8:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80015ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80015bc:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80015be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80015c0:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80015c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80015c4:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80015c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80015c8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80015ca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80015ce:	4313      	orrs	r3, r2
 80015d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80015dc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015e8:	2001      	movs	r0, #1
 80015ea:	f7ff fbf1 	bl	8000dd0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80015f6:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80015f8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80015fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80015fc:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80015fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001600:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001602:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001606:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001608:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 800160c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800160e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001612:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001614:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001618:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 800161c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001624:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001626:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001632:	2001      	movs	r0, #1
 8001634:	f7ff fbcc 	bl	8000dd0 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001640:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800164a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001654:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001660:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001664:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001668:	4013      	ands	r3, r2
 800166a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800166e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001672:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001674:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001678:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800167a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800167e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001680:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001684:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001686:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800168a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 800168c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001690:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001692:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001696:	4313      	orrs	r3, r2
 8001698:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80016a4:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80016b0:	2001      	movs	r0, #1
 80016b2:	f7ff fb8d 	bl	8000dd0 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80016be:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80016c0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80016c4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	430a      	orrs	r2, r1
 80016ce:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80016da:	2001      	movs	r0, #1
 80016dc:	f7ff fb78 	bl	8000dd0 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80016e8:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80016ea:	2300      	movs	r3, #0
 80016ec:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80016ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016f2:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80016f4:	2300      	movs	r3, #0
 80016f6:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80016f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80016fc:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80016fe:	2300      	movs	r3, #0
 8001700:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001702:	2300      	movs	r3, #0
 8001704:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001706:	2300      	movs	r3, #0
 8001708:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800170a:	2300      	movs	r3, #0
 800170c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800170e:	2304      	movs	r3, #4
 8001710:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001712:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001716:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001718:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800171c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800171e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001722:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001724:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001728:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800172a:	2380      	movs	r3, #128	; 0x80
 800172c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 800172e:	2300      	movs	r3, #0
 8001730:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001732:	2300      	movs	r3, #0
 8001734:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	f241 0318 	movw	r3, #4120	; 0x1018
 800173e:	4413      	add	r3, r2
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8001746:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800174a:	4b3d      	ldr	r3, [pc, #244]	; (8001840 <ETH_MACDMAConfig+0x38c>)
 800174c:	4013      	ands	r3, r2
 800174e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001752:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001754:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001756:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001758:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800175a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800175c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800175e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001760:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001762:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001764:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001766:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001768:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800176a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800176c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800176e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001770:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001772:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001774:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001778:	4313      	orrs	r3, r2
 800177a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	f241 0318 	movw	r3, #4120	; 0x1018
 8001786:	4413      	add	r3, r2
 8001788:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800178c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	f241 0318 	movw	r3, #4120	; 0x1018
 8001796:	4413      	add	r3, r2
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800179e:	2001      	movs	r0, #1
 80017a0:	f7ff fb16 	bl	8000dd0 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	f241 0318 	movw	r3, #4120	; 0x1018
 80017ac:	4413      	add	r3, r2
 80017ae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80017b2:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80017b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80017b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80017b8:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80017ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80017bc:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80017be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80017c0:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80017c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80017c4:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80017c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017c8:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80017ca:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80017cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80017ce:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80017d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017dc:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80017ec:	2001      	movs	r0, #1
 80017ee:	f7ff faef 	bl	8000dd0 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017fa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80017fe:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d10d      	bne.n	8001824 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	f241 031c 	movw	r3, #4124	; 0x101c
 8001810:	4413      	add	r3, r2
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	6811      	ldr	r1, [r2, #0]
 8001818:	4a0a      	ldr	r2, [pc, #40]	; (8001844 <ETH_MACDMAConfig+0x390>)
 800181a:	431a      	orrs	r2, r3
 800181c:	f241 031c 	movw	r3, #4124	; 0x101c
 8001820:	440b      	add	r3, r1
 8001822:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	461a      	mov	r2, r3
 800182a:	2100      	movs	r1, #0
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f000 f80b 	bl	8001848 <ETH_MACAddressConfig>
}
 8001832:	bf00      	nop
 8001834:	37c0      	adds	r7, #192	; 0xc0
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	ff20810f 	.word	0xff20810f
 8001840:	f8de3f23 	.word	0xf8de3f23
 8001844:	00010040 	.word	0x00010040

08001848 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001848:	b480      	push	{r7}
 800184a:	b087      	sub	sp, #28
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3305      	adds	r3, #5
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	021b      	lsls	r3, r3, #8
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	3204      	adds	r2, #4
 8001860:	7812      	ldrb	r2, [r2, #0]
 8001862:	4313      	orrs	r3, r2
 8001864:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8001866:	68ba      	ldr	r2, [r7, #8]
 8001868:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <ETH_MACAddressConfig+0x68>)
 800186a:	4413      	add	r3, r2
 800186c:	461a      	mov	r2, r3
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	3303      	adds	r3, #3
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	061a      	lsls	r2, r3, #24
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	3302      	adds	r3, #2
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	041b      	lsls	r3, r3, #16
 8001882:	431a      	orrs	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	3301      	adds	r3, #1
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	021b      	lsls	r3, r3, #8
 800188c:	4313      	orrs	r3, r2
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	7812      	ldrb	r2, [r2, #0]
 8001892:	4313      	orrs	r3, r2
 8001894:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8001896:	68ba      	ldr	r2, [r7, #8]
 8001898:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <ETH_MACAddressConfig+0x6c>)
 800189a:	4413      	add	r3, r2
 800189c:	461a      	mov	r2, r3
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	6013      	str	r3, [r2, #0]
}
 80018a2:	bf00      	nop
 80018a4:	371c      	adds	r7, #28
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	40028040 	.word	0x40028040
 80018b4:	40028044 	.word	0x40028044

080018b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b089      	sub	sp, #36	; 0x24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80018c2:	2300      	movs	r3, #0
 80018c4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80018c6:	2300      	movs	r3, #0
 80018c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80018ca:	2300      	movs	r3, #0
 80018cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80018ce:	2300      	movs	r3, #0
 80018d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80018d2:	2300      	movs	r3, #0
 80018d4:	61fb      	str	r3, [r7, #28]
 80018d6:	e175      	b.n	8001bc4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80018d8:	2201      	movs	r2, #1
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	697a      	ldr	r2, [r7, #20]
 80018e8:	4013      	ands	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	f040 8164 	bne.w	8001bbe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f003 0303 	and.w	r3, r3, #3
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d005      	beq.n	800190e <HAL_GPIO_Init+0x56>
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f003 0303 	and.w	r3, r3, #3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d130      	bne.n	8001970 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	2203      	movs	r2, #3
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43db      	mvns	r3, r3
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	4013      	ands	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	68da      	ldr	r2, [r3, #12]
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	4313      	orrs	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001944:	2201      	movs	r2, #1
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	43db      	mvns	r3, r3
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	4013      	ands	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	091b      	lsrs	r3, r3, #4
 800195a:	f003 0201 	and.w	r2, r3, #1
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4313      	orrs	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 0303 	and.w	r3, r3, #3
 8001978:	2b03      	cmp	r3, #3
 800197a:	d017      	beq.n	80019ac <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	2203      	movs	r2, #3
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	43db      	mvns	r3, r3
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4013      	ands	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f003 0303 	and.w	r3, r3, #3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d123      	bne.n	8001a00 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	08da      	lsrs	r2, r3, #3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3208      	adds	r2, #8
 80019c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	220f      	movs	r2, #15
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4013      	ands	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	691a      	ldr	r2, [r3, #16]
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	08da      	lsrs	r2, r3, #3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	3208      	adds	r2, #8
 80019fa:	69b9      	ldr	r1, [r7, #24]
 80019fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	2203      	movs	r2, #3
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4013      	ands	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f003 0203 	and.w	r2, r3, #3
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	f000 80be 	beq.w	8001bbe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a42:	4b66      	ldr	r3, [pc, #408]	; (8001bdc <HAL_GPIO_Init+0x324>)
 8001a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a46:	4a65      	ldr	r2, [pc, #404]	; (8001bdc <HAL_GPIO_Init+0x324>)
 8001a48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a4e:	4b63      	ldr	r3, [pc, #396]	; (8001bdc <HAL_GPIO_Init+0x324>)
 8001a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001a5a:	4a61      	ldr	r2, [pc, #388]	; (8001be0 <HAL_GPIO_Init+0x328>)
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	089b      	lsrs	r3, r3, #2
 8001a60:	3302      	adds	r3, #2
 8001a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	f003 0303 	and.w	r3, r3, #3
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	220f      	movs	r2, #15
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43db      	mvns	r3, r3
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a58      	ldr	r2, [pc, #352]	; (8001be4 <HAL_GPIO_Init+0x32c>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d037      	beq.n	8001af6 <HAL_GPIO_Init+0x23e>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a57      	ldr	r2, [pc, #348]	; (8001be8 <HAL_GPIO_Init+0x330>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d031      	beq.n	8001af2 <HAL_GPIO_Init+0x23a>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a56      	ldr	r2, [pc, #344]	; (8001bec <HAL_GPIO_Init+0x334>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d02b      	beq.n	8001aee <HAL_GPIO_Init+0x236>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a55      	ldr	r2, [pc, #340]	; (8001bf0 <HAL_GPIO_Init+0x338>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d025      	beq.n	8001aea <HAL_GPIO_Init+0x232>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a54      	ldr	r2, [pc, #336]	; (8001bf4 <HAL_GPIO_Init+0x33c>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d01f      	beq.n	8001ae6 <HAL_GPIO_Init+0x22e>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a53      	ldr	r2, [pc, #332]	; (8001bf8 <HAL_GPIO_Init+0x340>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d019      	beq.n	8001ae2 <HAL_GPIO_Init+0x22a>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a52      	ldr	r2, [pc, #328]	; (8001bfc <HAL_GPIO_Init+0x344>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d013      	beq.n	8001ade <HAL_GPIO_Init+0x226>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a51      	ldr	r2, [pc, #324]	; (8001c00 <HAL_GPIO_Init+0x348>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d00d      	beq.n	8001ada <HAL_GPIO_Init+0x222>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a50      	ldr	r2, [pc, #320]	; (8001c04 <HAL_GPIO_Init+0x34c>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d007      	beq.n	8001ad6 <HAL_GPIO_Init+0x21e>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a4f      	ldr	r2, [pc, #316]	; (8001c08 <HAL_GPIO_Init+0x350>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d101      	bne.n	8001ad2 <HAL_GPIO_Init+0x21a>
 8001ace:	2309      	movs	r3, #9
 8001ad0:	e012      	b.n	8001af8 <HAL_GPIO_Init+0x240>
 8001ad2:	230a      	movs	r3, #10
 8001ad4:	e010      	b.n	8001af8 <HAL_GPIO_Init+0x240>
 8001ad6:	2308      	movs	r3, #8
 8001ad8:	e00e      	b.n	8001af8 <HAL_GPIO_Init+0x240>
 8001ada:	2307      	movs	r3, #7
 8001adc:	e00c      	b.n	8001af8 <HAL_GPIO_Init+0x240>
 8001ade:	2306      	movs	r3, #6
 8001ae0:	e00a      	b.n	8001af8 <HAL_GPIO_Init+0x240>
 8001ae2:	2305      	movs	r3, #5
 8001ae4:	e008      	b.n	8001af8 <HAL_GPIO_Init+0x240>
 8001ae6:	2304      	movs	r3, #4
 8001ae8:	e006      	b.n	8001af8 <HAL_GPIO_Init+0x240>
 8001aea:	2303      	movs	r3, #3
 8001aec:	e004      	b.n	8001af8 <HAL_GPIO_Init+0x240>
 8001aee:	2302      	movs	r3, #2
 8001af0:	e002      	b.n	8001af8 <HAL_GPIO_Init+0x240>
 8001af2:	2301      	movs	r3, #1
 8001af4:	e000      	b.n	8001af8 <HAL_GPIO_Init+0x240>
 8001af6:	2300      	movs	r3, #0
 8001af8:	69fa      	ldr	r2, [r7, #28]
 8001afa:	f002 0203 	and.w	r2, r2, #3
 8001afe:	0092      	lsls	r2, r2, #2
 8001b00:	4093      	lsls	r3, r2
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b08:	4935      	ldr	r1, [pc, #212]	; (8001be0 <HAL_GPIO_Init+0x328>)
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	089b      	lsrs	r3, r3, #2
 8001b0e:	3302      	adds	r3, #2
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b16:	4b3d      	ldr	r3, [pc, #244]	; (8001c0c <HAL_GPIO_Init+0x354>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4013      	ands	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d003      	beq.n	8001b3a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b3a:	4a34      	ldr	r2, [pc, #208]	; (8001c0c <HAL_GPIO_Init+0x354>)
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b40:	4b32      	ldr	r3, [pc, #200]	; (8001c0c <HAL_GPIO_Init+0x354>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d003      	beq.n	8001b64 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b64:	4a29      	ldr	r2, [pc, #164]	; (8001c0c <HAL_GPIO_Init+0x354>)
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b6a:	4b28      	ldr	r3, [pc, #160]	; (8001c0c <HAL_GPIO_Init+0x354>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	43db      	mvns	r3, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4013      	ands	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b8e:	4a1f      	ldr	r2, [pc, #124]	; (8001c0c <HAL_GPIO_Init+0x354>)
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b94:	4b1d      	ldr	r3, [pc, #116]	; (8001c0c <HAL_GPIO_Init+0x354>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d003      	beq.n	8001bb8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bb8:	4a14      	ldr	r2, [pc, #80]	; (8001c0c <HAL_GPIO_Init+0x354>)
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	61fb      	str	r3, [r7, #28]
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	2b0f      	cmp	r3, #15
 8001bc8:	f67f ae86 	bls.w	80018d8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001bcc:	bf00      	nop
 8001bce:	bf00      	nop
 8001bd0:	3724      	adds	r7, #36	; 0x24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	40013800 	.word	0x40013800
 8001be4:	40020000 	.word	0x40020000
 8001be8:	40020400 	.word	0x40020400
 8001bec:	40020800 	.word	0x40020800
 8001bf0:	40020c00 	.word	0x40020c00
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	40021400 	.word	0x40021400
 8001bfc:	40021800 	.word	0x40021800
 8001c00:	40021c00 	.word	0x40021c00
 8001c04:	40022000 	.word	0x40022000
 8001c08:	40022400 	.word	0x40022400
 8001c0c:	40013c00 	.word	0x40013c00

08001c10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	460b      	mov	r3, r1
 8001c1a:	807b      	strh	r3, [r7, #2]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c20:	787b      	ldrb	r3, [r7, #1]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d003      	beq.n	8001c2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c26:	887a      	ldrh	r2, [r7, #2]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001c2c:	e003      	b.n	8001c36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001c2e:	887b      	ldrh	r3, [r7, #2]
 8001c30:	041a      	lsls	r2, r3, #16
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	619a      	str	r2, [r3, #24]
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b085      	sub	sp, #20
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c54:	887a      	ldrh	r2, [r7, #2]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	041a      	lsls	r2, r3, #16
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	43d9      	mvns	r1, r3
 8001c60:	887b      	ldrh	r3, [r7, #2]
 8001c62:	400b      	ands	r3, r1
 8001c64:	431a      	orrs	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	619a      	str	r2, [r3, #24]
}
 8001c6a:	bf00      	nop
 8001c6c:	3714      	adds	r7, #20
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c78:	b08f      	sub	sp, #60	; 0x3c
 8001c7a:	af0a      	add	r7, sp, #40	; 0x28
 8001c7c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d101      	bne.n	8001c88 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e116      	b.n	8001eb6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d106      	bne.n	8001ca8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7fe ff58 	bl	8000b58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2203      	movs	r2, #3
 8001cac:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d102      	bne.n	8001cc2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f001 ff0e 	bl	8003ae8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	603b      	str	r3, [r7, #0]
 8001cd2:	687e      	ldr	r6, [r7, #4]
 8001cd4:	466d      	mov	r5, sp
 8001cd6:	f106 0410 	add.w	r4, r6, #16
 8001cda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ce0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ce2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ce6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cea:	1d33      	adds	r3, r6, #4
 8001cec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cee:	6838      	ldr	r0, [r7, #0]
 8001cf0:	f001 fea2 	bl	8003a38 <USB_CoreInit>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d005      	beq.n	8001d06 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2202      	movs	r2, #2
 8001cfe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e0d7      	b.n	8001eb6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f001 fefc 	bl	8003b0a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d12:	2300      	movs	r3, #0
 8001d14:	73fb      	strb	r3, [r7, #15]
 8001d16:	e04a      	b.n	8001dae <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d18:	7bfa      	ldrb	r2, [r7, #15]
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	1a9b      	subs	r3, r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	440b      	add	r3, r1
 8001d26:	333d      	adds	r3, #61	; 0x3d
 8001d28:	2201      	movs	r2, #1
 8001d2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d2c:	7bfa      	ldrb	r2, [r7, #15]
 8001d2e:	6879      	ldr	r1, [r7, #4]
 8001d30:	4613      	mov	r3, r2
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	1a9b      	subs	r3, r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	440b      	add	r3, r1
 8001d3a:	333c      	adds	r3, #60	; 0x3c
 8001d3c:	7bfa      	ldrb	r2, [r7, #15]
 8001d3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d40:	7bfa      	ldrb	r2, [r7, #15]
 8001d42:	7bfb      	ldrb	r3, [r7, #15]
 8001d44:	b298      	uxth	r0, r3
 8001d46:	6879      	ldr	r1, [r7, #4]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	1a9b      	subs	r3, r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	440b      	add	r3, r1
 8001d52:	3342      	adds	r3, #66	; 0x42
 8001d54:	4602      	mov	r2, r0
 8001d56:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d58:	7bfa      	ldrb	r2, [r7, #15]
 8001d5a:	6879      	ldr	r1, [r7, #4]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	1a9b      	subs	r3, r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	440b      	add	r3, r1
 8001d66:	333f      	adds	r3, #63	; 0x3f
 8001d68:	2200      	movs	r2, #0
 8001d6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d6c:	7bfa      	ldrb	r2, [r7, #15]
 8001d6e:	6879      	ldr	r1, [r7, #4]
 8001d70:	4613      	mov	r3, r2
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	1a9b      	subs	r3, r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	440b      	add	r3, r1
 8001d7a:	3344      	adds	r3, #68	; 0x44
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d80:	7bfa      	ldrb	r2, [r7, #15]
 8001d82:	6879      	ldr	r1, [r7, #4]
 8001d84:	4613      	mov	r3, r2
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	1a9b      	subs	r3, r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	440b      	add	r3, r1
 8001d8e:	3348      	adds	r3, #72	; 0x48
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d94:	7bfa      	ldrb	r2, [r7, #15]
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	1a9b      	subs	r3, r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	440b      	add	r3, r1
 8001da2:	3350      	adds	r3, #80	; 0x50
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001da8:	7bfb      	ldrb	r3, [r7, #15]
 8001daa:	3301      	adds	r3, #1
 8001dac:	73fb      	strb	r3, [r7, #15]
 8001dae:	7bfa      	ldrb	r2, [r7, #15]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d3af      	bcc.n	8001d18 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001db8:	2300      	movs	r3, #0
 8001dba:	73fb      	strb	r3, [r7, #15]
 8001dbc:	e044      	b.n	8001e48 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001dbe:	7bfa      	ldrb	r2, [r7, #15]
 8001dc0:	6879      	ldr	r1, [r7, #4]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	1a9b      	subs	r3, r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	440b      	add	r3, r1
 8001dcc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001dd4:	7bfa      	ldrb	r2, [r7, #15]
 8001dd6:	6879      	ldr	r1, [r7, #4]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	1a9b      	subs	r3, r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	440b      	add	r3, r1
 8001de2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001de6:	7bfa      	ldrb	r2, [r7, #15]
 8001de8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001dea:	7bfa      	ldrb	r2, [r7, #15]
 8001dec:	6879      	ldr	r1, [r7, #4]
 8001dee:	4613      	mov	r3, r2
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	1a9b      	subs	r3, r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	440b      	add	r3, r1
 8001df8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e00:	7bfa      	ldrb	r2, [r7, #15]
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	4613      	mov	r3, r2
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	1a9b      	subs	r3, r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e16:	7bfa      	ldrb	r2, [r7, #15]
 8001e18:	6879      	ldr	r1, [r7, #4]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	1a9b      	subs	r3, r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	440b      	add	r3, r1
 8001e24:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e2c:	7bfa      	ldrb	r2, [r7, #15]
 8001e2e:	6879      	ldr	r1, [r7, #4]
 8001e30:	4613      	mov	r3, r2
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	1a9b      	subs	r3, r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	440b      	add	r3, r1
 8001e3a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e42:	7bfb      	ldrb	r3, [r7, #15]
 8001e44:	3301      	adds	r3, #1
 8001e46:	73fb      	strb	r3, [r7, #15]
 8001e48:	7bfa      	ldrb	r2, [r7, #15]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d3b5      	bcc.n	8001dbe <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	603b      	str	r3, [r7, #0]
 8001e58:	687e      	ldr	r6, [r7, #4]
 8001e5a:	466d      	mov	r5, sp
 8001e5c:	f106 0410 	add.w	r4, r6, #16
 8001e60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e68:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e6c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e70:	1d33      	adds	r3, r6, #4
 8001e72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e74:	6838      	ldr	r0, [r7, #0]
 8001e76:	f001 fe95 	bl	8003ba4 <USB_DevInit>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d005      	beq.n	8001e8c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2202      	movs	r2, #2
 8001e84:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e014      	b.n	8001eb6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d102      	bne.n	8001eaa <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 f80b 	bl	8001ec0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f002 f84f 	bl	8003f52 <USB_DevDisconnect>

  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3714      	adds	r7, #20
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001ec0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001eee:	4b05      	ldr	r3, [pc, #20]	; (8001f04 <HAL_PCDEx_ActivateLPM+0x44>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	10000003 	.word	0x10000003

08001f08 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f0c:	4b05      	ldr	r3, [pc, #20]	; (8001f24 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a04      	ldr	r2, [pc, #16]	; (8001f24 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f16:	6013      	str	r3, [r2, #0]
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	40007000 	.word	0x40007000

08001f28 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f32:	4b23      	ldr	r3, [pc, #140]	; (8001fc0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	4a22      	ldr	r2, [pc, #136]	; (8001fc0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f3e:	4b20      	ldr	r3, [pc, #128]	; (8001fc0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f46:	603b      	str	r3, [r7, #0]
 8001f48:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001f4a:	4b1e      	ldr	r3, [pc, #120]	; (8001fc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a1d      	ldr	r2, [pc, #116]	; (8001fc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f54:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f56:	f7fe ff2f 	bl	8000db8 <HAL_GetTick>
 8001f5a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f5c:	e009      	b.n	8001f72 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f5e:	f7fe ff2b 	bl	8000db8 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f6c:	d901      	bls.n	8001f72 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e022      	b.n	8001fb8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f72:	4b14      	ldr	r3, [pc, #80]	; (8001fc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f7e:	d1ee      	bne.n	8001f5e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001f80:	4b10      	ldr	r3, [pc, #64]	; (8001fc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a0f      	ldr	r2, [pc, #60]	; (8001fc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f8a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f8c:	f7fe ff14 	bl	8000db8 <HAL_GetTick>
 8001f90:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f92:	e009      	b.n	8001fa8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f94:	f7fe ff10 	bl	8000db8 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fa2:	d901      	bls.n	8001fa8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e007      	b.n	8001fb8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001fa8:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001fb4:	d1ee      	bne.n	8001f94 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	40007000 	.word	0x40007000

08001fc8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e29b      	b.n	8002516 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f000 8087 	beq.w	80020fa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fec:	4b96      	ldr	r3, [pc, #600]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f003 030c 	and.w	r3, r3, #12
 8001ff4:	2b04      	cmp	r3, #4
 8001ff6:	d00c      	beq.n	8002012 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ff8:	4b93      	ldr	r3, [pc, #588]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f003 030c 	and.w	r3, r3, #12
 8002000:	2b08      	cmp	r3, #8
 8002002:	d112      	bne.n	800202a <HAL_RCC_OscConfig+0x62>
 8002004:	4b90      	ldr	r3, [pc, #576]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800200c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002010:	d10b      	bne.n	800202a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002012:	4b8d      	ldr	r3, [pc, #564]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d06c      	beq.n	80020f8 <HAL_RCC_OscConfig+0x130>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d168      	bne.n	80020f8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e275      	b.n	8002516 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002032:	d106      	bne.n	8002042 <HAL_RCC_OscConfig+0x7a>
 8002034:	4b84      	ldr	r3, [pc, #528]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a83      	ldr	r2, [pc, #524]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 800203a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800203e:	6013      	str	r3, [r2, #0]
 8002040:	e02e      	b.n	80020a0 <HAL_RCC_OscConfig+0xd8>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d10c      	bne.n	8002064 <HAL_RCC_OscConfig+0x9c>
 800204a:	4b7f      	ldr	r3, [pc, #508]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a7e      	ldr	r2, [pc, #504]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 8002050:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002054:	6013      	str	r3, [r2, #0]
 8002056:	4b7c      	ldr	r3, [pc, #496]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a7b      	ldr	r2, [pc, #492]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 800205c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002060:	6013      	str	r3, [r2, #0]
 8002062:	e01d      	b.n	80020a0 <HAL_RCC_OscConfig+0xd8>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800206c:	d10c      	bne.n	8002088 <HAL_RCC_OscConfig+0xc0>
 800206e:	4b76      	ldr	r3, [pc, #472]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a75      	ldr	r2, [pc, #468]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 8002074:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002078:	6013      	str	r3, [r2, #0]
 800207a:	4b73      	ldr	r3, [pc, #460]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a72      	ldr	r2, [pc, #456]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 8002080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002084:	6013      	str	r3, [r2, #0]
 8002086:	e00b      	b.n	80020a0 <HAL_RCC_OscConfig+0xd8>
 8002088:	4b6f      	ldr	r3, [pc, #444]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a6e      	ldr	r2, [pc, #440]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 800208e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002092:	6013      	str	r3, [r2, #0]
 8002094:	4b6c      	ldr	r3, [pc, #432]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a6b      	ldr	r2, [pc, #428]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 800209a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800209e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d013      	beq.n	80020d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a8:	f7fe fe86 	bl	8000db8 <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020b0:	f7fe fe82 	bl	8000db8 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b64      	cmp	r3, #100	; 0x64
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e229      	b.n	8002516 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020c2:	4b61      	ldr	r3, [pc, #388]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d0f0      	beq.n	80020b0 <HAL_RCC_OscConfig+0xe8>
 80020ce:	e014      	b.n	80020fa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d0:	f7fe fe72 	bl	8000db8 <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020d8:	f7fe fe6e 	bl	8000db8 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b64      	cmp	r3, #100	; 0x64
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e215      	b.n	8002516 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ea:	4b57      	ldr	r3, [pc, #348]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1f0      	bne.n	80020d8 <HAL_RCC_OscConfig+0x110>
 80020f6:	e000      	b.n	80020fa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d069      	beq.n	80021da <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002106:	4b50      	ldr	r3, [pc, #320]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 030c 	and.w	r3, r3, #12
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00b      	beq.n	800212a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002112:	4b4d      	ldr	r3, [pc, #308]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 030c 	and.w	r3, r3, #12
 800211a:	2b08      	cmp	r3, #8
 800211c:	d11c      	bne.n	8002158 <HAL_RCC_OscConfig+0x190>
 800211e:	4b4a      	ldr	r3, [pc, #296]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d116      	bne.n	8002158 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800212a:	4b47      	ldr	r3, [pc, #284]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d005      	beq.n	8002142 <HAL_RCC_OscConfig+0x17a>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d001      	beq.n	8002142 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e1e9      	b.n	8002516 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002142:	4b41      	ldr	r3, [pc, #260]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	493d      	ldr	r1, [pc, #244]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 8002152:	4313      	orrs	r3, r2
 8002154:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002156:	e040      	b.n	80021da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d023      	beq.n	80021a8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002160:	4b39      	ldr	r3, [pc, #228]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a38      	ldr	r2, [pc, #224]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 8002166:	f043 0301 	orr.w	r3, r3, #1
 800216a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800216c:	f7fe fe24 	bl	8000db8 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002174:	f7fe fe20 	bl	8000db8 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e1c7      	b.n	8002516 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002186:	4b30      	ldr	r3, [pc, #192]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0f0      	beq.n	8002174 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002192:	4b2d      	ldr	r3, [pc, #180]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	4929      	ldr	r1, [pc, #164]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	600b      	str	r3, [r1, #0]
 80021a6:	e018      	b.n	80021da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021a8:	4b27      	ldr	r3, [pc, #156]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a26      	ldr	r2, [pc, #152]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 80021ae:	f023 0301 	bic.w	r3, r3, #1
 80021b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b4:	f7fe fe00 	bl	8000db8 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021bc:	f7fe fdfc 	bl	8000db8 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e1a3      	b.n	8002516 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ce:	4b1e      	ldr	r3, [pc, #120]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1f0      	bne.n	80021bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0308 	and.w	r3, r3, #8
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d038      	beq.n	8002258 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d019      	beq.n	8002222 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ee:	4b16      	ldr	r3, [pc, #88]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 80021f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021f2:	4a15      	ldr	r2, [pc, #84]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 80021f4:	f043 0301 	orr.w	r3, r3, #1
 80021f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021fa:	f7fe fddd 	bl	8000db8 <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002200:	e008      	b.n	8002214 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002202:	f7fe fdd9 	bl	8000db8 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e180      	b.n	8002516 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002214:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 8002216:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d0f0      	beq.n	8002202 <HAL_RCC_OscConfig+0x23a>
 8002220:	e01a      	b.n	8002258 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002222:	4b09      	ldr	r3, [pc, #36]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 8002224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002226:	4a08      	ldr	r2, [pc, #32]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 8002228:	f023 0301 	bic.w	r3, r3, #1
 800222c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800222e:	f7fe fdc3 	bl	8000db8 <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002234:	e00a      	b.n	800224c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002236:	f7fe fdbf 	bl	8000db8 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d903      	bls.n	800224c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e166      	b.n	8002516 <HAL_RCC_OscConfig+0x54e>
 8002248:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800224c:	4b92      	ldr	r3, [pc, #584]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 800224e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1ee      	bne.n	8002236 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	f000 80a4 	beq.w	80023ae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002266:	4b8c      	ldr	r3, [pc, #560]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d10d      	bne.n	800228e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002272:	4b89      	ldr	r3, [pc, #548]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	4a88      	ldr	r2, [pc, #544]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 8002278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800227c:	6413      	str	r3, [r2, #64]	; 0x40
 800227e:	4b86      	ldr	r3, [pc, #536]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002286:	60bb      	str	r3, [r7, #8]
 8002288:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800228a:	2301      	movs	r3, #1
 800228c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800228e:	4b83      	ldr	r3, [pc, #524]	; (800249c <HAL_RCC_OscConfig+0x4d4>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002296:	2b00      	cmp	r3, #0
 8002298:	d118      	bne.n	80022cc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800229a:	4b80      	ldr	r3, [pc, #512]	; (800249c <HAL_RCC_OscConfig+0x4d4>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a7f      	ldr	r2, [pc, #508]	; (800249c <HAL_RCC_OscConfig+0x4d4>)
 80022a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022a6:	f7fe fd87 	bl	8000db8 <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022ac:	e008      	b.n	80022c0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ae:	f7fe fd83 	bl	8000db8 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b64      	cmp	r3, #100	; 0x64
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e12a      	b.n	8002516 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022c0:	4b76      	ldr	r3, [pc, #472]	; (800249c <HAL_RCC_OscConfig+0x4d4>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d0f0      	beq.n	80022ae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d106      	bne.n	80022e2 <HAL_RCC_OscConfig+0x31a>
 80022d4:	4b70      	ldr	r3, [pc, #448]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 80022d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d8:	4a6f      	ldr	r2, [pc, #444]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 80022da:	f043 0301 	orr.w	r3, r3, #1
 80022de:	6713      	str	r3, [r2, #112]	; 0x70
 80022e0:	e02d      	b.n	800233e <HAL_RCC_OscConfig+0x376>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10c      	bne.n	8002304 <HAL_RCC_OscConfig+0x33c>
 80022ea:	4b6b      	ldr	r3, [pc, #428]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 80022ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ee:	4a6a      	ldr	r2, [pc, #424]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 80022f0:	f023 0301 	bic.w	r3, r3, #1
 80022f4:	6713      	str	r3, [r2, #112]	; 0x70
 80022f6:	4b68      	ldr	r3, [pc, #416]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 80022f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022fa:	4a67      	ldr	r2, [pc, #412]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 80022fc:	f023 0304 	bic.w	r3, r3, #4
 8002300:	6713      	str	r3, [r2, #112]	; 0x70
 8002302:	e01c      	b.n	800233e <HAL_RCC_OscConfig+0x376>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	2b05      	cmp	r3, #5
 800230a:	d10c      	bne.n	8002326 <HAL_RCC_OscConfig+0x35e>
 800230c:	4b62      	ldr	r3, [pc, #392]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 800230e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002310:	4a61      	ldr	r2, [pc, #388]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 8002312:	f043 0304 	orr.w	r3, r3, #4
 8002316:	6713      	str	r3, [r2, #112]	; 0x70
 8002318:	4b5f      	ldr	r3, [pc, #380]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 800231a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231c:	4a5e      	ldr	r2, [pc, #376]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 800231e:	f043 0301 	orr.w	r3, r3, #1
 8002322:	6713      	str	r3, [r2, #112]	; 0x70
 8002324:	e00b      	b.n	800233e <HAL_RCC_OscConfig+0x376>
 8002326:	4b5c      	ldr	r3, [pc, #368]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 8002328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800232a:	4a5b      	ldr	r2, [pc, #364]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 800232c:	f023 0301 	bic.w	r3, r3, #1
 8002330:	6713      	str	r3, [r2, #112]	; 0x70
 8002332:	4b59      	ldr	r3, [pc, #356]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 8002334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002336:	4a58      	ldr	r2, [pc, #352]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 8002338:	f023 0304 	bic.w	r3, r3, #4
 800233c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d015      	beq.n	8002372 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002346:	f7fe fd37 	bl	8000db8 <HAL_GetTick>
 800234a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800234c:	e00a      	b.n	8002364 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800234e:	f7fe fd33 	bl	8000db8 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	f241 3288 	movw	r2, #5000	; 0x1388
 800235c:	4293      	cmp	r3, r2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e0d8      	b.n	8002516 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002364:	4b4c      	ldr	r3, [pc, #304]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 8002366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d0ee      	beq.n	800234e <HAL_RCC_OscConfig+0x386>
 8002370:	e014      	b.n	800239c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002372:	f7fe fd21 	bl	8000db8 <HAL_GetTick>
 8002376:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002378:	e00a      	b.n	8002390 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800237a:	f7fe fd1d 	bl	8000db8 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	f241 3288 	movw	r2, #5000	; 0x1388
 8002388:	4293      	cmp	r3, r2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e0c2      	b.n	8002516 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002390:	4b41      	ldr	r3, [pc, #260]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 8002392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1ee      	bne.n	800237a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800239c:	7dfb      	ldrb	r3, [r7, #23]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d105      	bne.n	80023ae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023a2:	4b3d      	ldr	r3, [pc, #244]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	4a3c      	ldr	r2, [pc, #240]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 80023a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f000 80ae 	beq.w	8002514 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023b8:	4b37      	ldr	r3, [pc, #220]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 030c 	and.w	r3, r3, #12
 80023c0:	2b08      	cmp	r3, #8
 80023c2:	d06d      	beq.n	80024a0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d14b      	bne.n	8002464 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023cc:	4b32      	ldr	r3, [pc, #200]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a31      	ldr	r2, [pc, #196]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 80023d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d8:	f7fe fcee 	bl	8000db8 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023e0:	f7fe fcea 	bl	8000db8 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e091      	b.n	8002516 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023f2:	4b29      	ldr	r3, [pc, #164]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1f0      	bne.n	80023e0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	69da      	ldr	r2, [r3, #28]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	431a      	orrs	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240c:	019b      	lsls	r3, r3, #6
 800240e:	431a      	orrs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002414:	085b      	lsrs	r3, r3, #1
 8002416:	3b01      	subs	r3, #1
 8002418:	041b      	lsls	r3, r3, #16
 800241a:	431a      	orrs	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002420:	061b      	lsls	r3, r3, #24
 8002422:	431a      	orrs	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002428:	071b      	lsls	r3, r3, #28
 800242a:	491b      	ldr	r1, [pc, #108]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 800242c:	4313      	orrs	r3, r2
 800242e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002430:	4b19      	ldr	r3, [pc, #100]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a18      	ldr	r2, [pc, #96]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 8002436:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800243a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243c:	f7fe fcbc 	bl	8000db8 <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002444:	f7fe fcb8 	bl	8000db8 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e05f      	b.n	8002516 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002456:	4b10      	ldr	r3, [pc, #64]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d0f0      	beq.n	8002444 <HAL_RCC_OscConfig+0x47c>
 8002462:	e057      	b.n	8002514 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002464:	4b0c      	ldr	r3, [pc, #48]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a0b      	ldr	r2, [pc, #44]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 800246a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800246e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002470:	f7fe fca2 	bl	8000db8 <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002478:	f7fe fc9e 	bl	8000db8 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e045      	b.n	8002516 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800248a:	4b03      	ldr	r3, [pc, #12]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1f0      	bne.n	8002478 <HAL_RCC_OscConfig+0x4b0>
 8002496:	e03d      	b.n	8002514 <HAL_RCC_OscConfig+0x54c>
 8002498:	40023800 	.word	0x40023800
 800249c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80024a0:	4b1f      	ldr	r3, [pc, #124]	; (8002520 <HAL_RCC_OscConfig+0x558>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d030      	beq.n	8002510 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d129      	bne.n	8002510 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d122      	bne.n	8002510 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024d0:	4013      	ands	r3, r2
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024d6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024d8:	4293      	cmp	r3, r2
 80024da:	d119      	bne.n	8002510 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e6:	085b      	lsrs	r3, r3, #1
 80024e8:	3b01      	subs	r3, #1
 80024ea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d10f      	bne.n	8002510 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d107      	bne.n	8002510 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800250c:	429a      	cmp	r2, r3
 800250e:	d001      	beq.n	8002514 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e000      	b.n	8002516 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3718      	adds	r7, #24
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	40023800 	.word	0x40023800

08002524 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800252e:	2300      	movs	r3, #0
 8002530:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d101      	bne.n	800253c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e0d0      	b.n	80026de <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800253c:	4b6a      	ldr	r3, [pc, #424]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 030f 	and.w	r3, r3, #15
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	429a      	cmp	r2, r3
 8002548:	d910      	bls.n	800256c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800254a:	4b67      	ldr	r3, [pc, #412]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f023 020f 	bic.w	r2, r3, #15
 8002552:	4965      	ldr	r1, [pc, #404]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	4313      	orrs	r3, r2
 8002558:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800255a:	4b63      	ldr	r3, [pc, #396]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 030f 	and.w	r3, r3, #15
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	429a      	cmp	r2, r3
 8002566:	d001      	beq.n	800256c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e0b8      	b.n	80026de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d020      	beq.n	80025ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0304 	and.w	r3, r3, #4
 8002580:	2b00      	cmp	r3, #0
 8002582:	d005      	beq.n	8002590 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002584:	4b59      	ldr	r3, [pc, #356]	; (80026ec <HAL_RCC_ClockConfig+0x1c8>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	4a58      	ldr	r2, [pc, #352]	; (80026ec <HAL_RCC_ClockConfig+0x1c8>)
 800258a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800258e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0308 	and.w	r3, r3, #8
 8002598:	2b00      	cmp	r3, #0
 800259a:	d005      	beq.n	80025a8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800259c:	4b53      	ldr	r3, [pc, #332]	; (80026ec <HAL_RCC_ClockConfig+0x1c8>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	4a52      	ldr	r2, [pc, #328]	; (80026ec <HAL_RCC_ClockConfig+0x1c8>)
 80025a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025a8:	4b50      	ldr	r3, [pc, #320]	; (80026ec <HAL_RCC_ClockConfig+0x1c8>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	494d      	ldr	r1, [pc, #308]	; (80026ec <HAL_RCC_ClockConfig+0x1c8>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d040      	beq.n	8002648 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d107      	bne.n	80025de <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ce:	4b47      	ldr	r3, [pc, #284]	; (80026ec <HAL_RCC_ClockConfig+0x1c8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d115      	bne.n	8002606 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e07f      	b.n	80026de <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d107      	bne.n	80025f6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025e6:	4b41      	ldr	r3, [pc, #260]	; (80026ec <HAL_RCC_ClockConfig+0x1c8>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d109      	bne.n	8002606 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e073      	b.n	80026de <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f6:	4b3d      	ldr	r3, [pc, #244]	; (80026ec <HAL_RCC_ClockConfig+0x1c8>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e06b      	b.n	80026de <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002606:	4b39      	ldr	r3, [pc, #228]	; (80026ec <HAL_RCC_ClockConfig+0x1c8>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f023 0203 	bic.w	r2, r3, #3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	4936      	ldr	r1, [pc, #216]	; (80026ec <HAL_RCC_ClockConfig+0x1c8>)
 8002614:	4313      	orrs	r3, r2
 8002616:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002618:	f7fe fbce 	bl	8000db8 <HAL_GetTick>
 800261c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800261e:	e00a      	b.n	8002636 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002620:	f7fe fbca 	bl	8000db8 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	f241 3288 	movw	r2, #5000	; 0x1388
 800262e:	4293      	cmp	r3, r2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e053      	b.n	80026de <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002636:	4b2d      	ldr	r3, [pc, #180]	; (80026ec <HAL_RCC_ClockConfig+0x1c8>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 020c 	and.w	r2, r3, #12
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	429a      	cmp	r2, r3
 8002646:	d1eb      	bne.n	8002620 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002648:	4b27      	ldr	r3, [pc, #156]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 030f 	and.w	r3, r3, #15
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	429a      	cmp	r2, r3
 8002654:	d210      	bcs.n	8002678 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002656:	4b24      	ldr	r3, [pc, #144]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f023 020f 	bic.w	r2, r3, #15
 800265e:	4922      	ldr	r1, [pc, #136]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	4313      	orrs	r3, r2
 8002664:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002666:	4b20      	ldr	r3, [pc, #128]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 030f 	and.w	r3, r3, #15
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	429a      	cmp	r2, r3
 8002672:	d001      	beq.n	8002678 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e032      	b.n	80026de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b00      	cmp	r3, #0
 8002682:	d008      	beq.n	8002696 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002684:	4b19      	ldr	r3, [pc, #100]	; (80026ec <HAL_RCC_ClockConfig+0x1c8>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	4916      	ldr	r1, [pc, #88]	; (80026ec <HAL_RCC_ClockConfig+0x1c8>)
 8002692:	4313      	orrs	r3, r2
 8002694:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0308 	and.w	r3, r3, #8
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d009      	beq.n	80026b6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026a2:	4b12      	ldr	r3, [pc, #72]	; (80026ec <HAL_RCC_ClockConfig+0x1c8>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	490e      	ldr	r1, [pc, #56]	; (80026ec <HAL_RCC_ClockConfig+0x1c8>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026b6:	f000 f821 	bl	80026fc <HAL_RCC_GetSysClockFreq>
 80026ba:	4602      	mov	r2, r0
 80026bc:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <HAL_RCC_ClockConfig+0x1c8>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	091b      	lsrs	r3, r3, #4
 80026c2:	f003 030f 	and.w	r3, r3, #15
 80026c6:	490a      	ldr	r1, [pc, #40]	; (80026f0 <HAL_RCC_ClockConfig+0x1cc>)
 80026c8:	5ccb      	ldrb	r3, [r1, r3]
 80026ca:	fa22 f303 	lsr.w	r3, r2, r3
 80026ce:	4a09      	ldr	r2, [pc, #36]	; (80026f4 <HAL_RCC_ClockConfig+0x1d0>)
 80026d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026d2:	4b09      	ldr	r3, [pc, #36]	; (80026f8 <HAL_RCC_ClockConfig+0x1d4>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fe fb2a 	bl	8000d30 <HAL_InitTick>

  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40023c00 	.word	0x40023c00
 80026ec:	40023800 	.word	0x40023800
 80026f0:	08004084 	.word	0x08004084
 80026f4:	20000000 	.word	0x20000000
 80026f8:	20000004 	.word	0x20000004

080026fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002700:	b084      	sub	sp, #16
 8002702:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002704:	2300      	movs	r3, #0
 8002706:	607b      	str	r3, [r7, #4]
 8002708:	2300      	movs	r3, #0
 800270a:	60fb      	str	r3, [r7, #12]
 800270c:	2300      	movs	r3, #0
 800270e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002710:	2300      	movs	r3, #0
 8002712:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002714:	4b67      	ldr	r3, [pc, #412]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f003 030c 	and.w	r3, r3, #12
 800271c:	2b08      	cmp	r3, #8
 800271e:	d00d      	beq.n	800273c <HAL_RCC_GetSysClockFreq+0x40>
 8002720:	2b08      	cmp	r3, #8
 8002722:	f200 80bd 	bhi.w	80028a0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002726:	2b00      	cmp	r3, #0
 8002728:	d002      	beq.n	8002730 <HAL_RCC_GetSysClockFreq+0x34>
 800272a:	2b04      	cmp	r3, #4
 800272c:	d003      	beq.n	8002736 <HAL_RCC_GetSysClockFreq+0x3a>
 800272e:	e0b7      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002730:	4b61      	ldr	r3, [pc, #388]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002732:	60bb      	str	r3, [r7, #8]
      break;
 8002734:	e0b7      	b.n	80028a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002736:	4b61      	ldr	r3, [pc, #388]	; (80028bc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002738:	60bb      	str	r3, [r7, #8]
      break;
 800273a:	e0b4      	b.n	80028a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800273c:	4b5d      	ldr	r3, [pc, #372]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002744:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002746:	4b5b      	ldr	r3, [pc, #364]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d04d      	beq.n	80027ee <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002752:	4b58      	ldr	r3, [pc, #352]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	099b      	lsrs	r3, r3, #6
 8002758:	461a      	mov	r2, r3
 800275a:	f04f 0300 	mov.w	r3, #0
 800275e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002762:	f04f 0100 	mov.w	r1, #0
 8002766:	ea02 0800 	and.w	r8, r2, r0
 800276a:	ea03 0901 	and.w	r9, r3, r1
 800276e:	4640      	mov	r0, r8
 8002770:	4649      	mov	r1, r9
 8002772:	f04f 0200 	mov.w	r2, #0
 8002776:	f04f 0300 	mov.w	r3, #0
 800277a:	014b      	lsls	r3, r1, #5
 800277c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002780:	0142      	lsls	r2, r0, #5
 8002782:	4610      	mov	r0, r2
 8002784:	4619      	mov	r1, r3
 8002786:	ebb0 0008 	subs.w	r0, r0, r8
 800278a:	eb61 0109 	sbc.w	r1, r1, r9
 800278e:	f04f 0200 	mov.w	r2, #0
 8002792:	f04f 0300 	mov.w	r3, #0
 8002796:	018b      	lsls	r3, r1, #6
 8002798:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800279c:	0182      	lsls	r2, r0, #6
 800279e:	1a12      	subs	r2, r2, r0
 80027a0:	eb63 0301 	sbc.w	r3, r3, r1
 80027a4:	f04f 0000 	mov.w	r0, #0
 80027a8:	f04f 0100 	mov.w	r1, #0
 80027ac:	00d9      	lsls	r1, r3, #3
 80027ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80027b2:	00d0      	lsls	r0, r2, #3
 80027b4:	4602      	mov	r2, r0
 80027b6:	460b      	mov	r3, r1
 80027b8:	eb12 0208 	adds.w	r2, r2, r8
 80027bc:	eb43 0309 	adc.w	r3, r3, r9
 80027c0:	f04f 0000 	mov.w	r0, #0
 80027c4:	f04f 0100 	mov.w	r1, #0
 80027c8:	0259      	lsls	r1, r3, #9
 80027ca:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80027ce:	0250      	lsls	r0, r2, #9
 80027d0:	4602      	mov	r2, r0
 80027d2:	460b      	mov	r3, r1
 80027d4:	4610      	mov	r0, r2
 80027d6:	4619      	mov	r1, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	461a      	mov	r2, r3
 80027dc:	f04f 0300 	mov.w	r3, #0
 80027e0:	f7fd fd2a 	bl	8000238 <__aeabi_uldivmod>
 80027e4:	4602      	mov	r2, r0
 80027e6:	460b      	mov	r3, r1
 80027e8:	4613      	mov	r3, r2
 80027ea:	60fb      	str	r3, [r7, #12]
 80027ec:	e04a      	b.n	8002884 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027ee:	4b31      	ldr	r3, [pc, #196]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	099b      	lsrs	r3, r3, #6
 80027f4:	461a      	mov	r2, r3
 80027f6:	f04f 0300 	mov.w	r3, #0
 80027fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80027fe:	f04f 0100 	mov.w	r1, #0
 8002802:	ea02 0400 	and.w	r4, r2, r0
 8002806:	ea03 0501 	and.w	r5, r3, r1
 800280a:	4620      	mov	r0, r4
 800280c:	4629      	mov	r1, r5
 800280e:	f04f 0200 	mov.w	r2, #0
 8002812:	f04f 0300 	mov.w	r3, #0
 8002816:	014b      	lsls	r3, r1, #5
 8002818:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800281c:	0142      	lsls	r2, r0, #5
 800281e:	4610      	mov	r0, r2
 8002820:	4619      	mov	r1, r3
 8002822:	1b00      	subs	r0, r0, r4
 8002824:	eb61 0105 	sbc.w	r1, r1, r5
 8002828:	f04f 0200 	mov.w	r2, #0
 800282c:	f04f 0300 	mov.w	r3, #0
 8002830:	018b      	lsls	r3, r1, #6
 8002832:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002836:	0182      	lsls	r2, r0, #6
 8002838:	1a12      	subs	r2, r2, r0
 800283a:	eb63 0301 	sbc.w	r3, r3, r1
 800283e:	f04f 0000 	mov.w	r0, #0
 8002842:	f04f 0100 	mov.w	r1, #0
 8002846:	00d9      	lsls	r1, r3, #3
 8002848:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800284c:	00d0      	lsls	r0, r2, #3
 800284e:	4602      	mov	r2, r0
 8002850:	460b      	mov	r3, r1
 8002852:	1912      	adds	r2, r2, r4
 8002854:	eb45 0303 	adc.w	r3, r5, r3
 8002858:	f04f 0000 	mov.w	r0, #0
 800285c:	f04f 0100 	mov.w	r1, #0
 8002860:	0299      	lsls	r1, r3, #10
 8002862:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002866:	0290      	lsls	r0, r2, #10
 8002868:	4602      	mov	r2, r0
 800286a:	460b      	mov	r3, r1
 800286c:	4610      	mov	r0, r2
 800286e:	4619      	mov	r1, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	461a      	mov	r2, r3
 8002874:	f04f 0300 	mov.w	r3, #0
 8002878:	f7fd fcde 	bl	8000238 <__aeabi_uldivmod>
 800287c:	4602      	mov	r2, r0
 800287e:	460b      	mov	r3, r1
 8002880:	4613      	mov	r3, r2
 8002882:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002884:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	0c1b      	lsrs	r3, r3, #16
 800288a:	f003 0303 	and.w	r3, r3, #3
 800288e:	3301      	adds	r3, #1
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	fbb2 f3f3 	udiv	r3, r2, r3
 800289c:	60bb      	str	r3, [r7, #8]
      break;
 800289e:	e002      	b.n	80028a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028a0:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80028a2:	60bb      	str	r3, [r7, #8]
      break;
 80028a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028a6:	68bb      	ldr	r3, [r7, #8]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80028b2:	bf00      	nop
 80028b4:	40023800 	.word	0x40023800
 80028b8:	00f42400 	.word	0x00f42400
 80028bc:	007a1200 	.word	0x007a1200

080028c0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028c4:	4b03      	ldr	r3, [pc, #12]	; (80028d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80028c6:	681b      	ldr	r3, [r3, #0]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	20000000 	.word	0x20000000

080028d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028dc:	f7ff fff0 	bl	80028c0 <HAL_RCC_GetHCLKFreq>
 80028e0:	4602      	mov	r2, r0
 80028e2:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	0a9b      	lsrs	r3, r3, #10
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	4903      	ldr	r1, [pc, #12]	; (80028fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80028ee:	5ccb      	ldrb	r3, [r1, r3]
 80028f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40023800 	.word	0x40023800
 80028fc:	08004094 	.word	0x08004094

08002900 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002904:	f7ff ffdc 	bl	80028c0 <HAL_RCC_GetHCLKFreq>
 8002908:	4602      	mov	r2, r0
 800290a:	4b05      	ldr	r3, [pc, #20]	; (8002920 <HAL_RCC_GetPCLK2Freq+0x20>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	0b5b      	lsrs	r3, r3, #13
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	4903      	ldr	r1, [pc, #12]	; (8002924 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002916:	5ccb      	ldrb	r3, [r1, r3]
 8002918:	fa22 f303 	lsr.w	r3, r2, r3
}
 800291c:	4618      	mov	r0, r3
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40023800 	.word	0x40023800
 8002924:	08004094 	.word	0x08004094

08002928 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b088      	sub	sp, #32
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002930:	2300      	movs	r3, #0
 8002932:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002934:	2300      	movs	r3, #0
 8002936:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002938:	2300      	movs	r3, #0
 800293a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800293c:	2300      	movs	r3, #0
 800293e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002940:	2300      	movs	r3, #0
 8002942:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	2b00      	cmp	r3, #0
 800294e:	d012      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002950:	4b69      	ldr	r3, [pc, #420]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	4a68      	ldr	r2, [pc, #416]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002956:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800295a:	6093      	str	r3, [r2, #8]
 800295c:	4b66      	ldr	r3, [pc, #408]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002964:	4964      	ldr	r1, [pc, #400]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002966:	4313      	orrs	r3, r2
 8002968:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002972:	2301      	movs	r3, #1
 8002974:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d017      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002982:	4b5d      	ldr	r3, [pc, #372]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002984:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002988:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002990:	4959      	ldr	r1, [pc, #356]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002992:	4313      	orrs	r3, r2
 8002994:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800299c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029a0:	d101      	bne.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80029a2:	2301      	movs	r3, #1
 80029a4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80029ae:	2301      	movs	r3, #1
 80029b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d017      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80029be:	4b4e      	ldr	r3, [pc, #312]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029c4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029cc:	494a      	ldr	r1, [pc, #296]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029dc:	d101      	bne.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80029de:	2301      	movs	r3, #1
 80029e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80029ea:	2301      	movs	r3, #1
 80029ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80029fa:	2301      	movs	r3, #1
 80029fc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0320 	and.w	r3, r3, #32
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f000 808b 	beq.w	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a0c:	4b3a      	ldr	r3, [pc, #232]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a10:	4a39      	ldr	r2, [pc, #228]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a16:	6413      	str	r3, [r2, #64]	; 0x40
 8002a18:	4b37      	ldr	r3, [pc, #220]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a20:	60bb      	str	r3, [r7, #8]
 8002a22:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a24:	4b35      	ldr	r3, [pc, #212]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a34      	ldr	r2, [pc, #208]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a30:	f7fe f9c2 	bl	8000db8 <HAL_GetTick>
 8002a34:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002a36:	e008      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a38:	f7fe f9be 	bl	8000db8 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b64      	cmp	r3, #100	; 0x64
 8002a44:	d901      	bls.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e38f      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002a4a:	4b2c      	ldr	r3, [pc, #176]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d0f0      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a56:	4b28      	ldr	r3, [pc, #160]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a5e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d035      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d02e      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a74:	4b20      	ldr	r3, [pc, #128]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a7c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a7e:	4b1e      	ldr	r3, [pc, #120]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a82:	4a1d      	ldr	r2, [pc, #116]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a88:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a8a:	4b1b      	ldr	r3, [pc, #108]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8e:	4a1a      	ldr	r2, [pc, #104]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a94:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002a96:	4a18      	ldr	r2, [pc, #96]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002a9c:	4b16      	ldr	r3, [pc, #88]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d114      	bne.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa8:	f7fe f986 	bl	8000db8 <HAL_GetTick>
 8002aac:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aae:	e00a      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ab0:	f7fe f982 	bl	8000db8 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e351      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac6:	4b0c      	ldr	r3, [pc, #48]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d0ee      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ada:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ade:	d111      	bne.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002ae0:	4b05      	ldr	r3, [pc, #20]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002aec:	4b04      	ldr	r3, [pc, #16]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002aee:	400b      	ands	r3, r1
 8002af0:	4901      	ldr	r1, [pc, #4]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	608b      	str	r3, [r1, #8]
 8002af6:	e00b      	b.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002af8:	40023800 	.word	0x40023800
 8002afc:	40007000 	.word	0x40007000
 8002b00:	0ffffcff 	.word	0x0ffffcff
 8002b04:	4bb3      	ldr	r3, [pc, #716]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	4ab2      	ldr	r2, [pc, #712]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b0a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002b0e:	6093      	str	r3, [r2, #8]
 8002b10:	4bb0      	ldr	r3, [pc, #704]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b1c:	49ad      	ldr	r1, [pc, #692]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0310 	and.w	r3, r3, #16
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d010      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002b2e:	4ba9      	ldr	r3, [pc, #676]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b34:	4aa7      	ldr	r2, [pc, #668]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b3a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002b3e:	4ba5      	ldr	r3, [pc, #660]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b40:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b48:	49a2      	ldr	r1, [pc, #648]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00a      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b5c:	4b9d      	ldr	r3, [pc, #628]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b62:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b6a:	499a      	ldr	r1, [pc, #616]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00a      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b7e:	4b95      	ldr	r3, [pc, #596]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b84:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b8c:	4991      	ldr	r1, [pc, #580]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00a      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ba0:	4b8c      	ldr	r3, [pc, #560]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bae:	4989      	ldr	r1, [pc, #548]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00a      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002bc2:	4b84      	ldr	r3, [pc, #528]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd0:	4980      	ldr	r1, [pc, #512]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d00a      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002be4:	4b7b      	ldr	r3, [pc, #492]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bea:	f023 0203 	bic.w	r2, r3, #3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf2:	4978      	ldr	r1, [pc, #480]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00a      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c06:	4b73      	ldr	r3, [pc, #460]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c0c:	f023 020c 	bic.w	r2, r3, #12
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c14:	496f      	ldr	r1, [pc, #444]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00a      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c28:	4b6a      	ldr	r3, [pc, #424]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c36:	4967      	ldr	r1, [pc, #412]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00a      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c4a:	4b62      	ldr	r3, [pc, #392]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c50:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c58:	495e      	ldr	r1, [pc, #376]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00a      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c6c:	4b59      	ldr	r3, [pc, #356]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c72:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c7a:	4956      	ldr	r1, [pc, #344]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00a      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002c8e:	4b51      	ldr	r3, [pc, #324]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c94:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c9c:	494d      	ldr	r1, [pc, #308]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00a      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002cb0:	4b48      	ldr	r3, [pc, #288]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cbe:	4945      	ldr	r1, [pc, #276]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00a      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002cd2:	4b40      	ldr	r3, [pc, #256]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ce0:	493c      	ldr	r1, [pc, #240]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00a      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002cf4:	4b37      	ldr	r3, [pc, #220]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cfa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d02:	4934      	ldr	r1, [pc, #208]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d011      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002d16:	4b2f      	ldr	r3, [pc, #188]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d1c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d24:	492b      	ldr	r1, [pc, #172]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d34:	d101      	bne.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002d36:	2301      	movs	r3, #1
 8002d38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0308 	and.w	r3, r3, #8
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002d46:	2301      	movs	r3, #1
 8002d48:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00a      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d56:	4b1f      	ldr	r3, [pc, #124]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d5c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d64:	491b      	ldr	r1, [pc, #108]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00b      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d78:	4b16      	ldr	r3, [pc, #88]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d7e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d88:	4912      	ldr	r1, [pc, #72]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00b      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002d9c:	4b0d      	ldr	r3, [pc, #52]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dac:	4909      	ldr	r1, [pc, #36]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00f      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002dc0:	4b04      	ldr	r3, [pc, #16]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dc6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd0:	e002      	b.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002dd2:	bf00      	nop
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	4986      	ldr	r1, [pc, #536]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00b      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002dec:	4b81      	ldr	r3, [pc, #516]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002df2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dfc:	497d      	ldr	r1, [pc, #500]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d006      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f000 80d6 	beq.w	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002e18:	4b76      	ldr	r3, [pc, #472]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a75      	ldr	r2, [pc, #468]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e1e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e24:	f7fd ffc8 	bl	8000db8 <HAL_GetTick>
 8002e28:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e2c:	f7fd ffc4 	bl	8000db8 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b64      	cmp	r3, #100	; 0x64
 8002e38:	d901      	bls.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e195      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e3e:	4b6d      	ldr	r3, [pc, #436]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1f0      	bne.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d021      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d11d      	bne.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e5e:	4b65      	ldr	r3, [pc, #404]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e64:	0c1b      	lsrs	r3, r3, #16
 8002e66:	f003 0303 	and.w	r3, r3, #3
 8002e6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e6c:	4b61      	ldr	r3, [pc, #388]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e72:	0e1b      	lsrs	r3, r3, #24
 8002e74:	f003 030f 	and.w	r3, r3, #15
 8002e78:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	019a      	lsls	r2, r3, #6
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	041b      	lsls	r3, r3, #16
 8002e84:	431a      	orrs	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	061b      	lsls	r3, r3, #24
 8002e8a:	431a      	orrs	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	071b      	lsls	r3, r3, #28
 8002e92:	4958      	ldr	r1, [pc, #352]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d004      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002eae:	d00a      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d02e      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ec4:	d129      	bne.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ec6:	4b4b      	ldr	r3, [pc, #300]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ecc:	0c1b      	lsrs	r3, r3, #16
 8002ece:	f003 0303 	and.w	r3, r3, #3
 8002ed2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ed4:	4b47      	ldr	r3, [pc, #284]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ed6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002eda:	0f1b      	lsrs	r3, r3, #28
 8002edc:	f003 0307 	and.w	r3, r3, #7
 8002ee0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	019a      	lsls	r2, r3, #6
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	041b      	lsls	r3, r3, #16
 8002eec:	431a      	orrs	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	061b      	lsls	r3, r3, #24
 8002ef4:	431a      	orrs	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	071b      	lsls	r3, r3, #28
 8002efa:	493e      	ldr	r1, [pc, #248]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002f02:	4b3c      	ldr	r3, [pc, #240]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f08:	f023 021f 	bic.w	r2, r3, #31
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f10:	3b01      	subs	r3, #1
 8002f12:	4938      	ldr	r1, [pc, #224]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d01d      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f26:	4b33      	ldr	r3, [pc, #204]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f2c:	0e1b      	lsrs	r3, r3, #24
 8002f2e:	f003 030f 	and.w	r3, r3, #15
 8002f32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f34:	4b2f      	ldr	r3, [pc, #188]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f3a:	0f1b      	lsrs	r3, r3, #28
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	019a      	lsls	r2, r3, #6
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	041b      	lsls	r3, r3, #16
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	061b      	lsls	r3, r3, #24
 8002f54:	431a      	orrs	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	071b      	lsls	r3, r3, #28
 8002f5a:	4926      	ldr	r1, [pc, #152]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d011      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	019a      	lsls	r2, r3, #6
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	041b      	lsls	r3, r3, #16
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	061b      	lsls	r3, r3, #24
 8002f82:	431a      	orrs	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	071b      	lsls	r3, r3, #28
 8002f8a:	491a      	ldr	r1, [pc, #104]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002f92:	4b18      	ldr	r3, [pc, #96]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a17      	ldr	r2, [pc, #92]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f9e:	f7fd ff0b 	bl	8000db8 <HAL_GetTick>
 8002fa2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002fa6:	f7fd ff07 	bl	8000db8 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b64      	cmp	r3, #100	; 0x64
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e0d8      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002fb8:	4b0e      	ldr	r3, [pc, #56]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0f0      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	f040 80ce 	bne.w	8003168 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002fcc:	4b09      	ldr	r3, [pc, #36]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a08      	ldr	r2, [pc, #32]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fd8:	f7fd feee 	bl	8000db8 <HAL_GetTick>
 8002fdc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002fde:	e00b      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002fe0:	f7fd feea 	bl	8000db8 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b64      	cmp	r3, #100	; 0x64
 8002fec:	d904      	bls.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e0bb      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002ff2:	bf00      	nop
 8002ff4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ff8:	4b5e      	ldr	r3, [pc, #376]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003000:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003004:	d0ec      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d003      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003016:	2b00      	cmp	r3, #0
 8003018:	d009      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003022:	2b00      	cmp	r3, #0
 8003024:	d02e      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	2b00      	cmp	r3, #0
 800302c:	d12a      	bne.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800302e:	4b51      	ldr	r3, [pc, #324]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003034:	0c1b      	lsrs	r3, r3, #16
 8003036:	f003 0303 	and.w	r3, r3, #3
 800303a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800303c:	4b4d      	ldr	r3, [pc, #308]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800303e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003042:	0f1b      	lsrs	r3, r3, #28
 8003044:	f003 0307 	and.w	r3, r3, #7
 8003048:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	019a      	lsls	r2, r3, #6
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	041b      	lsls	r3, r3, #16
 8003054:	431a      	orrs	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	061b      	lsls	r3, r3, #24
 800305c:	431a      	orrs	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	071b      	lsls	r3, r3, #28
 8003062:	4944      	ldr	r1, [pc, #272]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003064:	4313      	orrs	r3, r2
 8003066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800306a:	4b42      	ldr	r3, [pc, #264]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800306c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003070:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003078:	3b01      	subs	r3, #1
 800307a:	021b      	lsls	r3, r3, #8
 800307c:	493d      	ldr	r1, [pc, #244]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800307e:	4313      	orrs	r3, r2
 8003080:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d022      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003094:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003098:	d11d      	bne.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800309a:	4b36      	ldr	r3, [pc, #216]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800309c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a0:	0e1b      	lsrs	r3, r3, #24
 80030a2:	f003 030f 	and.w	r3, r3, #15
 80030a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80030a8:	4b32      	ldr	r3, [pc, #200]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ae:	0f1b      	lsrs	r3, r3, #28
 80030b0:	f003 0307 	and.w	r3, r3, #7
 80030b4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	019a      	lsls	r2, r3, #6
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	041b      	lsls	r3, r3, #16
 80030c2:	431a      	orrs	r2, r3
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	061b      	lsls	r3, r3, #24
 80030c8:	431a      	orrs	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	071b      	lsls	r3, r3, #28
 80030ce:	4929      	ldr	r1, [pc, #164]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0308 	and.w	r3, r3, #8
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d028      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80030e2:	4b24      	ldr	r3, [pc, #144]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e8:	0e1b      	lsrs	r3, r3, #24
 80030ea:	f003 030f 	and.w	r3, r3, #15
 80030ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80030f0:	4b20      	ldr	r3, [pc, #128]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f6:	0c1b      	lsrs	r3, r3, #16
 80030f8:	f003 0303 	and.w	r3, r3, #3
 80030fc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	019a      	lsls	r2, r3, #6
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	041b      	lsls	r3, r3, #16
 8003108:	431a      	orrs	r2, r3
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	061b      	lsls	r3, r3, #24
 800310e:	431a      	orrs	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	69db      	ldr	r3, [r3, #28]
 8003114:	071b      	lsls	r3, r3, #28
 8003116:	4917      	ldr	r1, [pc, #92]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003118:	4313      	orrs	r3, r2
 800311a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800311e:	4b15      	ldr	r3, [pc, #84]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003120:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003124:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312c:	4911      	ldr	r1, [pc, #68]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800312e:	4313      	orrs	r3, r2
 8003130:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003134:	4b0f      	ldr	r3, [pc, #60]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a0e      	ldr	r2, [pc, #56]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800313a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800313e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003140:	f7fd fe3a 	bl	8000db8 <HAL_GetTick>
 8003144:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003146:	e008      	b.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003148:	f7fd fe36 	bl	8000db8 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b64      	cmp	r3, #100	; 0x64
 8003154:	d901      	bls.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e007      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800315a:	4b06      	ldr	r3, [pc, #24]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003162:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003166:	d1ef      	bne.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3720      	adds	r7, #32
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	40023800 	.word	0x40023800

08003178 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e040      	b.n	800320c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800318e:	2b00      	cmp	r3, #0
 8003190:	d106      	bne.n	80031a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7fd fc7c 	bl	8000a98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2224      	movs	r2, #36	; 0x24
 80031a4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 0201 	bic.w	r2, r2, #1
 80031b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f82c 	bl	8003214 <UART_SetConfig>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d101      	bne.n	80031c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e022      	b.n	800320c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d002      	beq.n	80031d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 fa82 	bl	80036d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685a      	ldr	r2, [r3, #4]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689a      	ldr	r2, [r3, #8]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f042 0201 	orr.w	r2, r2, #1
 8003202:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f000 fb09 	bl	800381c <UART_CheckIdleState>
 800320a:	4603      	mov	r3, r0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3708      	adds	r7, #8
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b088      	sub	sp, #32
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800321c:	2300      	movs	r3, #0
 800321e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	431a      	orrs	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	431a      	orrs	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	69db      	ldr	r3, [r3, #28]
 8003234:	4313      	orrs	r3, r2
 8003236:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	4ba7      	ldr	r3, [pc, #668]	; (80034dc <UART_SetConfig+0x2c8>)
 8003240:	4013      	ands	r3, r2
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	6812      	ldr	r2, [r2, #0]
 8003246:	6979      	ldr	r1, [r7, #20]
 8003248:	430b      	orrs	r3, r1
 800324a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	68da      	ldr	r2, [r3, #12]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	430a      	orrs	r2, r1
 8003260:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	4313      	orrs	r3, r2
 8003270:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	430a      	orrs	r2, r1
 8003284:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a95      	ldr	r2, [pc, #596]	; (80034e0 <UART_SetConfig+0x2cc>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d120      	bne.n	80032d2 <UART_SetConfig+0xbe>
 8003290:	4b94      	ldr	r3, [pc, #592]	; (80034e4 <UART_SetConfig+0x2d0>)
 8003292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003296:	f003 0303 	and.w	r3, r3, #3
 800329a:	2b03      	cmp	r3, #3
 800329c:	d816      	bhi.n	80032cc <UART_SetConfig+0xb8>
 800329e:	a201      	add	r2, pc, #4	; (adr r2, 80032a4 <UART_SetConfig+0x90>)
 80032a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a4:	080032b5 	.word	0x080032b5
 80032a8:	080032c1 	.word	0x080032c1
 80032ac:	080032bb 	.word	0x080032bb
 80032b0:	080032c7 	.word	0x080032c7
 80032b4:	2301      	movs	r3, #1
 80032b6:	77fb      	strb	r3, [r7, #31]
 80032b8:	e14f      	b.n	800355a <UART_SetConfig+0x346>
 80032ba:	2302      	movs	r3, #2
 80032bc:	77fb      	strb	r3, [r7, #31]
 80032be:	e14c      	b.n	800355a <UART_SetConfig+0x346>
 80032c0:	2304      	movs	r3, #4
 80032c2:	77fb      	strb	r3, [r7, #31]
 80032c4:	e149      	b.n	800355a <UART_SetConfig+0x346>
 80032c6:	2308      	movs	r3, #8
 80032c8:	77fb      	strb	r3, [r7, #31]
 80032ca:	e146      	b.n	800355a <UART_SetConfig+0x346>
 80032cc:	2310      	movs	r3, #16
 80032ce:	77fb      	strb	r3, [r7, #31]
 80032d0:	e143      	b.n	800355a <UART_SetConfig+0x346>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a84      	ldr	r2, [pc, #528]	; (80034e8 <UART_SetConfig+0x2d4>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d132      	bne.n	8003342 <UART_SetConfig+0x12e>
 80032dc:	4b81      	ldr	r3, [pc, #516]	; (80034e4 <UART_SetConfig+0x2d0>)
 80032de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e2:	f003 030c 	and.w	r3, r3, #12
 80032e6:	2b0c      	cmp	r3, #12
 80032e8:	d828      	bhi.n	800333c <UART_SetConfig+0x128>
 80032ea:	a201      	add	r2, pc, #4	; (adr r2, 80032f0 <UART_SetConfig+0xdc>)
 80032ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f0:	08003325 	.word	0x08003325
 80032f4:	0800333d 	.word	0x0800333d
 80032f8:	0800333d 	.word	0x0800333d
 80032fc:	0800333d 	.word	0x0800333d
 8003300:	08003331 	.word	0x08003331
 8003304:	0800333d 	.word	0x0800333d
 8003308:	0800333d 	.word	0x0800333d
 800330c:	0800333d 	.word	0x0800333d
 8003310:	0800332b 	.word	0x0800332b
 8003314:	0800333d 	.word	0x0800333d
 8003318:	0800333d 	.word	0x0800333d
 800331c:	0800333d 	.word	0x0800333d
 8003320:	08003337 	.word	0x08003337
 8003324:	2300      	movs	r3, #0
 8003326:	77fb      	strb	r3, [r7, #31]
 8003328:	e117      	b.n	800355a <UART_SetConfig+0x346>
 800332a:	2302      	movs	r3, #2
 800332c:	77fb      	strb	r3, [r7, #31]
 800332e:	e114      	b.n	800355a <UART_SetConfig+0x346>
 8003330:	2304      	movs	r3, #4
 8003332:	77fb      	strb	r3, [r7, #31]
 8003334:	e111      	b.n	800355a <UART_SetConfig+0x346>
 8003336:	2308      	movs	r3, #8
 8003338:	77fb      	strb	r3, [r7, #31]
 800333a:	e10e      	b.n	800355a <UART_SetConfig+0x346>
 800333c:	2310      	movs	r3, #16
 800333e:	77fb      	strb	r3, [r7, #31]
 8003340:	e10b      	b.n	800355a <UART_SetConfig+0x346>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a69      	ldr	r2, [pc, #420]	; (80034ec <UART_SetConfig+0x2d8>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d120      	bne.n	800338e <UART_SetConfig+0x17a>
 800334c:	4b65      	ldr	r3, [pc, #404]	; (80034e4 <UART_SetConfig+0x2d0>)
 800334e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003352:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003356:	2b30      	cmp	r3, #48	; 0x30
 8003358:	d013      	beq.n	8003382 <UART_SetConfig+0x16e>
 800335a:	2b30      	cmp	r3, #48	; 0x30
 800335c:	d814      	bhi.n	8003388 <UART_SetConfig+0x174>
 800335e:	2b20      	cmp	r3, #32
 8003360:	d009      	beq.n	8003376 <UART_SetConfig+0x162>
 8003362:	2b20      	cmp	r3, #32
 8003364:	d810      	bhi.n	8003388 <UART_SetConfig+0x174>
 8003366:	2b00      	cmp	r3, #0
 8003368:	d002      	beq.n	8003370 <UART_SetConfig+0x15c>
 800336a:	2b10      	cmp	r3, #16
 800336c:	d006      	beq.n	800337c <UART_SetConfig+0x168>
 800336e:	e00b      	b.n	8003388 <UART_SetConfig+0x174>
 8003370:	2300      	movs	r3, #0
 8003372:	77fb      	strb	r3, [r7, #31]
 8003374:	e0f1      	b.n	800355a <UART_SetConfig+0x346>
 8003376:	2302      	movs	r3, #2
 8003378:	77fb      	strb	r3, [r7, #31]
 800337a:	e0ee      	b.n	800355a <UART_SetConfig+0x346>
 800337c:	2304      	movs	r3, #4
 800337e:	77fb      	strb	r3, [r7, #31]
 8003380:	e0eb      	b.n	800355a <UART_SetConfig+0x346>
 8003382:	2308      	movs	r3, #8
 8003384:	77fb      	strb	r3, [r7, #31]
 8003386:	e0e8      	b.n	800355a <UART_SetConfig+0x346>
 8003388:	2310      	movs	r3, #16
 800338a:	77fb      	strb	r3, [r7, #31]
 800338c:	e0e5      	b.n	800355a <UART_SetConfig+0x346>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a57      	ldr	r2, [pc, #348]	; (80034f0 <UART_SetConfig+0x2dc>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d120      	bne.n	80033da <UART_SetConfig+0x1c6>
 8003398:	4b52      	ldr	r3, [pc, #328]	; (80034e4 <UART_SetConfig+0x2d0>)
 800339a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800339e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80033a2:	2bc0      	cmp	r3, #192	; 0xc0
 80033a4:	d013      	beq.n	80033ce <UART_SetConfig+0x1ba>
 80033a6:	2bc0      	cmp	r3, #192	; 0xc0
 80033a8:	d814      	bhi.n	80033d4 <UART_SetConfig+0x1c0>
 80033aa:	2b80      	cmp	r3, #128	; 0x80
 80033ac:	d009      	beq.n	80033c2 <UART_SetConfig+0x1ae>
 80033ae:	2b80      	cmp	r3, #128	; 0x80
 80033b0:	d810      	bhi.n	80033d4 <UART_SetConfig+0x1c0>
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d002      	beq.n	80033bc <UART_SetConfig+0x1a8>
 80033b6:	2b40      	cmp	r3, #64	; 0x40
 80033b8:	d006      	beq.n	80033c8 <UART_SetConfig+0x1b4>
 80033ba:	e00b      	b.n	80033d4 <UART_SetConfig+0x1c0>
 80033bc:	2300      	movs	r3, #0
 80033be:	77fb      	strb	r3, [r7, #31]
 80033c0:	e0cb      	b.n	800355a <UART_SetConfig+0x346>
 80033c2:	2302      	movs	r3, #2
 80033c4:	77fb      	strb	r3, [r7, #31]
 80033c6:	e0c8      	b.n	800355a <UART_SetConfig+0x346>
 80033c8:	2304      	movs	r3, #4
 80033ca:	77fb      	strb	r3, [r7, #31]
 80033cc:	e0c5      	b.n	800355a <UART_SetConfig+0x346>
 80033ce:	2308      	movs	r3, #8
 80033d0:	77fb      	strb	r3, [r7, #31]
 80033d2:	e0c2      	b.n	800355a <UART_SetConfig+0x346>
 80033d4:	2310      	movs	r3, #16
 80033d6:	77fb      	strb	r3, [r7, #31]
 80033d8:	e0bf      	b.n	800355a <UART_SetConfig+0x346>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a45      	ldr	r2, [pc, #276]	; (80034f4 <UART_SetConfig+0x2e0>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d125      	bne.n	8003430 <UART_SetConfig+0x21c>
 80033e4:	4b3f      	ldr	r3, [pc, #252]	; (80034e4 <UART_SetConfig+0x2d0>)
 80033e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033f2:	d017      	beq.n	8003424 <UART_SetConfig+0x210>
 80033f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033f8:	d817      	bhi.n	800342a <UART_SetConfig+0x216>
 80033fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033fe:	d00b      	beq.n	8003418 <UART_SetConfig+0x204>
 8003400:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003404:	d811      	bhi.n	800342a <UART_SetConfig+0x216>
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <UART_SetConfig+0x1fe>
 800340a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800340e:	d006      	beq.n	800341e <UART_SetConfig+0x20a>
 8003410:	e00b      	b.n	800342a <UART_SetConfig+0x216>
 8003412:	2300      	movs	r3, #0
 8003414:	77fb      	strb	r3, [r7, #31]
 8003416:	e0a0      	b.n	800355a <UART_SetConfig+0x346>
 8003418:	2302      	movs	r3, #2
 800341a:	77fb      	strb	r3, [r7, #31]
 800341c:	e09d      	b.n	800355a <UART_SetConfig+0x346>
 800341e:	2304      	movs	r3, #4
 8003420:	77fb      	strb	r3, [r7, #31]
 8003422:	e09a      	b.n	800355a <UART_SetConfig+0x346>
 8003424:	2308      	movs	r3, #8
 8003426:	77fb      	strb	r3, [r7, #31]
 8003428:	e097      	b.n	800355a <UART_SetConfig+0x346>
 800342a:	2310      	movs	r3, #16
 800342c:	77fb      	strb	r3, [r7, #31]
 800342e:	e094      	b.n	800355a <UART_SetConfig+0x346>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a30      	ldr	r2, [pc, #192]	; (80034f8 <UART_SetConfig+0x2e4>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d125      	bne.n	8003486 <UART_SetConfig+0x272>
 800343a:	4b2a      	ldr	r3, [pc, #168]	; (80034e4 <UART_SetConfig+0x2d0>)
 800343c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003440:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003444:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003448:	d017      	beq.n	800347a <UART_SetConfig+0x266>
 800344a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800344e:	d817      	bhi.n	8003480 <UART_SetConfig+0x26c>
 8003450:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003454:	d00b      	beq.n	800346e <UART_SetConfig+0x25a>
 8003456:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800345a:	d811      	bhi.n	8003480 <UART_SetConfig+0x26c>
 800345c:	2b00      	cmp	r3, #0
 800345e:	d003      	beq.n	8003468 <UART_SetConfig+0x254>
 8003460:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003464:	d006      	beq.n	8003474 <UART_SetConfig+0x260>
 8003466:	e00b      	b.n	8003480 <UART_SetConfig+0x26c>
 8003468:	2301      	movs	r3, #1
 800346a:	77fb      	strb	r3, [r7, #31]
 800346c:	e075      	b.n	800355a <UART_SetConfig+0x346>
 800346e:	2302      	movs	r3, #2
 8003470:	77fb      	strb	r3, [r7, #31]
 8003472:	e072      	b.n	800355a <UART_SetConfig+0x346>
 8003474:	2304      	movs	r3, #4
 8003476:	77fb      	strb	r3, [r7, #31]
 8003478:	e06f      	b.n	800355a <UART_SetConfig+0x346>
 800347a:	2308      	movs	r3, #8
 800347c:	77fb      	strb	r3, [r7, #31]
 800347e:	e06c      	b.n	800355a <UART_SetConfig+0x346>
 8003480:	2310      	movs	r3, #16
 8003482:	77fb      	strb	r3, [r7, #31]
 8003484:	e069      	b.n	800355a <UART_SetConfig+0x346>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a1c      	ldr	r2, [pc, #112]	; (80034fc <UART_SetConfig+0x2e8>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d137      	bne.n	8003500 <UART_SetConfig+0x2ec>
 8003490:	4b14      	ldr	r3, [pc, #80]	; (80034e4 <UART_SetConfig+0x2d0>)
 8003492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003496:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800349a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800349e:	d017      	beq.n	80034d0 <UART_SetConfig+0x2bc>
 80034a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80034a4:	d817      	bhi.n	80034d6 <UART_SetConfig+0x2c2>
 80034a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034aa:	d00b      	beq.n	80034c4 <UART_SetConfig+0x2b0>
 80034ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034b0:	d811      	bhi.n	80034d6 <UART_SetConfig+0x2c2>
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d003      	beq.n	80034be <UART_SetConfig+0x2aa>
 80034b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ba:	d006      	beq.n	80034ca <UART_SetConfig+0x2b6>
 80034bc:	e00b      	b.n	80034d6 <UART_SetConfig+0x2c2>
 80034be:	2300      	movs	r3, #0
 80034c0:	77fb      	strb	r3, [r7, #31]
 80034c2:	e04a      	b.n	800355a <UART_SetConfig+0x346>
 80034c4:	2302      	movs	r3, #2
 80034c6:	77fb      	strb	r3, [r7, #31]
 80034c8:	e047      	b.n	800355a <UART_SetConfig+0x346>
 80034ca:	2304      	movs	r3, #4
 80034cc:	77fb      	strb	r3, [r7, #31]
 80034ce:	e044      	b.n	800355a <UART_SetConfig+0x346>
 80034d0:	2308      	movs	r3, #8
 80034d2:	77fb      	strb	r3, [r7, #31]
 80034d4:	e041      	b.n	800355a <UART_SetConfig+0x346>
 80034d6:	2310      	movs	r3, #16
 80034d8:	77fb      	strb	r3, [r7, #31]
 80034da:	e03e      	b.n	800355a <UART_SetConfig+0x346>
 80034dc:	efff69f3 	.word	0xefff69f3
 80034e0:	40011000 	.word	0x40011000
 80034e4:	40023800 	.word	0x40023800
 80034e8:	40004400 	.word	0x40004400
 80034ec:	40004800 	.word	0x40004800
 80034f0:	40004c00 	.word	0x40004c00
 80034f4:	40005000 	.word	0x40005000
 80034f8:	40011400 	.word	0x40011400
 80034fc:	40007800 	.word	0x40007800
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a71      	ldr	r2, [pc, #452]	; (80036cc <UART_SetConfig+0x4b8>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d125      	bne.n	8003556 <UART_SetConfig+0x342>
 800350a:	4b71      	ldr	r3, [pc, #452]	; (80036d0 <UART_SetConfig+0x4bc>)
 800350c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003510:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003514:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003518:	d017      	beq.n	800354a <UART_SetConfig+0x336>
 800351a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800351e:	d817      	bhi.n	8003550 <UART_SetConfig+0x33c>
 8003520:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003524:	d00b      	beq.n	800353e <UART_SetConfig+0x32a>
 8003526:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800352a:	d811      	bhi.n	8003550 <UART_SetConfig+0x33c>
 800352c:	2b00      	cmp	r3, #0
 800352e:	d003      	beq.n	8003538 <UART_SetConfig+0x324>
 8003530:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003534:	d006      	beq.n	8003544 <UART_SetConfig+0x330>
 8003536:	e00b      	b.n	8003550 <UART_SetConfig+0x33c>
 8003538:	2300      	movs	r3, #0
 800353a:	77fb      	strb	r3, [r7, #31]
 800353c:	e00d      	b.n	800355a <UART_SetConfig+0x346>
 800353e:	2302      	movs	r3, #2
 8003540:	77fb      	strb	r3, [r7, #31]
 8003542:	e00a      	b.n	800355a <UART_SetConfig+0x346>
 8003544:	2304      	movs	r3, #4
 8003546:	77fb      	strb	r3, [r7, #31]
 8003548:	e007      	b.n	800355a <UART_SetConfig+0x346>
 800354a:	2308      	movs	r3, #8
 800354c:	77fb      	strb	r3, [r7, #31]
 800354e:	e004      	b.n	800355a <UART_SetConfig+0x346>
 8003550:	2310      	movs	r3, #16
 8003552:	77fb      	strb	r3, [r7, #31]
 8003554:	e001      	b.n	800355a <UART_SetConfig+0x346>
 8003556:	2310      	movs	r3, #16
 8003558:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003562:	d15a      	bne.n	800361a <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8003564:	7ffb      	ldrb	r3, [r7, #31]
 8003566:	2b08      	cmp	r3, #8
 8003568:	d827      	bhi.n	80035ba <UART_SetConfig+0x3a6>
 800356a:	a201      	add	r2, pc, #4	; (adr r2, 8003570 <UART_SetConfig+0x35c>)
 800356c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003570:	08003595 	.word	0x08003595
 8003574:	0800359d 	.word	0x0800359d
 8003578:	080035a5 	.word	0x080035a5
 800357c:	080035bb 	.word	0x080035bb
 8003580:	080035ab 	.word	0x080035ab
 8003584:	080035bb 	.word	0x080035bb
 8003588:	080035bb 	.word	0x080035bb
 800358c:	080035bb 	.word	0x080035bb
 8003590:	080035b3 	.word	0x080035b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003594:	f7ff f9a0 	bl	80028d8 <HAL_RCC_GetPCLK1Freq>
 8003598:	61b8      	str	r0, [r7, #24]
        break;
 800359a:	e013      	b.n	80035c4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800359c:	f7ff f9b0 	bl	8002900 <HAL_RCC_GetPCLK2Freq>
 80035a0:	61b8      	str	r0, [r7, #24]
        break;
 80035a2:	e00f      	b.n	80035c4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035a4:	4b4b      	ldr	r3, [pc, #300]	; (80036d4 <UART_SetConfig+0x4c0>)
 80035a6:	61bb      	str	r3, [r7, #24]
        break;
 80035a8:	e00c      	b.n	80035c4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035aa:	f7ff f8a7 	bl	80026fc <HAL_RCC_GetSysClockFreq>
 80035ae:	61b8      	str	r0, [r7, #24]
        break;
 80035b0:	e008      	b.n	80035c4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035b6:	61bb      	str	r3, [r7, #24]
        break;
 80035b8:	e004      	b.n	80035c4 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80035ba:	2300      	movs	r3, #0
 80035bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	77bb      	strb	r3, [r7, #30]
        break;
 80035c2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d074      	beq.n	80036b4 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	005a      	lsls	r2, r3, #1
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	085b      	lsrs	r3, r3, #1
 80035d4:	441a      	add	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	fbb2 f3f3 	udiv	r3, r2, r3
 80035de:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	2b0f      	cmp	r3, #15
 80035e4:	d916      	bls.n	8003614 <UART_SetConfig+0x400>
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035ec:	d212      	bcs.n	8003614 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	f023 030f 	bic.w	r3, r3, #15
 80035f6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	085b      	lsrs	r3, r3, #1
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	f003 0307 	and.w	r3, r3, #7
 8003602:	b29a      	uxth	r2, r3
 8003604:	89fb      	ldrh	r3, [r7, #14]
 8003606:	4313      	orrs	r3, r2
 8003608:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	89fa      	ldrh	r2, [r7, #14]
 8003610:	60da      	str	r2, [r3, #12]
 8003612:	e04f      	b.n	80036b4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	77bb      	strb	r3, [r7, #30]
 8003618:	e04c      	b.n	80036b4 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800361a:	7ffb      	ldrb	r3, [r7, #31]
 800361c:	2b08      	cmp	r3, #8
 800361e:	d828      	bhi.n	8003672 <UART_SetConfig+0x45e>
 8003620:	a201      	add	r2, pc, #4	; (adr r2, 8003628 <UART_SetConfig+0x414>)
 8003622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003626:	bf00      	nop
 8003628:	0800364d 	.word	0x0800364d
 800362c:	08003655 	.word	0x08003655
 8003630:	0800365d 	.word	0x0800365d
 8003634:	08003673 	.word	0x08003673
 8003638:	08003663 	.word	0x08003663
 800363c:	08003673 	.word	0x08003673
 8003640:	08003673 	.word	0x08003673
 8003644:	08003673 	.word	0x08003673
 8003648:	0800366b 	.word	0x0800366b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800364c:	f7ff f944 	bl	80028d8 <HAL_RCC_GetPCLK1Freq>
 8003650:	61b8      	str	r0, [r7, #24]
        break;
 8003652:	e013      	b.n	800367c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003654:	f7ff f954 	bl	8002900 <HAL_RCC_GetPCLK2Freq>
 8003658:	61b8      	str	r0, [r7, #24]
        break;
 800365a:	e00f      	b.n	800367c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800365c:	4b1d      	ldr	r3, [pc, #116]	; (80036d4 <UART_SetConfig+0x4c0>)
 800365e:	61bb      	str	r3, [r7, #24]
        break;
 8003660:	e00c      	b.n	800367c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003662:	f7ff f84b 	bl	80026fc <HAL_RCC_GetSysClockFreq>
 8003666:	61b8      	str	r0, [r7, #24]
        break;
 8003668:	e008      	b.n	800367c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800366a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800366e:	61bb      	str	r3, [r7, #24]
        break;
 8003670:	e004      	b.n	800367c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8003672:	2300      	movs	r3, #0
 8003674:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	77bb      	strb	r3, [r7, #30]
        break;
 800367a:	bf00      	nop
    }

    if (pclk != 0U)
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d018      	beq.n	80036b4 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	085a      	lsrs	r2, r3, #1
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	441a      	add	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	fbb2 f3f3 	udiv	r3, r2, r3
 8003694:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	2b0f      	cmp	r3, #15
 800369a:	d909      	bls.n	80036b0 <UART_SetConfig+0x49c>
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036a2:	d205      	bcs.n	80036b0 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	60da      	str	r2, [r3, #12]
 80036ae:	e001      	b.n	80036b4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80036c0:	7fbb      	ldrb	r3, [r7, #30]
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3720      	adds	r7, #32
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	40007c00 	.word	0x40007c00
 80036d0:	40023800 	.word	0x40023800
 80036d4:	00f42400 	.word	0x00f42400

080036d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00a      	beq.n	8003702 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00a      	beq.n	8003724 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	430a      	orrs	r2, r1
 8003722:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003728:	f003 0304 	and.w	r3, r3, #4
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00a      	beq.n	8003746 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374a:	f003 0308 	and.w	r3, r3, #8
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00a      	beq.n	8003768 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	430a      	orrs	r2, r1
 8003766:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376c:	f003 0310 	and.w	r3, r3, #16
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00a      	beq.n	800378a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	430a      	orrs	r2, r1
 8003788:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	f003 0320 	and.w	r3, r3, #32
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00a      	beq.n	80037ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	430a      	orrs	r2, r1
 80037aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d01a      	beq.n	80037ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	430a      	orrs	r2, r1
 80037cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037d6:	d10a      	bne.n	80037ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	430a      	orrs	r2, r1
 80037ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00a      	beq.n	8003810 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	430a      	orrs	r2, r1
 800380e:	605a      	str	r2, [r3, #4]
  }
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af02      	add	r7, sp, #8
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800382c:	f7fd fac4 	bl	8000db8 <HAL_GetTick>
 8003830:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0308 	and.w	r3, r3, #8
 800383c:	2b08      	cmp	r3, #8
 800383e:	d10e      	bne.n	800385e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003840:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003844:	9300      	str	r3, [sp, #0]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f82d 	bl	80038ae <UART_WaitOnFlagUntilTimeout>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d001      	beq.n	800385e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e023      	b.n	80038a6 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	2b04      	cmp	r3, #4
 800386a:	d10e      	bne.n	800388a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800386c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f817 	bl	80038ae <UART_WaitOnFlagUntilTimeout>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e00d      	b.n	80038a6 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2220      	movs	r2, #32
 800388e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2220      	movs	r2, #32
 8003894:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b09c      	sub	sp, #112	; 0x70
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	60f8      	str	r0, [r7, #12]
 80038b6:	60b9      	str	r1, [r7, #8]
 80038b8:	603b      	str	r3, [r7, #0]
 80038ba:	4613      	mov	r3, r2
 80038bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038be:	e0a5      	b.n	8003a0c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c6:	f000 80a1 	beq.w	8003a0c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ca:	f7fd fa75 	bl	8000db8 <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d302      	bcc.n	80038e0 <UART_WaitOnFlagUntilTimeout+0x32>
 80038da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d13e      	bne.n	800395e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038e8:	e853 3f00 	ldrex	r3, [r3]
 80038ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80038ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80038f4:	667b      	str	r3, [r7, #100]	; 0x64
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	461a      	mov	r2, r3
 80038fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003900:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003902:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003904:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003906:	e841 2300 	strex	r3, r2, [r1]
 800390a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800390c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1e6      	bne.n	80038e0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	3308      	adds	r3, #8
 8003918:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800391a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800391c:	e853 3f00 	ldrex	r3, [r3]
 8003920:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003924:	f023 0301 	bic.w	r3, r3, #1
 8003928:	663b      	str	r3, [r7, #96]	; 0x60
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	3308      	adds	r3, #8
 8003930:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003932:	64ba      	str	r2, [r7, #72]	; 0x48
 8003934:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003936:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003938:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800393a:	e841 2300 	strex	r3, r2, [r1]
 800393e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1e5      	bne.n	8003912 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2220      	movs	r2, #32
 800394a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2220      	movs	r2, #32
 8003950:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e067      	b.n	8003a2e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0304 	and.w	r3, r3, #4
 8003968:	2b00      	cmp	r3, #0
 800396a:	d04f      	beq.n	8003a0c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003976:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800397a:	d147      	bne.n	8003a0c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003984:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800398c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398e:	e853 3f00 	ldrex	r3, [r3]
 8003992:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003996:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800399a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	461a      	mov	r2, r3
 80039a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039a4:	637b      	str	r3, [r7, #52]	; 0x34
 80039a6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039ac:	e841 2300 	strex	r3, r2, [r1]
 80039b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80039b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1e6      	bne.n	8003986 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	3308      	adds	r3, #8
 80039be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	e853 3f00 	ldrex	r3, [r3]
 80039c6:	613b      	str	r3, [r7, #16]
   return(result);
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	f023 0301 	bic.w	r3, r3, #1
 80039ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	3308      	adds	r3, #8
 80039d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80039d8:	623a      	str	r2, [r7, #32]
 80039da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039dc:	69f9      	ldr	r1, [r7, #28]
 80039de:	6a3a      	ldr	r2, [r7, #32]
 80039e0:	e841 2300 	strex	r3, r2, [r1]
 80039e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1e5      	bne.n	80039b8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2220      	movs	r2, #32
 80039f0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2220      	movs	r2, #32
 80039f6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2220      	movs	r2, #32
 80039fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e010      	b.n	8003a2e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	69da      	ldr	r2, [r3, #28]
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	4013      	ands	r3, r2
 8003a16:	68ba      	ldr	r2, [r7, #8]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	bf0c      	ite	eq
 8003a1c:	2301      	moveq	r3, #1
 8003a1e:	2300      	movne	r3, #0
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	461a      	mov	r2, r3
 8003a24:	79fb      	ldrb	r3, [r7, #7]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	f43f af4a 	beq.w	80038c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3770      	adds	r7, #112	; 0x70
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
	...

08003a38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a38:	b084      	sub	sp, #16
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b084      	sub	sp, #16
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
 8003a42:	f107 001c 	add.w	r0, r7, #28
 8003a46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d120      	bne.n	8003a92 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	68da      	ldr	r2, [r3, #12]
 8003a60:	4b20      	ldr	r3, [pc, #128]	; (8003ae4 <USB_CoreInit+0xac>)
 8003a62:	4013      	ands	r3, r2
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003a74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d105      	bne.n	8003a86 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 fa92 	bl	8003fb0 <USB_CoreReset>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	73fb      	strb	r3, [r7, #15]
 8003a90:	e010      	b.n	8003ab4 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 fa86 	bl	8003fb0 <USB_CoreReset>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8003ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d10b      	bne.n	8003ad2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f043 0206 	orr.w	r2, r3, #6
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f043 0220 	orr.w	r2, r3, #32
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ade:	b004      	add	sp, #16
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	ffbdffbf 	.word	0xffbdffbf

08003ae8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f023 0201 	bic.w	r2, r3, #1
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b084      	sub	sp, #16
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
 8003b12:	460b      	mov	r3, r1
 8003b14:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003b16:	2300      	movs	r3, #0
 8003b18:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003b26:	78fb      	ldrb	r3, [r7, #3]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d115      	bne.n	8003b58 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003b38:	2001      	movs	r0, #1
 8003b3a:	f7fd f949 	bl	8000dd0 <HAL_Delay>
      ms++;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	3301      	adds	r3, #1
 8003b42:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 fa25 	bl	8003f94 <USB_GetMode>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d01e      	beq.n	8003b8e <USB_SetCurrentMode+0x84>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2b31      	cmp	r3, #49	; 0x31
 8003b54:	d9f0      	bls.n	8003b38 <USB_SetCurrentMode+0x2e>
 8003b56:	e01a      	b.n	8003b8e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003b58:	78fb      	ldrb	r3, [r7, #3]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d115      	bne.n	8003b8a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003b6a:	2001      	movs	r0, #1
 8003b6c:	f7fd f930 	bl	8000dd0 <HAL_Delay>
      ms++;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	3301      	adds	r3, #1
 8003b74:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 fa0c 	bl	8003f94 <USB_GetMode>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d005      	beq.n	8003b8e <USB_SetCurrentMode+0x84>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2b31      	cmp	r3, #49	; 0x31
 8003b86:	d9f0      	bls.n	8003b6a <USB_SetCurrentMode+0x60>
 8003b88:	e001      	b.n	8003b8e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e005      	b.n	8003b9a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2b32      	cmp	r3, #50	; 0x32
 8003b92:	d101      	bne.n	8003b98 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e000      	b.n	8003b9a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3710      	adds	r7, #16
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
	...

08003ba4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ba4:	b084      	sub	sp, #16
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b086      	sub	sp, #24
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
 8003bae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003bb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	613b      	str	r3, [r7, #16]
 8003bc2:	e009      	b.n	8003bd8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	3340      	adds	r3, #64	; 0x40
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	4413      	add	r3, r2
 8003bce:	2200      	movs	r2, #0
 8003bd0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	613b      	str	r3, [r7, #16]
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	2b0e      	cmp	r3, #14
 8003bdc:	d9f2      	bls.n	8003bc4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003bde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d11c      	bne.n	8003c1e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bf2:	f043 0302 	orr.w	r3, r3, #2
 8003bf6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	601a      	str	r2, [r3, #0]
 8003c1c:	e005      	b.n	8003c2a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c22:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003c30:	461a      	mov	r2, r3
 8003c32:	2300      	movs	r3, #0
 8003c34:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c44:	461a      	mov	r2, r3
 8003c46:	680b      	ldr	r3, [r1, #0]
 8003c48:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d10c      	bne.n	8003c6a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d104      	bne.n	8003c60 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003c56:	2100      	movs	r1, #0
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 f961 	bl	8003f20 <USB_SetDevSpeed>
 8003c5e:	e008      	b.n	8003c72 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003c60:	2101      	movs	r1, #1
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f95c 	bl	8003f20 <USB_SetDevSpeed>
 8003c68:	e003      	b.n	8003c72 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003c6a:	2103      	movs	r1, #3
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 f957 	bl	8003f20 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003c72:	2110      	movs	r1, #16
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 f8f3 	bl	8003e60 <USB_FlushTxFifo>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d001      	beq.n	8003c84 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 f91d 	bl	8003ec4 <USB_FlushRxFifo>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d001      	beq.n	8003c94 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	2300      	movs	r3, #0
 8003caa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003cb8:	2300      	movs	r3, #0
 8003cba:	613b      	str	r3, [r7, #16]
 8003cbc:	e043      	b.n	8003d46 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	015a      	lsls	r2, r3, #5
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003cd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003cd4:	d118      	bne.n	8003d08 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d10a      	bne.n	8003cf2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	015a      	lsls	r2, r3, #5
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ce8:	461a      	mov	r2, r3
 8003cea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003cee:	6013      	str	r3, [r2, #0]
 8003cf0:	e013      	b.n	8003d1a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	015a      	lsls	r2, r3, #5
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cfe:	461a      	mov	r2, r3
 8003d00:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003d04:	6013      	str	r3, [r2, #0]
 8003d06:	e008      	b.n	8003d1a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	015a      	lsls	r2, r3, #5
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	4413      	add	r3, r2
 8003d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d14:	461a      	mov	r2, r3
 8003d16:	2300      	movs	r3, #0
 8003d18:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	015a      	lsls	r2, r3, #5
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	4413      	add	r3, r2
 8003d22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d26:	461a      	mov	r2, r3
 8003d28:	2300      	movs	r3, #0
 8003d2a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	015a      	lsls	r2, r3, #5
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	4413      	add	r3, r2
 8003d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d38:	461a      	mov	r2, r3
 8003d3a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d3e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	3301      	adds	r3, #1
 8003d44:	613b      	str	r3, [r7, #16]
 8003d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d3b7      	bcc.n	8003cbe <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d4e:	2300      	movs	r3, #0
 8003d50:	613b      	str	r3, [r7, #16]
 8003d52:	e043      	b.n	8003ddc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	015a      	lsls	r2, r3, #5
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d6a:	d118      	bne.n	8003d9e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10a      	bne.n	8003d88 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	015a      	lsls	r2, r3, #5
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	4413      	add	r3, r2
 8003d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d7e:	461a      	mov	r2, r3
 8003d80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003d84:	6013      	str	r3, [r2, #0]
 8003d86:	e013      	b.n	8003db0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	015a      	lsls	r2, r3, #5
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	4413      	add	r3, r2
 8003d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d94:	461a      	mov	r2, r3
 8003d96:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003d9a:	6013      	str	r3, [r2, #0]
 8003d9c:	e008      	b.n	8003db0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	015a      	lsls	r2, r3, #5
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	4413      	add	r3, r2
 8003da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003daa:	461a      	mov	r2, r3
 8003dac:	2300      	movs	r3, #0
 8003dae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	015a      	lsls	r2, r3, #5
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	4413      	add	r3, r2
 8003db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	015a      	lsls	r2, r3, #5
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	4413      	add	r3, r2
 8003dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dce:	461a      	mov	r2, r3
 8003dd0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003dd4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	3301      	adds	r3, #1
 8003dda:	613b      	str	r3, [r7, #16]
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d3b7      	bcc.n	8003d54 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003df2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003df6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003e04:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d105      	bne.n	8003e18 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	f043 0210 	orr.w	r2, r3, #16
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	699a      	ldr	r2, [r3, #24]
 8003e1c:	4b0e      	ldr	r3, [pc, #56]	; (8003e58 <USB_DevInit+0x2b4>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d005      	beq.n	8003e36 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	f043 0208 	orr.w	r2, r3, #8
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003e36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d105      	bne.n	8003e48 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	699a      	ldr	r2, [r3, #24]
 8003e40:	4b06      	ldr	r3, [pc, #24]	; (8003e5c <USB_DevInit+0x2b8>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003e48:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3718      	adds	r7, #24
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e54:	b004      	add	sp, #16
 8003e56:	4770      	bx	lr
 8003e58:	803c3800 	.word	0x803c3800
 8003e5c:	40000004 	.word	0x40000004

08003e60 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	3301      	adds	r3, #1
 8003e72:	60fb      	str	r3, [r7, #12]
 8003e74:	4a12      	ldr	r2, [pc, #72]	; (8003ec0 <USB_FlushTxFifo+0x60>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d901      	bls.n	8003e7e <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e01a      	b.n	8003eb4 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	daf3      	bge.n	8003e6e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003e86:	2300      	movs	r3, #0
 8003e88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	019b      	lsls	r3, r3, #6
 8003e8e:	f043 0220 	orr.w	r2, r3, #32
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	3301      	adds	r3, #1
 8003e9a:	60fb      	str	r3, [r7, #12]
 8003e9c:	4a08      	ldr	r2, [pc, #32]	; (8003ec0 <USB_FlushTxFifo+0x60>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d901      	bls.n	8003ea6 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e006      	b.n	8003eb4 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	f003 0320 	and.w	r3, r3, #32
 8003eae:	2b20      	cmp	r3, #32
 8003eb0:	d0f1      	beq.n	8003e96 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr
 8003ec0:	00030d40 	.word	0x00030d40

08003ec4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	60fb      	str	r3, [r7, #12]
 8003ed6:	4a11      	ldr	r2, [pc, #68]	; (8003f1c <USB_FlushRxFifo+0x58>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d901      	bls.n	8003ee0 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e017      	b.n	8003f10 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	daf3      	bge.n	8003ed0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2210      	movs	r2, #16
 8003ef0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	60fb      	str	r3, [r7, #12]
 8003ef8:	4a08      	ldr	r2, [pc, #32]	; (8003f1c <USB_FlushRxFifo+0x58>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d901      	bls.n	8003f02 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e006      	b.n	8003f10 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	f003 0310 	and.w	r3, r3, #16
 8003f0a:	2b10      	cmp	r3, #16
 8003f0c:	d0f1      	beq.n	8003ef2 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3714      	adds	r7, #20
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr
 8003f1c:	00030d40 	.word	0x00030d40

08003f20 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	460b      	mov	r3, r1
 8003f2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	78fb      	ldrb	r3, [r7, #3]
 8003f3a:	68f9      	ldr	r1, [r7, #12]
 8003f3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f40:	4313      	orrs	r3, r2
 8003f42:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3714      	adds	r7, #20
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003f52:	b480      	push	{r7}
 8003f54:	b085      	sub	sp, #20
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003f6c:	f023 0303 	bic.w	r3, r3, #3
 8003f70:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f80:	f043 0302 	orr.w	r3, r3, #2
 8003f84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3714      	adds	r7, #20
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	695b      	ldr	r3, [r3, #20]
 8003fa0:	f003 0301 	and.w	r3, r3, #1
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	60fb      	str	r3, [r7, #12]
 8003fc2:	4a13      	ldr	r2, [pc, #76]	; (8004010 <USB_CoreReset+0x60>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d901      	bls.n	8003fcc <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e01a      	b.n	8004002 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	daf3      	bge.n	8003fbc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	f043 0201 	orr.w	r2, r3, #1
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	60fb      	str	r3, [r7, #12]
 8003fea:	4a09      	ldr	r2, [pc, #36]	; (8004010 <USB_CoreReset+0x60>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d901      	bls.n	8003ff4 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e006      	b.n	8004002 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d0f1      	beq.n	8003fe4 <USB_CoreReset+0x34>

  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3714      	adds	r7, #20
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	00030d40 	.word	0x00030d40

08004014 <__libc_init_array>:
 8004014:	b570      	push	{r4, r5, r6, lr}
 8004016:	4d0d      	ldr	r5, [pc, #52]	; (800404c <__libc_init_array+0x38>)
 8004018:	4c0d      	ldr	r4, [pc, #52]	; (8004050 <__libc_init_array+0x3c>)
 800401a:	1b64      	subs	r4, r4, r5
 800401c:	10a4      	asrs	r4, r4, #2
 800401e:	2600      	movs	r6, #0
 8004020:	42a6      	cmp	r6, r4
 8004022:	d109      	bne.n	8004038 <__libc_init_array+0x24>
 8004024:	4d0b      	ldr	r5, [pc, #44]	; (8004054 <__libc_init_array+0x40>)
 8004026:	4c0c      	ldr	r4, [pc, #48]	; (8004058 <__libc_init_array+0x44>)
 8004028:	f000 f820 	bl	800406c <_init>
 800402c:	1b64      	subs	r4, r4, r5
 800402e:	10a4      	asrs	r4, r4, #2
 8004030:	2600      	movs	r6, #0
 8004032:	42a6      	cmp	r6, r4
 8004034:	d105      	bne.n	8004042 <__libc_init_array+0x2e>
 8004036:	bd70      	pop	{r4, r5, r6, pc}
 8004038:	f855 3b04 	ldr.w	r3, [r5], #4
 800403c:	4798      	blx	r3
 800403e:	3601      	adds	r6, #1
 8004040:	e7ee      	b.n	8004020 <__libc_init_array+0xc>
 8004042:	f855 3b04 	ldr.w	r3, [r5], #4
 8004046:	4798      	blx	r3
 8004048:	3601      	adds	r6, #1
 800404a:	e7f2      	b.n	8004032 <__libc_init_array+0x1e>
 800404c:	080040a4 	.word	0x080040a4
 8004050:	080040a4 	.word	0x080040a4
 8004054:	080040a4 	.word	0x080040a4
 8004058:	080040a8 	.word	0x080040a8

0800405c <memset>:
 800405c:	4402      	add	r2, r0
 800405e:	4603      	mov	r3, r0
 8004060:	4293      	cmp	r3, r2
 8004062:	d100      	bne.n	8004066 <memset+0xa>
 8004064:	4770      	bx	lr
 8004066:	f803 1b01 	strb.w	r1, [r3], #1
 800406a:	e7f9      	b.n	8004060 <memset+0x4>

0800406c <_init>:
 800406c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800406e:	bf00      	nop
 8004070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004072:	bc08      	pop	{r3}
 8004074:	469e      	mov	lr, r3
 8004076:	4770      	bx	lr

08004078 <_fini>:
 8004078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800407a:	bf00      	nop
 800407c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800407e:	bc08      	pop	{r3}
 8004080:	469e      	mov	lr, r3
 8004082:	4770      	bx	lr
